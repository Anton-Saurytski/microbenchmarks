Running benchmarks with thread group distribution: 1,1
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 210905800.378 ops/s
# Warmup Iteration   2: 56767892.078 ops/s
# Warmup Iteration   3: 100930777.413 ops/s
# Warmup Iteration   4: 238303239.671 ops/s
# Warmup Iteration   5: 111000516.992 ops/s
Iteration   1: 220072049.089 ops/s
                 getAdder: 135831185.701 ops/s
                 incAdder: 84240863.388 ops/s

Iteration   2: 101253195.812 ops/s
                 getAdder: 67343152.362 ops/s
                 incAdder: 33910043.451 ops/s

Iteration   3: 101455997.763 ops/s
                 getAdder: 68705118.372 ops/s
                 incAdder: 32750879.392 ops/s

Iteration   4: 102561049.023 ops/s
                 getAdder: 69314520.167 ops/s
                 incAdder: 33246528.856 ops/s

Iteration   5: 238739245.398 ops/s
                 getAdder: 143951993.337 ops/s
                 incAdder: 94787252.060 ops/s

Iteration   6: 111054441.609 ops/s
                 getAdder: 80325457.526 ops/s
                 incAdder: 30728984.083 ops/s

Iteration   7: 111288426.277 ops/s
                 getAdder: 80608443.739 ops/s
                 incAdder: 30679982.538 ops/s

Iteration   8: 187859124.377 ops/s
                 getAdder: 117687799.249 ops/s
                 incAdder: 70171325.128 ops/s

Iteration   9: 101399738.185 ops/s
                 getAdder: 68370482.540 ops/s
                 incAdder: 33029255.644 ops/s

Iteration  10: 102440231.295 ops/s
                 getAdder: 69508826.202 ops/s
                 incAdder: 32931405.094 ops/s



Result "getAdder":
  137812349.883 ±(99.9%) 83350679.099 ops/s [Average]
  (min, avg, max) = (101253195.812, 137812349.883, 238739245.398), stdev = 55131313.476
  CI (99.9%): [54461670.784, 221163028.982] (assumes normal distribution)

Secondary result "getAdder":
  90164697.920 ±(99.9%) 45751205.427 ops/s [Average]
  (min, avg, max) = (67343152.362, 90164697.920, 143951993.337), stdev = 30261589.654
  CI (99.9%): [44413492.492, 135915903.347] (assumes normal distribution)

Secondary result "incAdder":
  47647651.963 ±(99.9%) 38017383.138 ops/s [Average]
  (min, avg, max) = (30679982.538, 47647651.963, 94787252.060), stdev = 25146145.058
  CI (99.9%): [9630268.826, 85665035.101] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 228021463.826 ops/s
# Warmup Iteration   2: 229461534.362 ops/s
# Warmup Iteration   3: 100113825.785 ops/s
# Warmup Iteration   4: 242672622.848 ops/s
# Warmup Iteration   5: 100175775.541 ops/s
Iteration   1: 244586266.524 ops/s
                 getAtomic: 100203462.000 ops/s
                 incAtomic: 144382804.524 ops/s

Iteration   2: 100888960.870 ops/s
                 getAtomic: 66728462.805 ops/s
                 incAtomic: 34160498.065 ops/s

Iteration   3: 99884911.913 ops/s
                 getAtomic: 65536044.085 ops/s
                 incAtomic: 34348867.827 ops/s

Iteration   4: 104043145.319 ops/s
                 getAtomic: 61510331.649 ops/s
                 incAtomic: 42532813.671 ops/s

Iteration   5: 241716212.740 ops/s
                 getAtomic: 98388090.002 ops/s
                 incAtomic: 143328122.739 ops/s

Iteration   6: 104688129.714 ops/s
                 getAtomic: 67132959.813 ops/s
                 incAtomic: 37555169.901 ops/s

Iteration   7: 104444964.809 ops/s
                 getAtomic: 63406887.873 ops/s
                 incAtomic: 41038076.936 ops/s

Iteration   8: 102718426.763 ops/s
                 getAtomic: 61741378.967 ops/s
                 incAtomic: 40977047.796 ops/s

Iteration   9: 247082376.425 ops/s
                 getAtomic: 103220072.903 ops/s
                 incAtomic: 143862303.522 ops/s

Iteration  10: 99822799.183 ops/s
                 getAtomic: 65666583.381 ops/s
                 incAtomic: 34156215.802 ops/s



Result "getAtomic":
  144987619.426 ±(99.9%) 103830527.388 ops/s [Average]
  (min, avg, max) = (99822799.183, 144987619.426, 247082376.425), stdev = 68677465.087
  CI (99.9%): [41157092.038, 248818146.814] (assumes normal distribution)

Secondary result "getAtomic":
  75353427.348 ±(99.9%) 26554472.149 ops/s [Average]
  (min, avg, max) = (61510331.649, 75353427.348, 103220072.903), stdev = 17564139.177
  CI (99.9%): [48798955.199, 101907899.497] (assumes normal distribution)

Secondary result "incAtomic":
  69634192.078 ±(99.9%) 77570386.474 ops/s [Average]
  (min, avg, max) = (34156215.802, 69634192.078, 144382804.524), stdev = 51308007.798
  CI (99.9%): [≈ 0, 147204578.553] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 1106357.524 ops/s
# Warmup Iteration   2: 504741.511 ops/s
# Warmup Iteration   3: 396520.611 ops/s
# Warmup Iteration   4: 404764.205 ops/s
# Warmup Iteration   5: 384107.415 ops/s
Iteration   1: 396741.363 ops/s
                 getFairLock: 196101.902 ops/s
                 incFairLock: 200639.461 ops/s

Iteration   2: 378693.024 ops/s
                 getFairLock: 188696.327 ops/s
                 incFairLock: 189996.697 ops/s

Iteration   3: 377209.593 ops/s
                 getFairLock: 188086.444 ops/s
                 incFairLock: 189123.149 ops/s

Iteration   4: 408861.042 ops/s
                 getFairLock: 199685.539 ops/s
                 incFairLock: 209175.503 ops/s

Iteration   5: 373951.050 ops/s
                 getFairLock: 186365.850 ops/s
                 incFairLock: 187585.200 ops/s

Iteration   6: 377103.608 ops/s
                 getFairLock: 188383.843 ops/s
                 incFairLock: 188719.766 ops/s

Iteration   7: 393516.729 ops/s
                 getFairLock: 196030.742 ops/s
                 incFairLock: 197485.987 ops/s

Iteration   8: 371019.186 ops/s
                 getFairLock: 185369.650 ops/s
                 incFairLock: 185649.536 ops/s

Iteration   9: 376421.065 ops/s
                 getFairLock: 186000.131 ops/s
                 incFairLock: 190420.934 ops/s

Iteration  10: 399966.793 ops/s
                 getFairLock: 201608.326 ops/s
                 incFairLock: 198358.468 ops/s



Result "getFairLock":
  385348.345 ±(99.9%) 19882.166 ops/s [Average]
  (min, avg, max) = (371019.186, 385348.345, 408861.042), stdev = 13150.822
  CI (99.9%): [365466.179, 405230.512] (assumes normal distribution)

Secondary result "getFairLock":
  191632.875 ±(99.9%) 9211.756 ops/s [Average]
  (min, avg, max) = (185369.650, 191632.875, 201608.326), stdev = 6093.006
  CI (99.9%): [182421.120, 200844.631] (assumes normal distribution)

Secondary result "incFairLock":
  193715.470 ±(99.9%) 11224.659 ops/s [Average]
  (min, avg, max) = (185649.536, 193715.470, 209175.503), stdev = 7424.417
  CI (99.9%): [182490.811, 204940.129] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 27021337.074 ops/s
# Warmup Iteration   2: 8450184.570 ops/s
# Warmup Iteration   3: 24974227.088 ops/s
# Warmup Iteration   4: 15460312.846 ops/s
# Warmup Iteration   5: 7502730.034 ops/s
Iteration   1: 8150527.366 ops/s
                 getNonFairLock: 3502519.236 ops/s
                 incNonFairLock: 4648008.130 ops/s

Iteration   2: 27016812.296 ops/s
                 getNonFairLock: 11497115.313 ops/s
                 incNonFairLock: 15519696.984 ops/s

Iteration   3: 27868594.635 ops/s
                 getNonFairLock: 10534642.286 ops/s
                 incNonFairLock: 17333952.349 ops/s

Iteration   4: 7466639.298 ops/s
                 getNonFairLock: 3375040.360 ops/s
                 incNonFairLock: 4091598.938 ops/s

Iteration   5: 7495655.760 ops/s
                 getNonFairLock: 3377433.211 ops/s
                 incNonFairLock: 4118222.549 ops/s

Iteration   6: 7494151.549 ops/s
                 getNonFairLock: 3347001.962 ops/s
                 incNonFairLock: 4147149.587 ops/s

Iteration   7: 7675683.036 ops/s
                 getNonFairLock: 3491764.235 ops/s
                 incNonFairLock: 4183918.802 ops/s

Iteration   8: 7480615.370 ops/s
                 getNonFairLock: 3365735.222 ops/s
                 incNonFairLock: 4114880.148 ops/s

Iteration   9: 8474828.518 ops/s
                 getNonFairLock: 3756087.987 ops/s
                 incNonFairLock: 4718740.531 ops/s

Iteration  10: 7648749.012 ops/s
                 getNonFairLock: 3395067.426 ops/s
                 incNonFairLock: 4253681.586 ops/s



Result "getNonFairLock":
  11677225.684 ±(99.9%) 12575824.550 ops/s [Average]
  (min, avg, max) = (7466639.298, 11677225.684, 27868594.635), stdev = 8318129.294
  CI (99.9%): [≈ 0, 24253050.234] (assumes normal distribution)

Secondary result "getNonFairLock":
  4964240.724 ±(99.9%) 4837648.756 ops/s [Average]
  (min, avg, max) = (3347001.962, 4964240.724, 11497115.313), stdev = 3199805.124
  CI (99.9%): [126591.967, 9801889.480] (assumes normal distribution)

Secondary result "incNonFairLock":
  6712984.960 ±(99.9%) 7774382.775 ops/s [Average]
  (min, avg, max) = (4091598.938, 6712984.960, 17333952.349), stdev = 5142272.846
  CI (99.9%): [≈ 0, 14487367.735] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 912520.397 ops/s
# Warmup Iteration   2: 439134.757 ops/s
# Warmup Iteration   3: 444849.364 ops/s
# Warmup Iteration   4: 617435.507 ops/s
# Warmup Iteration   5: 805105.055 ops/s
Iteration   1: 367777.141 ops/s
                 getFairRWLock: 184739.693 ops/s
                 incFairRWLock: 183037.447 ops/s

Iteration   2: 481753.630 ops/s
                 getFairRWLock: 210551.469 ops/s
                 incFairRWLock: 271202.161 ops/s

Iteration   3: 635463.312 ops/s
                 getFairRWLock: 242230.907 ops/s
                 incFairRWLock: 393232.406 ops/s

Iteration   4: 372285.472 ops/s
                 getFairRWLock: 189887.900 ops/s
                 incFairRWLock: 182397.572 ops/s

Iteration   5: 399155.788 ops/s
                 getFairRWLock: 181207.506 ops/s
                 incFairRWLock: 217948.282 ops/s

Iteration   6: 480173.876 ops/s
                 getFairRWLock: 212715.121 ops/s
                 incFairRWLock: 267458.756 ops/s

Iteration   7: 500363.363 ops/s
                 getFairRWLock: 317028.197 ops/s
                 incFairRWLock: 183335.165 ops/s

Iteration   8: 614466.991 ops/s
                 getFairRWLock: 436650.319 ops/s
                 incFairRWLock: 177816.671 ops/s

Iteration   9: 470849.971 ops/s
                 getFairRWLock: 215657.351 ops/s
                 incFairRWLock: 255192.620 ops/s

Iteration  10: 381003.195 ops/s
                 getFairRWLock: 184493.770 ops/s
                 incFairRWLock: 196509.424 ops/s



Result "getFairRWLock":
  470329.274 ±(99.9%) 144616.808 ops/s [Average]
  (min, avg, max) = (367777.141, 470329.274, 635463.312), stdev = 95655.065
  CI (99.9%): [325712.465, 614946.082] (assumes normal distribution)

Secondary result "getFairRWLock":
  237516.223 ±(99.9%) 122258.741 ops/s [Average]
  (min, avg, max) = (181207.506, 237516.223, 436650.319), stdev = 80866.588
  CI (99.9%): [115257.482, 359774.965] (assumes normal distribution)

Secondary result "incFairRWLock":
  232813.050 ±(99.9%) 101968.112 ops/s [Average]
  (min, avg, max) = (177816.671, 232813.050, 393232.406), stdev = 67445.593
  CI (99.9%): [130844.938, 334781.163] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 8071881.892 ops/s
# Warmup Iteration   2: 23745232.270 ops/s
# Warmup Iteration   3: 10290396.594 ops/s
# Warmup Iteration   4: 9656585.697 ops/s
# Warmup Iteration   5: 7733680.983 ops/s
Iteration   1: 7705890.398 ops/s
                 getNonFairRWLock: 2686429.490 ops/s
                 incNonFairRWLock: 5019460.908 ops/s

Iteration   2: 12864913.527 ops/s
                 getNonFairRWLock: 4410435.388 ops/s
                 incNonFairRWLock: 8454478.139 ops/s

Iteration   3: 23391733.573 ops/s
                 getNonFairRWLock: 7734701.194 ops/s
                 incNonFairRWLock: 15657032.379 ops/s

Iteration   4: 7911748.127 ops/s
                 getNonFairRWLock: 2921936.944 ops/s
                 incNonFairRWLock: 4989811.183 ops/s

Iteration   5: 7728460.838 ops/s
                 getNonFairRWLock: 2752093.940 ops/s
                 incNonFairRWLock: 4976366.898 ops/s

Iteration   6: 13823899.040 ops/s
                 getNonFairRWLock: 4750004.659 ops/s
                 incNonFairRWLock: 9073894.382 ops/s

Iteration   7: 8766147.963 ops/s
                 getNonFairRWLock: 3022545.597 ops/s
                 incNonFairRWLock: 5743602.366 ops/s

Iteration   8: 10505344.857 ops/s
                 getNonFairRWLock: 3759940.637 ops/s
                 incNonFairRWLock: 6745404.219 ops/s

Iteration   9: 23613075.144 ops/s
                 getNonFairRWLock: 7691107.893 ops/s
                 incNonFairRWLock: 15921967.251 ops/s

Iteration  10: 8030033.586 ops/s
                 getNonFairRWLock: 2852709.188 ops/s
                 incNonFairRWLock: 5177324.398 ops/s



Result "getNonFairRWLock":
  12434124.705 ±(99.9%) 9410248.144 ops/s [Average]
  (min, avg, max) = (7705890.398, 12434124.705, 23613075.144), stdev = 6224296.501
  CI (99.9%): [3023876.562, 21844372.849] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  4258190.493 ±(99.9%) 2956225.114 ops/s [Average]
  (min, avg, max) = (2686429.490, 4258190.493, 7734701.194), stdev = 1955359.875
  CI (99.9%): [1301965.379, 7214415.607] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  8175934.212 ±(99.9%) 6456848.697 ops/s [Average]
  (min, avg, max) = (4976366.898, 8175934.212, 15921967.251), stdev = 4270805.630
  CI (99.9%): [1719085.515, 14632782.909] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 459908.385 ops/s
# Warmup Iteration   2: 432070.674 ops/s
# Warmup Iteration   3: 401356.352 ops/s
# Warmup Iteration   4: 410624.827 ops/s
# Warmup Iteration   5: 398867.522 ops/s
Iteration   1: 380858.787 ops/s
                 getFairSemaphore: 189946.534 ops/s
                 incFairSemaphore: 190912.254 ops/s

Iteration   2: 381935.661 ops/s
                 getFairSemaphore: 190148.265 ops/s
                 incFairSemaphore: 191787.396 ops/s

Iteration   3: 383184.957 ops/s
                 getFairSemaphore: 193439.281 ops/s
                 incFairSemaphore: 189745.676 ops/s

Iteration   4: 385690.581 ops/s
                 getFairSemaphore: 192308.751 ops/s
                 incFairSemaphore: 193381.830 ops/s

Iteration   5: 380933.332 ops/s
                 getFairSemaphore: 187207.252 ops/s
                 incFairSemaphore: 193726.080 ops/s

Iteration   6: 378172.006 ops/s
                 getFairSemaphore: 188203.286 ops/s
                 incFairSemaphore: 189968.720 ops/s

Iteration   7: 380116.765 ops/s
                 getFairSemaphore: 189741.539 ops/s
                 incFairSemaphore: 190375.227 ops/s

Iteration   8: 383918.351 ops/s
                 getFairSemaphore: 191385.987 ops/s
                 incFairSemaphore: 192532.364 ops/s

Iteration   9: 369501.588 ops/s
                 getFairSemaphore: 184471.237 ops/s
                 incFairSemaphore: 185030.351 ops/s

Iteration  10: 373587.433 ops/s
                 getFairSemaphore: 186322.536 ops/s
                 incFairSemaphore: 187264.897 ops/s



Result "getFairSemaphore":
  379789.946 ±(99.9%) 7432.012 ops/s [Average]
  (min, avg, max) = (369501.588, 379789.946, 385690.581), stdev = 4915.816
  CI (99.9%): [372357.934, 387221.958] (assumes normal distribution)

Secondary result "getFairSemaphore":
  189317.467 ±(99.9%) 4205.261 ops/s [Average]
  (min, avg, max) = (184471.237, 189317.467, 193439.281), stdev = 2781.519
  CI (99.9%): [185112.206, 193522.727] (assumes normal distribution)

Secondary result "incFairSemaphore":
  190472.479 ±(99.9%) 4091.417 ops/s [Average]
  (min, avg, max) = (185030.351, 190472.479, 193726.080), stdev = 2706.219
  CI (99.9%): [186381.062, 194563.897] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:31
# Fork: 1 of 1
# Warmup Iteration   1: 8291841.242 ops/s
# Warmup Iteration   2: 20798991.903 ops/s
# Warmup Iteration   3: 14323783.789 ops/s
# Warmup Iteration   4: 6452730.921 ops/s
# Warmup Iteration   5: 6534554.131 ops/s
Iteration   1: 6890014.393 ops/s
                 getNonFairSemaphore: 3742180.010 ops/s
                 incNonFairSemaphore: 3147834.383 ops/s

Iteration   2: 21694958.278 ops/s
                 getNonFairSemaphore: 10082203.486 ops/s
                 incNonFairSemaphore: 11612754.791 ops/s

Iteration   3: 6529204.020 ops/s
                 getNonFairSemaphore: 3263695.648 ops/s
                 incNonFairSemaphore: 3265508.372 ops/s

Iteration   4: 6571575.996 ops/s
                 getNonFairSemaphore: 3516964.793 ops/s
                 incNonFairSemaphore: 3054611.203 ops/s

Iteration   5: 6640447.918 ops/s
                 getNonFairSemaphore: 3334505.011 ops/s
                 incNonFairSemaphore: 3305942.907 ops/s

Iteration   6: 21906358.914 ops/s
                 getNonFairSemaphore: 10151450.732 ops/s
                 incNonFairSemaphore: 11754908.182 ops/s

Iteration   7: 6649807.724 ops/s
                 getNonFairSemaphore: 3269407.148 ops/s
                 incNonFairSemaphore: 3380400.575 ops/s

Iteration   8: 6635556.707 ops/s
                 getNonFairSemaphore: 3493660.538 ops/s
                 incNonFairSemaphore: 3141896.170 ops/s

Iteration   9: 6644220.971 ops/s
                 getNonFairSemaphore: 3498425.235 ops/s
                 incNonFairSemaphore: 3145795.736 ops/s

Iteration  10: 6541251.799 ops/s
                 getNonFairSemaphore: 3245123.582 ops/s
                 incNonFairSemaphore: 3296128.217 ops/s



Result "getNonFairSemaphore":
  9670339.672 ±(99.9%) 9667132.507 ops/s [Average]
  (min, avg, max) = (6529204.020, 9670339.672, 21906358.914), stdev = 6394209.602
  CI (99.9%): [3207.166, 19337472.179] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  4759761.618 ±(99.9%) 4274917.484 ops/s [Average]
  (min, avg, max) = (3245123.582, 4759761.618, 10151450.732), stdev = 2827593.230
  CI (99.9%): [484844.134, 9034679.102] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  4910578.054 ±(99.9%) 5399294.700 ops/s [Average]
  (min, avg, max) = (3054611.203, 4910578.054, 11754908.182), stdev = 3571299.141
  CI (99.9%): [≈ 0, 10309872.753] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:16
# Fork: 1 of 1
# Warmup Iteration   1: 10955009.912 ops/s
# Warmup Iteration   2: 9926847.600 ops/s
# Warmup Iteration   3: 9506488.041 ops/s
# Warmup Iteration   4: 9373343.928 ops/s
# Warmup Iteration   5: 9167203.144 ops/s
Iteration   1: 9659286.657 ops/s
                 getStamped: 897829.777 ops/s
                 incStamped: 8761456.881 ops/s

Iteration   2: 9255899.134 ops/s
                 getStamped: 2129560.588 ops/s
                 incStamped: 7126338.546 ops/s

Iteration   3: 9424915.580 ops/s
                 getStamped: 1060968.564 ops/s
                 incStamped: 8363947.016 ops/s

Iteration   4: 9949990.435 ops/s
                 getStamped: 3187138.751 ops/s
                 incStamped: 6762851.684 ops/s

Iteration   5: 20610169.710 ops/s
                 getStamped: 9046356.469 ops/s
                 incStamped: 11563813.241 ops/s

Iteration   6: 25773691.209 ops/s
                 getStamped: 12049621.288 ops/s
                 incStamped: 13724069.921 ops/s

Iteration   7: 11759710.248 ops/s
                 getStamped: 4268612.083 ops/s
                 incStamped: 7491098.165 ops/s

Iteration   8: 9228825.935 ops/s
                 getStamped: 2567899.269 ops/s
                 incStamped: 6660926.666 ops/s

Iteration   9: 37978285.420 ops/s
                 getStamped: 18901742.054 ops/s
                 incStamped: 19076543.366 ops/s

Iteration  10: 9627519.302 ops/s
                 getStamped: 2819991.177 ops/s
                 incStamped: 6807528.125 ops/s



Result "getStamped":
  15326829.363 ±(99.9%) 14823839.540 ops/s [Average]
  (min, avg, max) = (9228825.935, 15326829.363, 37978285.420), stdev = 9805052.021
  CI (99.9%): [502989.824, 30150668.903] (assumes normal distribution)

Secondary result "getStamped":
  5692972.002 ±(99.9%) 8867252.249 ops/s [Average]
  (min, avg, max) = (897829.777, 5692972.002, 18901742.054), stdev = 5865138.337
  CI (99.9%): [≈ 0, 14560224.251] (assumes normal distribution)

Secondary result "incStamped":
  9633857.361 ±(99.9%) 6129620.467 ops/s [Average]
  (min, avg, max) = (6660926.666, 9633857.361, 19076543.366), stdev = 4054364.417
  CI (99.9%): [3504236.894, 15763477.828] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 16455557.318 ops/s
# Warmup Iteration   2: 56234819.469 ops/s
# Warmup Iteration   3: 45176256.178 ops/s
# Warmup Iteration   4: 12877057.055 ops/s
# Warmup Iteration   5: 12787716.985 ops/s
Iteration   1: 12043273.918 ops/s
                 getOptimisticStamped: 2340143.913 ops/s
                 incOptimisticStamped: 9703130.005 ops/s

Iteration   2: 12042361.133 ops/s
                 getOptimisticStamped: 2141852.529 ops/s
                 incOptimisticStamped: 9900508.604 ops/s

Iteration   3: 55931447.445 ops/s
                 getOptimisticStamped: 22448072.376 ops/s
                 incOptimisticStamped: 33483375.069 ops/s

Iteration   4: 14149176.586 ops/s
                 getOptimisticStamped: 5294429.768 ops/s
                 incOptimisticStamped: 8854746.818 ops/s

Iteration   5: 14872754.085 ops/s
                 getOptimisticStamped: 6620042.124 ops/s
                 incOptimisticStamped: 8252711.961 ops/s

Iteration   6: 14917122.390 ops/s
                 getOptimisticStamped: 6561655.748 ops/s
                 incOptimisticStamped: 8355466.642 ops/s

Iteration   7: 14033333.625 ops/s
                 getOptimisticStamped: 5709589.151 ops/s
                 incOptimisticStamped: 8323744.474 ops/s

Iteration   8: 14810783.927 ops/s
                 getOptimisticStamped: 6358367.615 ops/s
                 incOptimisticStamped: 8452416.312 ops/s

Iteration   9: 14275293.621 ops/s
                 getOptimisticStamped: 5923015.054 ops/s
                 incOptimisticStamped: 8352278.567 ops/s

Iteration  10: 28053954.448 ops/s
                 getOptimisticStamped: 12391491.157 ops/s
                 incOptimisticStamped: 15662463.291 ops/s



Result "getOptimisticStamped":
  19512950.118 ±(99.9%) 20544047.331 ops/s [Average]
  (min, avg, max) = (12042361.133, 19512950.118, 55931447.445), stdev = 13588615.302
  CI (99.9%): [≈ 0, 40056997.449] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  7578865.944 ±(99.9%) 8960698.701 ops/s [Average]
  (min, avg, max) = (2141852.529, 7578865.944, 22448072.376), stdev = 5926947.380
  CI (99.9%): [≈ 0, 16539564.645] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  11934084.174 ±(99.9%) 11938595.477 ops/s [Average]
  (min, avg, max) = (8252711.961, 11934084.174, 33483375.069), stdev = 7896641.717
  CI (99.9%): [≈ 0, 23872679.651] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:45
# Fork: 1 of 1
# Warmup Iteration   1: 15880746.196 ops/s
# Warmup Iteration   2: 40137354.272 ops/s
# Warmup Iteration   3: 15298266.676 ops/s
# Warmup Iteration   4: 15421291.826 ops/s
# Warmup Iteration   5: 15356196.607 ops/s
Iteration   1: 15391776.730 ops/s
                 getSynchronized: 7070179.092 ops/s
                 incSynchronized: 8321597.639 ops/s

Iteration   2: 15301349.052 ops/s
                 getSynchronized: 7149528.336 ops/s
                 incSynchronized: 8151820.716 ops/s

Iteration   3: 15471840.807 ops/s
                 getSynchronized: 7462354.234 ops/s
                 incSynchronized: 8009486.574 ops/s

Iteration   4: 38009120.160 ops/s
                 getSynchronized: 14067557.600 ops/s
                 incSynchronized: 23941562.560 ops/s

Iteration   5: 15709304.798 ops/s
                 getSynchronized: 6948694.424 ops/s
                 incSynchronized: 8760610.374 ops/s

Iteration   6: 15627559.675 ops/s
                 getSynchronized: 6179174.787 ops/s
                 incSynchronized: 9448384.888 ops/s

Iteration   7: 15747985.499 ops/s
                 getSynchronized: 6767039.853 ops/s
                 incSynchronized: 8980945.647 ops/s

Iteration   8: 37631186.785 ops/s
                 getSynchronized: 13191768.246 ops/s
                 incSynchronized: 24439418.539 ops/s

Iteration   9: 15483016.024 ops/s
                 getSynchronized: 6289792.832 ops/s
                 incSynchronized: 9193223.192 ops/s

Iteration  10: 15738868.447 ops/s
                 getSynchronized: 7081212.285 ops/s
                 incSynchronized: 8657656.162 ops/s



Result "getSynchronized":
  20011200.798 ±(99.9%) 14192963.774 ops/s [Average]
  (min, avg, max) = (15301349.052, 20011200.798, 38009120.160), stdev = 9387766.764
  CI (99.9%): [5818237.024, 34204164.572] (assumes normal distribution)

Secondary result "getSynchronized":
  8220730.169 ±(99.9%) 4360550.035 ops/s [Average]
  (min, avg, max) = (6179174.787, 8220730.169, 14067557.600), stdev = 2884233.860
  CI (99.9%): [3860180.134, 12581280.204] (assumes normal distribution)

Secondary result "incSynchronized":
  11790470.629 ±(99.9%) 9905360.200 ops/s [Average]
  (min, avg, max) = (8009486.574, 11790470.629, 24439418.539), stdev = 6551782.471
  CI (99.9%): [1885110.429, 21695830.829] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 31202751.836 ops/s
# Warmup Iteration   2: 15946950.864 ops/s
# Warmup Iteration   3: 40514215.254 ops/s
# Warmup Iteration   4: 17488271.935 ops/s
# Warmup Iteration   5: 17357252.536 ops/s
Iteration   1: 17530864.130 ops/s
                 getSynchronizedMethod: 8212783.965 ops/s
                 incSynchronizedMethod: 9318080.166 ops/s

Iteration   2: 17550117.049 ops/s
                 getSynchronizedMethod: 8183525.164 ops/s
                 incSynchronizedMethod: 9366591.885 ops/s

Iteration   3: 17409228.445 ops/s
                 getSynchronizedMethod: 8115447.745 ops/s
                 incSynchronizedMethod: 9293780.700 ops/s

Iteration   4: 40873484.747 ops/s
                 getSynchronizedMethod: 14604183.881 ops/s
                 incSynchronizedMethod: 26269300.866 ops/s

Iteration   5: 17522662.831 ops/s
                 getSynchronizedMethod: 7683568.840 ops/s
                 incSynchronizedMethod: 9839093.991 ops/s

Iteration   6: 40917346.587 ops/s
                 getSynchronizedMethod: 13979547.171 ops/s
                 incSynchronizedMethod: 26937799.417 ops/s

Iteration   7: 17312449.067 ops/s
                 getSynchronizedMethod: 7330828.797 ops/s
                 incSynchronizedMethod: 9981620.270 ops/s

Iteration   8: 40716865.371 ops/s
                 getSynchronizedMethod: 13929436.739 ops/s
                 incSynchronizedMethod: 26787428.632 ops/s

Iteration   9: 22173263.815 ops/s
                 getSynchronizedMethod: 9189512.035 ops/s
                 incSynchronizedMethod: 12983751.780 ops/s

Iteration  10: 17243487.402 ops/s
                 getSynchronizedMethod: 7259356.966 ops/s
                 incSynchronizedMethod: 9984130.436 ops/s



Result "getSynchronizedMethod":
  24924976.944 ±(99.9%) 16747337.359 ops/s [Average]
  (min, avg, max) = (17243487.402, 24924976.944, 40917346.587), stdev = 11077326.733
  CI (99.9%): [8177639.586, 41672314.303] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  9848819.130 ±(99.9%) 4589864.876 ops/s [Average]
  (min, avg, max) = (7259356.966, 9848819.130, 14604183.881), stdev = 3035911.429
  CI (99.9%): [5258954.254, 14438684.006] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  15076157.814 ±(99.9%) 12199577.882 ops/s [Average]
  (min, avg, max) = (9293780.700, 15076157.814, 26937799.417), stdev = 8069265.419
  CI (99.9%): [2876579.933, 27275735.696] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 103618770.822 ops/s
# Warmup Iteration   2: 114693056.204 ops/s
# Warmup Iteration   3: 264634494.069 ops/s
# Warmup Iteration   4: 119872088.740 ops/s
# Warmup Iteration   5: 229134095.577 ops/s
Iteration   1: 287278341.641 ops/s
                 getVolatile: 160109394.511 ops/s
                 incVolatile: 127168947.130 ops/s

Iteration   2: 106103621.328 ops/s
                 getVolatile: 46687045.256 ops/s
                 incVolatile: 59416576.072 ops/s

Iteration   3: 288059263.511 ops/s
                 getVolatile: 161268548.032 ops/s
                 incVolatile: 126790715.480 ops/s

Iteration   4: 118427699.505 ops/s
                 getVolatile: 66799909.604 ops/s
                 incVolatile: 51627789.901 ops/s

Iteration   5: 291332741.432 ops/s
                 getVolatile: 164186006.399 ops/s
                 incVolatile: 127146735.033 ops/s

Iteration   6: 295768635.844 ops/s
                 getVolatile: 168857781.352 ops/s
                 incVolatile: 126910854.491 ops/s

Iteration   7: 117716839.239 ops/s
                 getVolatile: 64749151.226 ops/s
                 incVolatile: 52967688.013 ops/s

Iteration   8: 108797456.566 ops/s
                 getVolatile: 55430058.669 ops/s
                 incVolatile: 53367397.897 ops/s

Iteration   9: 106882062.730 ops/s
                 getVolatile: 54359631.202 ops/s
                 incVolatile: 52522431.528 ops/s

Iteration  10: 108661617.120 ops/s
                 getVolatile: 55614752.583 ops/s
                 incVolatile: 53046864.536 ops/s



Result "getVolatile":
  182902827.892 ±(99.9%) 140325873.911 ops/s [Average]
  (min, avg, max) = (106103621.328, 182902827.892, 295768635.844), stdev = 92816877.162
  CI (99.9%): [42576953.981, 323228701.802] (assumes normal distribution)

Secondary result "getVolatile":
  99806227.883 ±(99.9%) 83501966.709 ops/s [Average]
  (min, avg, max) = (46687045.256, 99806227.883, 168857781.352), stdev = 55231380.862
  CI (99.9%): [16304261.174, 183308194.592] (assumes normal distribution)

Secondary result "incVolatile":
  83096600.008 ±(99.9%) 57220295.065 ops/s [Average]
  (min, avg, max) = (51627789.901, 83096600.008, 127168947.130), stdev = 37847682.329
  CI (99.9%): [25876304.943, 140316895.073] (assumes normal distribution)


# Run complete. Total time: 00:03:19

Benchmark                                                   Mode  Cnt          Score           Error  Units
CounterBenchmark.Adder                                     thrpt   10  137812349.883 ±  83350679.099  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   90164697.920 ±  45751205.427  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   47647651.963 ±  38017383.138  ops/s
CounterBenchmark.Atomic                                    thrpt   10  144987619.426 ± 103830527.388  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   75353427.348 ±  26554472.149  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   69634192.078 ±  77570386.474  ops/s
CounterBenchmark.LockFair                                  thrpt   10     385348.345 ±     19882.166  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     191632.875 ±      9211.756  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     193715.470 ±     11224.659  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   11677225.684 ±  12575824.550  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10    4964240.724 ±   4837648.756  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10    6712984.960 ±   7774382.775  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     470329.274 ±    144616.808  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     237516.223 ±    122258.741  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     232813.050 ±    101968.112  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10   12434124.705 ±   9410248.144  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    4258190.493 ±   2956225.114  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10    8175934.212 ±   6456848.697  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     379789.946 ±      7432.012  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     189317.467 ±      4205.261  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     190472.479 ±      4091.417  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10    9670339.672 ±   9667132.507  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10    4759761.618 ±   4274917.484  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10    4910578.054 ±   5399294.700  ops/s
CounterBenchmark.Stamped                                   thrpt   10   15326829.363 ±  14823839.540  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10    5692972.002 ±   8867252.249  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10    9633857.361 ±   6129620.467  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10   19512950.118 ±  20544047.331  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10    7578865.944 ±   8960698.701  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   11934084.174 ±  11938595.477  ops/s
CounterBenchmark.Synchronized                              thrpt   10   20011200.798 ±  14192963.774  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10    8220730.169 ±   4360550.035  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   11790470.629 ±   9905360.200  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   24924976.944 ±  16747337.359  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10    9848819.130 ±   4589864.876  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   15076157.814 ±  12199577.882  ops/s
CounterBenchmark.Volatile                                  thrpt   10  182902827.892 ± 140325873.911  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10   99806227.883 ±  83501966.709  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   83096600.008 ±  57220295.065  ops/s

Benchmark result is saved to ./counters/results/results-1-1.csv
Running benchmarks with thread group distribution: 2,2
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 129076270.560 ops/s
# Warmup Iteration   2: 132061151.350 ops/s
# Warmup Iteration   3: 92866297.050 ops/s
# Warmup Iteration   4: 134285754.949 ops/s
# Warmup Iteration   5: 101699658.014 ops/s
Iteration   1: 134788160.312 ops/s
                 getAdder: 52752426.613 ops/s
                 incAdder: 82035733.699 ops/s

Iteration   2: 136123594.919 ops/s
                 getAdder: 49112130.785 ops/s
                 incAdder: 87011464.134 ops/s

Iteration   3: 131879205.649 ops/s
                 getAdder: 56203388.643 ops/s
                 incAdder: 75675817.006 ops/s

Iteration   4: 131633383.968 ops/s
                 getAdder: 56077810.129 ops/s
                 incAdder: 75555573.840 ops/s

Iteration   5: 133431514.319 ops/s
                 getAdder: 52712644.560 ops/s
                 incAdder: 80718869.759 ops/s

Iteration   6: 132164398.151 ops/s
                 getAdder: 55778195.925 ops/s
                 incAdder: 76386202.226 ops/s

Iteration   7: 132522604.374 ops/s
                 getAdder: 55329538.896 ops/s
                 incAdder: 77193065.478 ops/s

Iteration   8: 89946204.406 ops/s
                 getAdder: 40316154.435 ops/s
                 incAdder: 49630049.971 ops/s

Iteration   9: 89755626.563 ops/s
                 getAdder: 40429917.059 ops/s
                 incAdder: 49325709.504 ops/s

Iteration  10: 131981171.317 ops/s
                 getAdder: 56301405.782 ops/s
                 incAdder: 75679765.536 ops/s



Result "incAdder":
  124422586.398 ±(99.9%) 27631181.443 ops/s [Average]
  (min, avg, max) = (89755626.563, 124422586.398, 136123594.919), stdev = 18276315.710
  CI (99.9%): [96791404.955, 152053767.841] (assumes normal distribution)

Secondary result "getAdder":
  51501361.283 ±(99.9%) 9501423.506 ops/s [Average]
  (min, avg, max) = (40316154.435, 51501361.283, 56301405.782), stdev = 6284603.358
  CI (99.9%): [41999937.776, 61002784.789] (assumes normal distribution)

Secondary result "incAdder":
  72921225.115 ±(99.9%) 19479123.250 ops/s [Average]
  (min, avg, max) = (49325709.504, 72921225.115, 87011464.134), stdev = 12884233.958
  CI (99.9%): [53442101.866, 92400348.365] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 72918070.551 ops/s
# Warmup Iteration   2: 73180759.703 ops/s
# Warmup Iteration   3: 114181465.860 ops/s
# Warmup Iteration   4: 85149027.869 ops/s
# Warmup Iteration   5: 109508967.178 ops/s
Iteration   1: 86239117.844 ops/s
                 getAtomic: 45978708.065 ops/s
                 incAtomic: 40260409.779 ops/s

Iteration   2: 82074635.095 ops/s
                 getAtomic: 42508511.456 ops/s
                 incAtomic: 39566123.639 ops/s

Iteration   3: 82735891.405 ops/s
                 getAtomic: 42679012.468 ops/s
                 incAtomic: 40056878.937 ops/s

Iteration   4: 81927146.896 ops/s
                 getAtomic: 43003316.305 ops/s
                 incAtomic: 38923830.591 ops/s

Iteration   5: 82665639.489 ops/s
                 getAtomic: 43479045.955 ops/s
                 incAtomic: 39186593.534 ops/s

Iteration   6: 80380742.507 ops/s
                 getAtomic: 41329240.745 ops/s
                 incAtomic: 39051501.761 ops/s

Iteration   7: 80750710.290 ops/s
                 getAtomic: 41619407.531 ops/s
                 incAtomic: 39131302.759 ops/s

Iteration   8: 108879116.665 ops/s
                 getAtomic: 63929796.923 ops/s
                 incAtomic: 44949319.741 ops/s

Iteration   9: 81169458.876 ops/s
                 getAtomic: 42121602.348 ops/s
                 incAtomic: 39047856.529 ops/s

Iteration  10: 81783264.190 ops/s
                 getAtomic: 42645012.268 ops/s
                 incAtomic: 39138251.922 ops/s



Result "getAtomic":
  84860572.326 ±(99.9%) 12991257.235 ops/s [Average]
  (min, avg, max) = (80380742.507, 84860572.326, 108879116.665), stdev = 8592912.293
  CI (99.9%): [71869315.091, 97851829.561] (assumes normal distribution)

Secondary result "getAtomic":
  44929365.407 ±(99.9%) 10277093.418 ops/s [Average]
  (min, avg, max) = (41329240.745, 44929365.407, 63929796.923), stdev = 6797660.979
  CI (99.9%): [34652271.988, 55206458.825] (assumes normal distribution)

Secondary result "incAtomic":
  39931206.919 ±(99.9%) 2752474.512 ops/s [Average]
  (min, avg, max) = (38923830.591, 39931206.919, 44949319.741), stdev = 1820591.467
  CI (99.9%): [37178732.407, 42683681.431] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 360800.348 ops/s
# Warmup Iteration   2: 352566.974 ops/s
# Warmup Iteration   3: 350990.285 ops/s
# Warmup Iteration   4: 353425.850 ops/s
# Warmup Iteration   5: 356633.096 ops/s
Iteration   1: 351224.997 ops/s
                 getFairLock: 175613.370 ops/s
                 incFairLock: 175611.626 ops/s

Iteration   2: 360854.450 ops/s
                 getFairLock: 180426.701 ops/s
                 incFairLock: 180427.749 ops/s

Iteration   3: 357207.576 ops/s
                 getFairLock: 178604.852 ops/s
                 incFairLock: 178602.724 ops/s

Iteration   4: 358183.560 ops/s
                 getFairLock: 179079.343 ops/s
                 incFairLock: 179104.218 ops/s

Iteration   5: 357860.125 ops/s
                 getFairLock: 178930.796 ops/s
                 incFairLock: 178929.329 ops/s

Iteration   6: 354893.314 ops/s
                 getFairLock: 177445.788 ops/s
                 incFairLock: 177447.527 ops/s

Iteration   7: 357263.891 ops/s
                 getFairLock: 178631.670 ops/s
                 incFairLock: 178632.221 ops/s

Iteration   8: 359609.352 ops/s
                 getFairLock: 179805.068 ops/s
                 incFairLock: 179804.284 ops/s

Iteration   9: 351131.919 ops/s
                 getFairLock: 175565.709 ops/s
                 incFairLock: 175566.211 ops/s

Iteration  10: 357534.030 ops/s
                 getFairLock: 178766.830 ops/s
                 incFairLock: 178767.200 ops/s



Result "getFairLock":
  356576.321 ±(99.9%) 4902.402 ops/s [Average]
  (min, avg, max) = (351131.919, 356576.321, 360854.450), stdev = 3242.636
  CI (99.9%): [351673.919, 361478.724] (assumes normal distribution)

Secondary result "getFairLock":
  178287.013 ±(99.9%) 2450.088 ops/s [Average]
  (min, avg, max) = (175565.709, 178287.013, 180426.701), stdev = 1620.581
  CI (99.9%): [175836.925, 180737.100] (assumes normal distribution)

Secondary result "incFairLock":
  178289.309 ±(99.9%) 2452.329 ops/s [Average]
  (min, avg, max) = (175566.211, 178289.309, 180427.749), stdev = 1622.064
  CI (99.9%): [175836.980, 180741.638] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 30336163.773 ops/s
# Warmup Iteration   2: 25731040.617 ops/s
# Warmup Iteration   3: 35594533.209 ops/s
# Warmup Iteration   4: 35351289.961 ops/s
# Warmup Iteration   5: 35129967.219 ops/s
Iteration   1: 35399457.747 ops/s
                 getNonFairLock: 16089340.956 ops/s
                 incNonFairLock: 19310116.791 ops/s

Iteration   2: 35390922.748 ops/s
                 getNonFairLock: 15004121.384 ops/s
                 incNonFairLock: 20386801.363 ops/s

Iteration   3: 35297521.695 ops/s
                 getNonFairLock: 14387059.974 ops/s
                 incNonFairLock: 20910461.721 ops/s

Iteration   4: 35625139.250 ops/s
                 getNonFairLock: 14525829.387 ops/s
                 incNonFairLock: 21099309.864 ops/s

Iteration   5: 37300313.989 ops/s
                 getNonFairLock: 15525515.486 ops/s
                 incNonFairLock: 21774798.503 ops/s

Iteration   6: 35521133.929 ops/s
                 getNonFairLock: 14672446.476 ops/s
                 incNonFairLock: 20848687.453 ops/s

Iteration   7: 37195340.194 ops/s
                 getNonFairLock: 15968028.293 ops/s
                 incNonFairLock: 21227311.901 ops/s

Iteration   8: 35346947.498 ops/s
                 getNonFairLock: 14181077.097 ops/s
                 incNonFairLock: 21165870.402 ops/s

Iteration   9: 34566321.626 ops/s
                 getNonFairLock: 13995968.355 ops/s
                 incNonFairLock: 20570353.271 ops/s

Iteration  10: 34436002.688 ops/s
                 getNonFairLock: 14299432.202 ops/s
                 incNonFairLock: 20136570.485 ops/s



Result "getNonFairLock":
  35607910.136 ±(99.9%) 1434737.984 ops/s [Average]
  (min, avg, max) = (34436002.688, 35607910.136, 37300313.989), stdev = 948990.343
  CI (99.9%): [34173172.152, 37042648.120] (assumes normal distribution)

Secondary result "getNonFairLock":
  14864881.961 ±(99.9%) 1137492.344 ops/s [Average]
  (min, avg, max) = (13995968.355, 14864881.961, 16089340.956), stdev = 752380.756
  CI (99.9%): [13727389.617, 16002374.305] (assumes normal distribution)

Secondary result "incNonFairLock":
  20743028.175 ±(99.9%) 1035466.022 ops/s [Average]
  (min, avg, max) = (19310116.791, 20743028.175, 21774798.503), stdev = 684896.661
  CI (99.9%): [19707562.154, 21778494.197] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 374716.786 ops/s
# Warmup Iteration   2: 342887.620 ops/s
# Warmup Iteration   3: 347294.572 ops/s
# Warmup Iteration   4: 351360.087 ops/s
# Warmup Iteration   5: 350290.573 ops/s
Iteration   1: 359079.134 ops/s
                 getFairRWLock: 179536.892 ops/s
                 incFairRWLock: 179542.242 ops/s

Iteration   2: 353191.920 ops/s
                 getFairRWLock: 176602.247 ops/s
                 incFairRWLock: 176589.672 ops/s

Iteration   3: 351008.508 ops/s
                 getFairRWLock: 175501.630 ops/s
                 incFairRWLock: 175506.879 ops/s

Iteration   4: 351572.025 ops/s
                 getFairRWLock: 175785.762 ops/s
                 incFairRWLock: 175786.263 ops/s

Iteration   5: 953396.245 ops/s
                 getFairRWLock: 274050.312 ops/s
                 incFairRWLock: 679345.933 ops/s

Iteration   6: 352798.681 ops/s
                 getFairRWLock: 176398.951 ops/s
                 incFairRWLock: 176399.730 ops/s

Iteration   7: 355424.934 ops/s
                 getFairRWLock: 177711.208 ops/s
                 incFairRWLock: 177713.726 ops/s

Iteration   8: 354861.673 ops/s
                 getFairRWLock: 177430.664 ops/s
                 incFairRWLock: 177431.009 ops/s

Iteration   9: 346188.059 ops/s
                 getFairRWLock: 173085.059 ops/s
                 incFairRWLock: 173103.000 ops/s

Iteration  10: 356752.242 ops/s
                 getFairRWLock: 178392.064 ops/s
                 incFairRWLock: 178360.178 ops/s



Result "getFairRWLock":
  413427.342 ±(99.9%) 286887.458 ops/s [Average]
  (min, avg, max) = (346188.059, 413427.342, 953396.245), stdev = 189758.291
  CI (99.9%): [126539.884, 700314.801] (assumes normal distribution)

Secondary result "getFairRWLock":
  186449.479 ±(99.9%) 46610.744 ops/s [Average]
  (min, avg, max) = (173085.059, 186449.479, 274050.312), stdev = 30830.121
  CI (99.9%): [139838.735, 233060.223] (assumes normal distribution)

Secondary result "incFairRWLock":
  226977.863 ±(99.9%) 240318.211 ops/s [Average]
  (min, avg, max) = (173103.000, 226977.863, 679345.933), stdev = 158955.617
  CI (99.9%): [≈ 0, 467296.074] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 24892817.550 ops/s
# Warmup Iteration   2: 21994909.822 ops/s
# Warmup Iteration   3: 23287471.202 ops/s
# Warmup Iteration   4: 23532775.855 ops/s
# Warmup Iteration   5: 23426884.905 ops/s
Iteration   1: 23128227.953 ops/s
                 getNonFairRWLock: 7093056.628 ops/s
                 incNonFairRWLock: 16035171.325 ops/s

Iteration   2: 23124815.755 ops/s
                 getNonFairRWLock: 6758457.636 ops/s
                 incNonFairRWLock: 16366358.119 ops/s

Iteration   3: 22405018.420 ops/s
                 getNonFairRWLock: 6573220.538 ops/s
                 incNonFairRWLock: 15831797.882 ops/s

Iteration   4: 22783505.223 ops/s
                 getNonFairRWLock: 7021700.605 ops/s
                 incNonFairRWLock: 15761804.617 ops/s

Iteration   5: 22941424.275 ops/s
                 getNonFairRWLock: 6955451.127 ops/s
                 incNonFairRWLock: 15985973.148 ops/s

Iteration   6: 22782908.609 ops/s
                 getNonFairRWLock: 7028121.569 ops/s
                 incNonFairRWLock: 15754787.040 ops/s

Iteration   7: 23610021.127 ops/s
                 getNonFairRWLock: 7266076.255 ops/s
                 incNonFairRWLock: 16343944.872 ops/s

Iteration   8: 23389613.526 ops/s
                 getNonFairRWLock: 7601928.680 ops/s
                 incNonFairRWLock: 15787684.846 ops/s

Iteration   9: 22843145.727 ops/s
                 getNonFairRWLock: 7391564.288 ops/s
                 incNonFairRWLock: 15451581.439 ops/s

Iteration  10: 22921212.093 ops/s
                 getNonFairRWLock: 6777124.105 ops/s
                 incNonFairRWLock: 16144087.988 ops/s



Result "getNonFairRWLock":
  22992989.271 ±(99.9%) 513363.562 ops/s [Average]
  (min, avg, max) = (22405018.420, 22992989.271, 23610021.127), stdev = 339558.211
  CI (99.9%): [22479625.709, 23506352.833] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  7046670.143 ±(99.9%) 469168.416 ops/s [Average]
  (min, avg, max) = (6573220.538, 7046670.143, 7601928.680), stdev = 310325.858
  CI (99.9%): [6577501.727, 7515838.559] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  15946319.128 ±(99.9%) 432605.563 ops/s [Average]
  (min, avg, max) = (15451581.439, 15946319.128, 16366358.119), stdev = 286141.795
  CI (99.9%): [15513713.565, 16378924.691] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 345170.952 ops/s
# Warmup Iteration   2: 339902.875 ops/s
# Warmup Iteration   3: 349764.761 ops/s
# Warmup Iteration   4: 351549.590 ops/s
# Warmup Iteration   5: 349156.365 ops/s
Iteration   1: 353062.929 ops/s
                 getFairSemaphore: 176537.298 ops/s
                 incFairSemaphore: 176525.632 ops/s

Iteration   2: 354001.742 ops/s
                 getFairSemaphore: 177269.951 ops/s
                 incFairSemaphore: 176731.791 ops/s

Iteration   3: 355593.163 ops/s
                 getFairSemaphore: 177793.119 ops/s
                 incFairSemaphore: 177800.044 ops/s

Iteration   4: 342166.883 ops/s
                 getFairSemaphore: 171083.250 ops/s
                 incFairSemaphore: 171083.632 ops/s

Iteration   5: 347689.594 ops/s
                 getFairSemaphore: 173844.128 ops/s
                 incFairSemaphore: 173845.466 ops/s

Iteration   6: 351830.981 ops/s
                 getFairSemaphore: 175912.378 ops/s
                 incFairSemaphore: 175918.603 ops/s

Iteration   7: 354584.618 ops/s
                 getFairSemaphore: 177291.533 ops/s
                 incFairSemaphore: 177293.085 ops/s

Iteration   8: 351797.509 ops/s
                 getFairSemaphore: 175898.274 ops/s
                 incFairSemaphore: 175899.235 ops/s

Iteration   9: 354028.405 ops/s
                 getFairSemaphore: 177009.667 ops/s
                 incFairSemaphore: 177018.738 ops/s

Iteration  10: 349805.679 ops/s
                 getFairSemaphore: 174902.569 ops/s
                 incFairSemaphore: 174903.110 ops/s



Result "getFairSemaphore":
  351456.150 ±(99.9%) 6090.093 ops/s [Average]
  (min, avg, max) = (342166.883, 351456.150, 355593.163), stdev = 4028.220
  CI (99.9%): [345366.057, 357546.243] (assumes normal distribution)

Secondary result "getFairSemaphore":
  175754.217 ±(99.9%) 3075.544 ops/s [Average]
  (min, avg, max) = (171083.250, 175754.217, 177793.119), stdev = 2034.282
  CI (99.9%): [172678.673, 178829.760] (assumes normal distribution)

Secondary result "incFairSemaphore":
  175701.934 ±(99.9%) 3019.767 ops/s [Average]
  (min, avg, max) = (171083.632, 175701.934, 177800.044), stdev = 1997.389
  CI (99.9%): [172682.167, 178721.701] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 29531633.980 ops/s
# Warmup Iteration   2: 29665515.211 ops/s
# Warmup Iteration   3: 32062151.235 ops/s
# Warmup Iteration   4: 33806008.973 ops/s
# Warmup Iteration   5: 34865098.249 ops/s
Iteration   1: 29789020.704 ops/s
                 getNonFairSemaphore: 14825052.881 ops/s
                 incNonFairSemaphore: 14963967.823 ops/s

Iteration   2: 30068228.546 ops/s
                 getNonFairSemaphore: 15982342.186 ops/s
                 incNonFairSemaphore: 14085886.360 ops/s

Iteration   3: 29114836.875 ops/s
                 getNonFairSemaphore: 14788619.932 ops/s
                 incNonFairSemaphore: 14326216.944 ops/s

Iteration   4: 29608083.667 ops/s
                 getNonFairSemaphore: 13752651.594 ops/s
                 incNonFairSemaphore: 15855432.073 ops/s

Iteration   5: 32920404.755 ops/s
                 getNonFairSemaphore: 16777999.432 ops/s
                 incNonFairSemaphore: 16142405.323 ops/s

Iteration   6: 29738293.662 ops/s
                 getNonFairSemaphore: 14302286.343 ops/s
                 incNonFairSemaphore: 15436007.319 ops/s

Iteration   7: 29590469.960 ops/s
                 getNonFairSemaphore: 14507107.947 ops/s
                 incNonFairSemaphore: 15083362.013 ops/s

Iteration   8: 29480055.678 ops/s
                 getNonFairSemaphore: 15489637.388 ops/s
                 incNonFairSemaphore: 13990418.290 ops/s

Iteration   9: 29294825.421 ops/s
                 getNonFairSemaphore: 14345425.715 ops/s
                 incNonFairSemaphore: 14949399.705 ops/s

Iteration  10: 29388628.468 ops/s
                 getNonFairSemaphore: 14318861.047 ops/s
                 incNonFairSemaphore: 15069767.421 ops/s



Result "getNonFairSemaphore":
  29899284.774 ±(99.9%) 1655481.943 ops/s [Average]
  (min, avg, max) = (29114836.875, 29899284.774, 32920404.755), stdev = 1094998.804
  CI (99.9%): [28243802.831, 31554766.716] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  14908998.447 ±(99.9%) 1383488.576 ops/s [Average]
  (min, avg, max) = (13752651.594, 14908998.447, 16777999.432), stdev = 915092.033
  CI (99.9%): [13525509.870, 16292487.023] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  14990286.327 ±(99.9%) 1075029.983 ops/s [Average]
  (min, avg, max) = (13990418.290, 14990286.327, 16142405.323), stdev = 711065.772
  CI (99.9%): [13915256.344, 16065316.310] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:16
# Fork: 1 of 1
# Warmup Iteration   1: 26018212.920 ops/s
# Warmup Iteration   2: 23637187.742 ops/s
# Warmup Iteration   3: 23214913.635 ops/s
# Warmup Iteration   4: 22551953.288 ops/s
# Warmup Iteration   5: 24183677.476 ops/s
Iteration   1: 25971831.036 ops/s
                 getStamped: 238453.637 ops/s
                 incStamped: 25733377.399 ops/s

Iteration   2: 23952539.963 ops/s
                 getStamped: 193890.292 ops/s
                 incStamped: 23758649.671 ops/s

Iteration   3: 23616065.251 ops/s
                 getStamped: 195996.531 ops/s
                 incStamped: 23420068.720 ops/s

Iteration   4: 23061071.235 ops/s
                 getStamped: 201493.352 ops/s
                 incStamped: 22859577.883 ops/s

Iteration   5: 25355193.265 ops/s
                 getStamped: 213353.401 ops/s
                 incStamped: 25141839.864 ops/s

Iteration   6: 27736923.112 ops/s
                 getStamped: 164483.920 ops/s
                 incStamped: 27572439.192 ops/s

Iteration   7: 27615356.400 ops/s
                 getStamped: 202739.183 ops/s
                 incStamped: 27412617.217 ops/s

Iteration   8: 26888004.971 ops/s
                 getStamped: 166682.584 ops/s
                 incStamped: 26721322.387 ops/s

Iteration   9: 25198071.106 ops/s
                 getStamped: 217372.774 ops/s
                 incStamped: 24980698.332 ops/s

Iteration  10: 24170846.790 ops/s
                 getStamped: 228766.891 ops/s
                 incStamped: 23942079.899 ops/s



Result "getStamped":
  25356590.313 ±(99.9%) 2529473.333 ops/s [Average]
  (min, avg, max) = (23061071.235, 25356590.313, 27736923.112), stdev = 1673089.995
  CI (99.9%): [22827116.980, 27886063.646] (assumes normal distribution)

Secondary result "getStamped":
  202323.257 ±(99.9%) 36224.679 ops/s [Average]
  (min, avg, max) = (164483.920, 202323.257, 238453.637), stdev = 23960.382
  CI (99.9%): [166098.577, 238547.936] (assumes normal distribution)

Secondary result "incStamped":
  25154267.056 ±(99.9%) 2542798.449 ops/s [Average]
  (min, avg, max) = (22859577.883, 25154267.056, 27572439.192), stdev = 1681903.734
  CI (99.9%): [22611468.608, 27697065.505] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 56816613.557 ops/s
# Warmup Iteration   2: 60672270.077 ops/s
# Warmup Iteration   3: 72435902.759 ops/s
# Warmup Iteration   4: 67398143.990 ops/s
# Warmup Iteration   5: 81862919.356 ops/s
Iteration   1: 80046043.534 ops/s
                 getOptimisticStamped: 55175684.167 ops/s
                 incOptimisticStamped: 24870359.367 ops/s

Iteration   2: 73018437.503 ops/s
                 getOptimisticStamped: 48995918.139 ops/s
                 incOptimisticStamped: 24022519.365 ops/s

Iteration   3: 79263666.899 ops/s
                 getOptimisticStamped: 53636079.228 ops/s
                 incOptimisticStamped: 25627587.671 ops/s

Iteration   4: 64416331.184 ops/s
                 getOptimisticStamped: 38706201.856 ops/s
                 incOptimisticStamped: 25710129.328 ops/s

Iteration   5: 70496784.547 ops/s
                 getOptimisticStamped: 45612484.357 ops/s
                 incOptimisticStamped: 24884300.190 ops/s

Iteration   6: 69181797.802 ops/s
                 getOptimisticStamped: 43297625.957 ops/s
                 incOptimisticStamped: 25884171.845 ops/s

Iteration   7: 67996433.622 ops/s
                 getOptimisticStamped: 40322293.698 ops/s
                 incOptimisticStamped: 27674139.924 ops/s

Iteration   8: 68920629.504 ops/s
                 getOptimisticStamped: 44259163.065 ops/s
                 incOptimisticStamped: 24661466.439 ops/s

Iteration   9: 83786027.247 ops/s
                 getOptimisticStamped: 57718753.249 ops/s
                 incOptimisticStamped: 26067273.998 ops/s

Iteration  10: 70622720.720 ops/s
                 getOptimisticStamped: 46016590.343 ops/s
                 incOptimisticStamped: 24606130.377 ops/s



Result "getOptimisticStamped":
  72774887.256 ±(99.9%) 9381704.224 ops/s [Average]
  (min, avg, max) = (64416331.184, 72774887.256, 83786027.247), stdev = 6205416.466
  CI (99.9%): [63393183.032, 82156591.480] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  47374079.406 ±(99.9%) 9639152.780 ops/s [Average]
  (min, avg, max) = (38706201.856, 47374079.406, 57718753.249), stdev = 6375702.746
  CI (99.9%): [37734926.626, 57013232.186] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  25400807.850 ±(99.9%) 1562978.916 ops/s [Average]
  (min, avg, max) = (24022519.365, 25400807.850, 27674139.924), stdev = 1033813.779
  CI (99.9%): [23837828.934, 26963786.766] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 22003835.452 ops/s
# Warmup Iteration   2: 23678311.871 ops/s
# Warmup Iteration   3: 22494213.597 ops/s
# Warmup Iteration   4: 22107254.713 ops/s
# Warmup Iteration   5: 21692834.204 ops/s
Iteration   1: 22289576.095 ops/s
                 getSynchronized: 9488074.283 ops/s
                 incSynchronized: 12801501.812 ops/s

Iteration   2: 22427155.867 ops/s
                 getSynchronized: 8770226.663 ops/s
                 incSynchronized: 13656929.204 ops/s

Iteration   3: 22478219.406 ops/s
                 getSynchronized: 9458184.998 ops/s
                 incSynchronized: 13020034.408 ops/s

Iteration   4: 21935779.072 ops/s
                 getSynchronized: 8939469.578 ops/s
                 incSynchronized: 12996309.494 ops/s

Iteration   5: 22820980.870 ops/s
                 getSynchronized: 8690664.963 ops/s
                 incSynchronized: 14130315.907 ops/s

Iteration   6: 22004675.049 ops/s
                 getSynchronized: 8460747.347 ops/s
                 incSynchronized: 13543927.702 ops/s

Iteration   7: 22698867.180 ops/s
                 getSynchronized: 8699870.760 ops/s
                 incSynchronized: 13998996.420 ops/s

Iteration   8: 23082278.847 ops/s
                 getSynchronized: 8934737.818 ops/s
                 incSynchronized: 14147541.028 ops/s

Iteration   9: 22671427.788 ops/s
                 getSynchronized: 9462619.323 ops/s
                 incSynchronized: 13208808.465 ops/s

Iteration  10: 21089664.723 ops/s
                 getSynchronized: 9214037.666 ops/s
                 incSynchronized: 11875627.058 ops/s



Result "getSynchronized":
  22349862.490 ±(99.9%) 856481.484 ops/s [Average]
  (min, avg, max) = (21089664.723, 22349862.490, 23082278.847), stdev = 566509.472
  CI (99.9%): [21493381.006, 23206343.973] (assumes normal distribution)

Secondary result "getSynchronized":
  9011863.340 ±(99.9%) 562048.052 ops/s [Average]
  (min, avg, max) = (8460747.347, 9011863.340, 9488074.283), stdev = 371759.987
  CI (99.9%): [8449815.287, 9573911.392] (assumes normal distribution)

Secondary result "incSynchronized":
  13337999.150 ±(99.9%) 1072018.229 ops/s [Average]
  (min, avg, max) = (11875627.058, 13337999.150, 14147541.028), stdev = 709073.683
  CI (99.9%): [12265980.921, 14410017.379] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 23327922.672 ops/s
# Warmup Iteration   2: 22924245.680 ops/s
# Warmup Iteration   3: 23913555.249 ops/s
# Warmup Iteration   4: 23189184.170 ops/s
# Warmup Iteration   5: 22638263.253 ops/s
Iteration   1: 22835375.264 ops/s
                 getSynchronizedMethod: 11072032.163 ops/s
                 incSynchronizedMethod: 11763343.101 ops/s

Iteration   2: 22573550.459 ops/s
                 getSynchronizedMethod: 11339784.117 ops/s
                 incSynchronizedMethod: 11233766.343 ops/s

Iteration   3: 23003892.500 ops/s
                 getSynchronizedMethod: 10606969.610 ops/s
                 incSynchronizedMethod: 12396922.890 ops/s

Iteration   4: 23006573.844 ops/s
                 getSynchronizedMethod: 10662216.544 ops/s
                 incSynchronizedMethod: 12344357.300 ops/s

Iteration   5: 22966317.052 ops/s
                 getSynchronizedMethod: 10882633.075 ops/s
                 incSynchronizedMethod: 12083683.977 ops/s

Iteration   6: 23780454.327 ops/s
                 getSynchronizedMethod: 10219044.366 ops/s
                 incSynchronizedMethod: 13561409.961 ops/s

Iteration   7: 23117002.742 ops/s
                 getSynchronizedMethod: 10887099.498 ops/s
                 incSynchronizedMethod: 12229903.244 ops/s

Iteration   8: 23822344.209 ops/s
                 getSynchronizedMethod: 11746001.711 ops/s
                 incSynchronizedMethod: 12076342.498 ops/s

Iteration   9: 22929977.621 ops/s
                 getSynchronizedMethod: 10968420.541 ops/s
                 incSynchronizedMethod: 11961557.081 ops/s

Iteration  10: 22975284.010 ops/s
                 getSynchronizedMethod: 10651824.474 ops/s
                 incSynchronizedMethod: 12323459.536 ops/s



Result "getSynchronizedMethod":
  23101077.203 ±(99.9%) 598951.238 ops/s [Average]
  (min, avg, max) = (22573550.459, 23101077.203, 23822344.209), stdev = 396169.159
  CI (99.9%): [22502125.965, 23700028.441] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  10903602.610 ±(99.9%) 639730.468 ops/s [Average]
  (min, avg, max) = (10219044.366, 10903602.610, 11746001.711), stdev = 423142.095
  CI (99.9%): [10263872.142, 11543333.078] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  12197474.593 ±(99.9%) 892875.126 ops/s [Average]
  (min, avg, max) = (11233766.343, 12197474.593, 13561409.961), stdev = 590581.613
  CI (99.9%): [11304599.467, 13090349.719] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 149619985.765 ops/s
# Warmup Iteration   2: 125206681.304 ops/s
# Warmup Iteration   3: 162237876.300 ops/s
# Warmup Iteration   4: 113783076.455 ops/s
# Warmup Iteration   5: 197230325.095 ops/s
Iteration   1: 119313693.374 ops/s
                 getVolatile: 80844025.003 ops/s
                 incVolatile: 38469668.372 ops/s

Iteration   2: 118076127.510 ops/s
                 getVolatile: 80157966.863 ops/s
                 incVolatile: 37918160.646 ops/s

Iteration   3: 165499716.455 ops/s
                 getVolatile: 119215124.749 ops/s
                 incVolatile: 46284591.706 ops/s

Iteration   4: 193089858.599 ops/s
                 getVolatile: 142545301.036 ops/s
                 incVolatile: 50544557.563 ops/s

Iteration   5: 157195904.762 ops/s
                 getVolatile: 111289690.943 ops/s
                 incVolatile: 45906213.819 ops/s

Iteration   6: 121609388.423 ops/s
                 getVolatile: 82860619.956 ops/s
                 incVolatile: 38748768.467 ops/s

Iteration   7: 197045803.578 ops/s
                 getVolatile: 145136440.558 ops/s
                 incVolatile: 51909363.020 ops/s

Iteration   8: 115629295.195 ops/s
                 getVolatile: 78323319.431 ops/s
                 incVolatile: 37305975.764 ops/s

Iteration   9: 117005051.299 ops/s
                 getVolatile: 79316206.352 ops/s
                 incVolatile: 37688844.947 ops/s

Iteration  10: 148904371.061 ops/s
                 getVolatile: 104959099.271 ops/s
                 incVolatile: 43945271.790 ops/s



Result "getVolatile":
  145336921.026 ±(99.9%) 48291805.879 ops/s [Average]
  (min, avg, max) = (115629295.195, 145336921.026, 197045803.578), stdev = 31942039.549
  CI (99.9%): [97045115.147, 193628726.904] (assumes normal distribution)

Secondary result "getVolatile":
  102464779.416 ±(99.9%) 39872906.963 ops/s [Average]
  (min, avg, max) = (78323319.431, 102464779.416, 145136440.558), stdev = 26373459.181
  CI (99.9%): [62591872.453, 142337686.379] (assumes normal distribution)

Secondary result "incVolatile":
  42872141.609 ±(99.9%) 8452501.210 ops/s [Average]
  (min, avg, max) = (37305975.764, 42872141.609, 51909363.020), stdev = 5590806.205
  CI (99.9%): [34419640.399, 51324642.820] (assumes normal distribution)


# Run complete. Total time: 00:03:19

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  124422586.398 ± 27631181.443  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   51501361.283 ±  9501423.506  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   72921225.115 ± 19479123.250  ops/s
CounterBenchmark.Atomic                                    thrpt   10   84860572.326 ± 12991257.235  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   44929365.407 ± 10277093.418  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   39931206.919 ±  2752474.512  ops/s
CounterBenchmark.LockFair                                  thrpt   10     356576.321 ±     4902.402  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     178287.013 ±     2450.088  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     178289.309 ±     2452.329  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   35607910.136 ±  1434737.984  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   14864881.961 ±  1137492.344  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   20743028.175 ±  1035466.022  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     413427.342 ±   286887.458  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     186449.479 ±    46610.744  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     226977.863 ±   240318.211  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10   22992989.271 ±   513363.562  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    7046670.143 ±   469168.416  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10   15946319.128 ±   432605.563  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     351456.150 ±     6090.093  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     175754.217 ±     3075.544  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     175701.934 ±     3019.767  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   29899284.774 ±  1655481.943  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   14908998.447 ±  1383488.576  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   14990286.327 ±  1075029.983  ops/s
CounterBenchmark.Stamped                                   thrpt   10   25356590.313 ±  2529473.333  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10     202323.257 ±    36224.679  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   25154267.056 ±  2542798.449  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10   72774887.256 ±  9381704.224  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10   47374079.406 ±  9639152.780  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   25400807.850 ±  1562978.916  ops/s
CounterBenchmark.Synchronized                              thrpt   10   22349862.490 ±   856481.484  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10    9011863.340 ±   562048.052  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   13337999.150 ±  1072018.229  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   23101077.203 ±   598951.238  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   10903602.610 ±   639730.468  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   12197474.593 ±   892875.126  ops/s
CounterBenchmark.Volatile                                  thrpt   10  145336921.026 ± 48291805.879  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  102464779.416 ± 39872906.963  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   42872141.609 ±  8452501.210  ops/s

Benchmark result is saved to ./counters/results/results-2-2.csv
Running benchmarks with thread group distribution: 4,4
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 127076120.885 ops/s
# Warmup Iteration   2: 143290461.454 ops/s
# Warmup Iteration   3: 125367148.895 ops/s
# Warmup Iteration   4: 131647415.119 ops/s
# Warmup Iteration   5: 128791118.687 ops/s
Iteration   1: 138315062.355 ops/s
                 getAdder: 56847665.052 ops/s
                 incAdder: 81467397.303 ops/s

Iteration   2: 137155207.333 ops/s
                 getAdder: 54338362.618 ops/s
                 incAdder: 82816844.715 ops/s

Iteration   3: 132563925.108 ops/s
                 getAdder: 54365833.204 ops/s
                 incAdder: 78198091.904 ops/s

Iteration   4: 147181893.557 ops/s
                 getAdder: 54657568.893 ops/s
                 incAdder: 92524324.664 ops/s

Iteration   5: 132437217.066 ops/s
                 getAdder: 59430925.109 ops/s
                 incAdder: 73006291.957 ops/s

Iteration   6: 115777713.915 ops/s
                 getAdder: 57308490.747 ops/s
                 incAdder: 58469223.167 ops/s

Iteration   7: 140389053.060 ops/s
                 getAdder: 59427862.654 ops/s
                 incAdder: 80961190.405 ops/s

Iteration   8: 137286094.346 ops/s
                 getAdder: 53776985.154 ops/s
                 incAdder: 83509109.192 ops/s

Iteration   9: 131092728.413 ops/s
                 getAdder: 62215721.258 ops/s
                 incAdder: 68877007.155 ops/s

Iteration  10: 149040902.151 ops/s
                 getAdder: 64092505.248 ops/s
                 incAdder: 84948396.902 ops/s



Result "incAdder":
  136123979.730 ±(99.9%) 14075349.191 ops/s [Average]
  (min, avg, max) = (115777713.915, 136123979.730, 149040902.151), stdev = 9309971.999
  CI (99.9%): [122048630.539, 150199328.922] (assumes normal distribution)

Secondary result "getAdder":
  57646191.994 ±(99.9%) 5407857.698 ops/s [Average]
  (min, avg, max) = (53776985.154, 57646191.994, 64092505.248), stdev = 3576963.034
  CI (99.9%): [52238334.296, 63054049.692] (assumes normal distribution)

Secondary result "incAdder":
  78477787.737 ±(99.9%) 14439391.903 ops/s [Average]
  (min, avg, max) = (58469223.167, 78477787.737, 92524324.664), stdev = 9550763.713
  CI (99.9%): [64038395.833, 92917179.640] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 97292687.078 ops/s
# Warmup Iteration   2: 103156851.203 ops/s
# Warmup Iteration   3: 114416691.768 ops/s
# Warmup Iteration   4: 96504239.995 ops/s
# Warmup Iteration   5: 90407374.521 ops/s
Iteration   1: 96758017.339 ops/s
                 getAtomic: 59531016.125 ops/s
                 incAtomic: 37227001.214 ops/s

Iteration   2: 105677938.443 ops/s
                 getAtomic: 67101324.538 ops/s
                 incAtomic: 38576613.905 ops/s

Iteration   3: 109065191.547 ops/s
                 getAtomic: 70369052.047 ops/s
                 incAtomic: 38696139.501 ops/s

Iteration   4: 114871645.762 ops/s
                 getAtomic: 76006200.473 ops/s
                 incAtomic: 38865445.289 ops/s

Iteration   5: 94370574.310 ops/s
                 getAtomic: 56081210.958 ops/s
                 incAtomic: 38289363.353 ops/s

Iteration   6: 110937786.876 ops/s
                 getAtomic: 73897919.679 ops/s
                 incAtomic: 37039867.197 ops/s

Iteration   7: 95566387.162 ops/s
                 getAtomic: 57117658.510 ops/s
                 incAtomic: 38448728.652 ops/s

Iteration   8: 116504637.512 ops/s
                 getAtomic: 79399839.339 ops/s
                 incAtomic: 37104798.172 ops/s

Iteration   9: 114720291.173 ops/s
                 getAtomic: 77954582.985 ops/s
                 incAtomic: 36765708.188 ops/s

Iteration  10: 101180039.597 ops/s
                 getAtomic: 61337569.177 ops/s
                 incAtomic: 39842470.420 ops/s



Result "incAtomic":
  105965250.972 ±(99.9%) 12865263.667 ops/s [Average]
  (min, avg, max) = (94370574.310, 105965250.972, 116504637.512), stdev = 8509575.349
  CI (99.9%): [93099987.305, 118830514.640] (assumes normal distribution)

Secondary result "getAtomic":
  67879637.383 ±(99.9%) 13435833.877 ops/s [Average]
  (min, avg, max) = (56081210.958, 67879637.383, 79399839.339), stdev = 8886972.215
  CI (99.9%): [54443803.506, 81315471.260] (assumes normal distribution)

Secondary result "incAtomic":
  38085613.589 ±(99.9%) 1513269.645 ops/s [Average]
  (min, avg, max) = (36765708.188, 38085613.589, 39842470.420), stdev = 1000934.174
  CI (99.9%): [36572343.944, 39598883.234] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:02:54
# Fork: 1 of 1
# Warmup Iteration   1: 329775.070 ops/s
# Warmup Iteration   2: 334488.896 ops/s
# Warmup Iteration   3: 346342.160 ops/s
# Warmup Iteration   4: 344920.521 ops/s
# Warmup Iteration   5: 345563.962 ops/s
Iteration   1: 345272.705 ops/s
                 getFairLock: 172630.989 ops/s
                 incFairLock: 172641.716 ops/s

Iteration   2: 345722.421 ops/s
                 getFairLock: 172856.046 ops/s
                 incFairLock: 172866.375 ops/s

Iteration   3: 349051.686 ops/s
                 getFairLock: 174525.653 ops/s
                 incFairLock: 174526.033 ops/s

Iteration   4: 347643.722 ops/s
                 getFairLock: 173820.838 ops/s
                 incFairLock: 173822.884 ops/s

Iteration   5: 348432.759 ops/s
                 getFairLock: 174215.098 ops/s
                 incFairLock: 174217.661 ops/s

Iteration   6: 344956.458 ops/s
                 getFairLock: 172476.341 ops/s
                 incFairLock: 172480.116 ops/s

Iteration   7: 347520.382 ops/s
                 getFairLock: 173761.003 ops/s
                 incFairLock: 173759.379 ops/s

Iteration   8: 344476.684 ops/s
                 getFairLock: 172239.594 ops/s
                 incFairLock: 172237.090 ops/s

Iteration   9: 342682.189 ops/s
                 getFairLock: 171329.270 ops/s
                 incFairLock: 171352.919 ops/s

Iteration  10: 504404.172 ops/s
                 getFairLock: 169938.175 ops/s
                 incFairLock: 334465.997 ops/s



Result "incFairLock":
  362016.318 ±(99.9%) 75696.818 ops/s [Average]
  (min, avg, max) = (342682.189, 362016.318, 504404.172), stdev = 50068.759
  CI (99.9%): [286319.499, 437713.136] (assumes normal distribution)

Secondary result "getFairLock":
  172779.301 ±(99.9%) 2122.911 ops/s [Average]
  (min, avg, max) = (169938.175, 172779.301, 174525.653), stdev = 1404.174
  CI (99.9%): [170656.390, 174902.211] (assumes normal distribution)

Secondary result "incFairLock":
  189237.017 ±(99.9%) 77161.747 ops/s [Average]
  (min, avg, max) = (171352.919, 189237.017, 334465.997), stdev = 51037.718
  CI (99.9%): [112075.271, 266398.764] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:36
# Fork: 1 of 1
# Warmup Iteration   1: 40140126.030 ops/s
# Warmup Iteration   2: 43785333.322 ops/s
# Warmup Iteration   3: 47338515.768 ops/s
# Warmup Iteration   4: 46548115.137 ops/s
# Warmup Iteration   5: 47243359.916 ops/s
Iteration   1: 47093650.724 ops/s
                 getNonFairLock: 24279939.289 ops/s
                 incNonFairLock: 22813711.435 ops/s

Iteration   2: 47219115.042 ops/s
                 getNonFairLock: 23238139.175 ops/s
                 incNonFairLock: 23980975.867 ops/s

Iteration   3: 46509272.151 ops/s
                 getNonFairLock: 25755292.876 ops/s
                 incNonFairLock: 20753979.275 ops/s

Iteration   4: 47171317.130 ops/s
                 getNonFairLock: 25971766.527 ops/s
                 incNonFairLock: 21199550.603 ops/s

Iteration   5: 47225353.245 ops/s
                 getNonFairLock: 23865230.294 ops/s
                 incNonFairLock: 23360122.951 ops/s

Iteration   6: 46396917.415 ops/s
                 getNonFairLock: 25910247.554 ops/s
                 incNonFairLock: 20486669.861 ops/s

Iteration   7: 46625549.846 ops/s
                 getNonFairLock: 24606469.661 ops/s
                 incNonFairLock: 22019080.185 ops/s

Iteration   8: 47463954.890 ops/s
                 getNonFairLock: 24349732.251 ops/s
                 incNonFairLock: 23114222.639 ops/s

Iteration   9: 46636706.476 ops/s
                 getNonFairLock: 25028136.279 ops/s
                 incNonFairLock: 21608570.197 ops/s

Iteration  10: 46121162.290 ops/s
                 getNonFairLock: 25552041.933 ops/s
                 incNonFairLock: 20569120.357 ops/s



Result "incNonFairLock":
  46846299.921 ±(99.9%) 669518.544 ops/s [Average]
  (min, avg, max) = (46121162.290, 46846299.921, 47463954.890), stdev = 442845.063
  CI (99.9%): [46176781.377, 47515818.465] (assumes normal distribution)

Secondary result "getNonFairLock":
  24855699.584 ±(99.9%) 1419028.541 ops/s [Average]
  (min, avg, max) = (23238139.175, 24855699.584, 25971766.527), stdev = 938599.519
  CI (99.9%): [23436671.043, 26274728.125] (assumes normal distribution)

Secondary result "incNonFairLock":
  21990600.337 ±(99.9%) 1909799.388 ops/s [Average]
  (min, avg, max) = (20486669.861, 21990600.337, 23980975.867), stdev = 1263214.048
  CI (99.9%): [20080800.949, 23900399.724] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 325327.157 ops/s
# Warmup Iteration   2: 326597.837 ops/s
# Warmup Iteration   3: 329631.712 ops/s
# Warmup Iteration   4: 340120.158 ops/s
# Warmup Iteration   5: 341568.199 ops/s
Iteration   1: 341609.571 ops/s
                 getFairRWLock: 170804.724 ops/s
                 incFairRWLock: 170804.847 ops/s

Iteration   2: 330412.128 ops/s
                 getFairRWLock: 165204.083 ops/s
                 incFairRWLock: 165208.045 ops/s

Iteration   3: 336810.683 ops/s
                 getFairRWLock: 168404.752 ops/s
                 incFairRWLock: 168405.931 ops/s

Iteration   4: 335551.500 ops/s
                 getFairRWLock: 167942.067 ops/s
                 incFairRWLock: 167609.433 ops/s

Iteration   5: 330300.068 ops/s
                 getFairRWLock: 165145.117 ops/s
                 incFairRWLock: 165154.952 ops/s

Iteration   6: 328690.812 ops/s
                 getFairRWLock: 164334.028 ops/s
                 incFairRWLock: 164356.784 ops/s

Iteration   7: 334521.292 ops/s
                 getFairRWLock: 167260.888 ops/s
                 incFairRWLock: 167260.404 ops/s

Iteration   8: 334370.484 ops/s
                 getFairRWLock: 167177.887 ops/s
                 incFairRWLock: 167192.597 ops/s

Iteration   9: 333834.890 ops/s
                 getFairRWLock: 166916.214 ops/s
                 incFairRWLock: 166918.676 ops/s

Iteration  10: 338316.394 ops/s
                 getFairRWLock: 169158.439 ops/s
                 incFairRWLock: 169157.955 ops/s



Result "incFairRWLock":
  334441.782 ±(99.9%) 5964.512 ops/s [Average]
  (min, avg, max) = (328690.812, 334441.782, 341609.571), stdev = 3945.155
  CI (99.9%): [328477.270, 340406.294] (assumes normal distribution)

Secondary result "getFairRWLock":
  167234.820 ±(99.9%) 2995.201 ops/s [Average]
  (min, avg, max) = (164334.028, 167234.820, 170804.724), stdev = 1981.140
  CI (99.9%): [164239.619, 170230.021] (assumes normal distribution)

Secondary result "incFairRWLock":
  167206.962 ±(99.9%) 2971.472 ops/s [Average]
  (min, avg, max) = (164356.784, 167206.962, 170804.847), stdev = 1965.445
  CI (99.9%): [164235.490, 170178.434] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:04
# Fork: 1 of 1
# Warmup Iteration   1: 14582001.704 ops/s
# Warmup Iteration   2: 14789344.478 ops/s
# Warmup Iteration   3: 12867589.810 ops/s
# Warmup Iteration   4: 12091871.339 ops/s
# Warmup Iteration   5: 12235170.478 ops/s
Iteration   1: 13496814.359 ops/s
                 getNonFairRWLock: 10289318.231 ops/s
                 incNonFairRWLock: 3207496.128 ops/s

Iteration   2: 11433413.814 ops/s
                 getNonFairRWLock: 9410958.963 ops/s
                 incNonFairRWLock: 2022454.851 ops/s

Iteration   3: 11570372.264 ops/s
                 getNonFairRWLock: 9875604.425 ops/s
                 incNonFairRWLock: 1694767.839 ops/s

Iteration   4: 11414847.293 ops/s
                 getNonFairRWLock: 9740887.137 ops/s
                 incNonFairRWLock: 1673960.156 ops/s

Iteration   5: 13279016.283 ops/s
                 getNonFairRWLock: 9574610.078 ops/s
                 incNonFairRWLock: 3704406.205 ops/s

Iteration   6: 11875106.950 ops/s
                 getNonFairRWLock: 9328112.859 ops/s
                 incNonFairRWLock: 2546994.091 ops/s

Iteration   7: 11574777.867 ops/s
                 getNonFairRWLock: 9422759.813 ops/s
                 incNonFairRWLock: 2152018.054 ops/s

Iteration   8: 11811371.427 ops/s
                 getNonFairRWLock: 10117538.009 ops/s
                 incNonFairRWLock: 1693833.419 ops/s

Iteration   9: 11321695.810 ops/s
                 getNonFairRWLock: 9421596.885 ops/s
                 incNonFairRWLock: 1900098.925 ops/s

Iteration  10: 11631048.610 ops/s
                 getNonFairRWLock: 9421793.435 ops/s
                 incNonFairRWLock: 2209255.175 ops/s



Result "incNonFairRWLock":
  11940846.468 ±(99.9%) 1183758.702 ops/s [Average]
  (min, avg, max) = (11321695.810, 11940846.468, 13496814.359), stdev = 782983.088
  CI (99.9%): [10757087.766, 13124605.170] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  9660317.983 ±(99.9%) 505897.145 ops/s [Average]
  (min, avg, max) = (9328112.859, 9660317.983, 10289318.231), stdev = 334619.638
  CI (99.9%): [9154420.838, 10166215.129] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  2280528.484 ±(99.9%) 1038420.369 ops/s [Average]
  (min, avg, max) = (1673960.156, 2280528.484, 3704406.205), stdev = 686850.779
  CI (99.9%): [1242108.116, 3318948.853] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:48
# Fork: 1 of 1
# Warmup Iteration   1: 335084.078 ops/s
# Warmup Iteration   2: 333499.262 ops/s
# Warmup Iteration   3: 341828.678 ops/s
# Warmup Iteration   4: 344176.378 ops/s
# Warmup Iteration   5: 342496.999 ops/s
Iteration   1: 344007.603 ops/s
                 getFairSemaphore: 172003.557 ops/s
                 incFairSemaphore: 172004.046 ops/s

Iteration   2: 342783.733 ops/s
                 getFairSemaphore: 171391.865 ops/s
                 incFairSemaphore: 171391.868 ops/s

Iteration   3: 346764.874 ops/s
                 getFairSemaphore: 173383.856 ops/s
                 incFairSemaphore: 173381.019 ops/s

Iteration   4: 346545.474 ops/s
                 getFairSemaphore: 173273.316 ops/s
                 incFairSemaphore: 173272.158 ops/s

Iteration   5: 347920.066 ops/s
                 getFairSemaphore: 173960.367 ops/s
                 incFairSemaphore: 173959.699 ops/s

Iteration   6: 346956.607 ops/s
                 getFairSemaphore: 173477.754 ops/s
                 incFairSemaphore: 173478.853 ops/s

Iteration   7: 346701.807 ops/s
                 getFairSemaphore: 173349.983 ops/s
                 incFairSemaphore: 173351.824 ops/s

Iteration   8: 341536.705 ops/s
                 getFairSemaphore: 170769.142 ops/s
                 incFairSemaphore: 170767.563 ops/s

Iteration   9: 346555.646 ops/s
                 getFairSemaphore: 173278.542 ops/s
                 incFairSemaphore: 173277.104 ops/s

Iteration  10: 350100.735 ops/s
                 getFairSemaphore: 175049.941 ops/s
                 incFairSemaphore: 175050.794 ops/s



Result "incFairSemaphore":
  345987.325 ±(99.9%) 3815.923 ops/s [Average]
  (min, avg, max) = (341536.705, 345987.325, 350100.735), stdev = 2523.997
  CI (99.9%): [342171.402, 349803.248] (assumes normal distribution)

Secondary result "getFairSemaphore":
  172993.832 ±(99.9%) 1907.730 ops/s [Average]
  (min, avg, max) = (170769.142, 172993.832, 175049.941), stdev = 1261.845
  CI (99.9%): [171086.102, 174901.562] (assumes normal distribution)

Secondary result "incFairSemaphore":
  172993.493 ±(99.9%) 1908.194 ops/s [Average]
  (min, avg, max) = (170767.563, 172993.493, 175050.794), stdev = 1262.152
  CI (99.9%): [171085.299, 174901.687] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 33245065.805 ops/s
# Warmup Iteration   2: 32270538.479 ops/s
# Warmup Iteration   3: 33838478.279 ops/s
# Warmup Iteration   4: 33567648.594 ops/s
# Warmup Iteration   5: 33854269.057 ops/s
Iteration   1: 33474498.621 ops/s
                 getNonFairSemaphore: 16272907.072 ops/s
                 incNonFairSemaphore: 17201591.549 ops/s

Iteration   2: 34403762.458 ops/s
                 getNonFairSemaphore: 17224151.946 ops/s
                 incNonFairSemaphore: 17179610.513 ops/s

Iteration   3: 34399337.580 ops/s
                 getNonFairSemaphore: 17850576.361 ops/s
                 incNonFairSemaphore: 16548761.219 ops/s

Iteration   4: 33360156.334 ops/s
                 getNonFairSemaphore: 17198470.270 ops/s
                 incNonFairSemaphore: 16161686.063 ops/s

Iteration   5: 33873111.813 ops/s
                 getNonFairSemaphore: 17280869.177 ops/s
                 incNonFairSemaphore: 16592242.636 ops/s

Iteration   6: 33819134.680 ops/s
                 getNonFairSemaphore: 15656739.712 ops/s
                 incNonFairSemaphore: 18162394.968 ops/s

Iteration   7: 35875158.312 ops/s
                 getNonFairSemaphore: 17807582.122 ops/s
                 incNonFairSemaphore: 18067576.190 ops/s

Iteration   8: 33778945.654 ops/s
                 getNonFairSemaphore: 16265821.375 ops/s
                 incNonFairSemaphore: 17513124.280 ops/s

Iteration   9: 34162367.617 ops/s
                 getNonFairSemaphore: 16120963.751 ops/s
                 incNonFairSemaphore: 18041403.866 ops/s

Iteration  10: 33366954.210 ops/s
                 getNonFairSemaphore: 16357859.377 ops/s
                 incNonFairSemaphore: 17009094.833 ops/s



Result "incNonFairSemaphore":
  34051342.728 ±(99.9%) 1129426.140 ops/s [Average]
  (min, avg, max) = (33360156.334, 34051342.728, 35875158.312), stdev = 747045.462
  CI (99.9%): [32921916.588, 35180768.868] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  16803594.116 ±(99.9%) 1150901.836 ops/s [Average]
  (min, avg, max) = (15656739.712, 16803594.116, 17850576.361), stdev = 761250.305
  CI (99.9%): [15652692.280, 17954495.952] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  17247748.612 ±(99.9%) 1053554.764 ops/s [Average]
  (min, avg, max) = (16161686.063, 17247748.612, 18162394.968), stdev = 696861.244
  CI (99.9%): [16194193.848, 18301303.375] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:17
# Fork: 1 of 1
# Warmup Iteration   1: 48778298.912 ops/s
# Warmup Iteration   2: 43958930.191 ops/s
# Warmup Iteration   3: 51413369.053 ops/s
# Warmup Iteration   4: 50953804.689 ops/s
# Warmup Iteration   5: 51563527.279 ops/s
Iteration   1: 51680418.989 ops/s
                 getStamped: 25005.092 ops/s
                 incStamped: 51655413.898 ops/s

Iteration   2: 50583904.866 ops/s
                 getStamped: 55260.379 ops/s
                 incStamped: 50528644.487 ops/s

Iteration   3: 51212241.427 ops/s
                 getStamped: 27026.831 ops/s
                 incStamped: 51185214.596 ops/s

Iteration   4: 51243753.953 ops/s
                 getStamped: 26314.351 ops/s
                 incStamped: 51217439.602 ops/s

Iteration   5: 51145452.998 ops/s
                 getStamped: 27863.144 ops/s
                 incStamped: 51117589.854 ops/s

Iteration   6: 51414327.805 ops/s
                 getStamped: 25036.699 ops/s
                 incStamped: 51389291.106 ops/s

Iteration   7: 50805810.992 ops/s
                 getStamped: 27330.275 ops/s
                 incStamped: 50778480.716 ops/s

Iteration   8: 51371581.179 ops/s
                 getStamped: 26382.684 ops/s
                 incStamped: 51345198.495 ops/s

Iteration   9: 51368395.318 ops/s
                 getStamped: 27384.548 ops/s
                 incStamped: 51341010.770 ops/s

Iteration  10: 50998883.767 ops/s
                 getStamped: 27739.764 ops/s
                 incStamped: 50971144.003 ops/s



Result "incStamped":
  51182477.129 ±(99.9%) 481244.483 ops/s [Average]
  (min, avg, max) = (50583904.866, 51182477.129, 51680418.989), stdev = 318313.429
  CI (99.9%): [50701232.646, 51663721.613] (assumes normal distribution)

Secondary result "getStamped":
  29534.377 ±(99.9%) 13752.028 ops/s [Average]
  (min, avg, max) = (25005.092, 29534.377, 55260.379), stdev = 9096.115
  CI (99.9%): [15782.349, 43286.404] (assumes normal distribution)

Secondary result "incStamped":
  51152942.753 ±(99.9%) 491228.710 ops/s [Average]
  (min, avg, max) = (50528644.487, 51152942.753, 51655413.898), stdev = 324917.377
  CI (99.9%): [50661714.043, 51644171.463] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 161999656.274 ops/s
# Warmup Iteration   2: 182841319.567 ops/s
# Warmup Iteration   3: 145317398.104 ops/s
# Warmup Iteration   4: 178082615.710 ops/s
# Warmup Iteration   5: 183241739.728 ops/s
Iteration   1: 176866651.343 ops/s
                 getOptimisticStamped: 139316112.340 ops/s
                 incOptimisticStamped: 37550539.004 ops/s

Iteration   2: 180921064.214 ops/s
                 getOptimisticStamped: 144521884.174 ops/s
                 incOptimisticStamped: 36399180.041 ops/s

Iteration   3: 201526401.454 ops/s
                 getOptimisticStamped: 166644761.104 ops/s
                 incOptimisticStamped: 34881640.350 ops/s

Iteration   4: 194976563.188 ops/s
                 getOptimisticStamped: 159367849.046 ops/s
                 incOptimisticStamped: 35608714.142 ops/s

Iteration   5: 198219958.671 ops/s
                 getOptimisticStamped: 164061880.467 ops/s
                 incOptimisticStamped: 34158078.204 ops/s

Iteration   6: 202197146.490 ops/s
                 getOptimisticStamped: 167739828.653 ops/s
                 incOptimisticStamped: 34457317.838 ops/s

Iteration   7: 174070449.779 ops/s
                 getOptimisticStamped: 136250166.919 ops/s
                 incOptimisticStamped: 37820282.860 ops/s

Iteration   8: 198595851.029 ops/s
                 getOptimisticStamped: 163634263.036 ops/s
                 incOptimisticStamped: 34961587.994 ops/s

Iteration   9: 188081780.818 ops/s
                 getOptimisticStamped: 152163947.927 ops/s
                 incOptimisticStamped: 35917832.891 ops/s

Iteration  10: 202404827.633 ops/s
                 getOptimisticStamped: 167467689.791 ops/s
                 incOptimisticStamped: 34937137.842 ops/s



Result "incOptimisticStamped":
  191786069.462 ±(99.9%) 16578214.014 ops/s [Average]
  (min, avg, max) = (174070449.779, 191786069.462, 202404827.633), stdev = 10965462.112
  CI (99.9%): [175207855.448, 208364283.476] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  156116838.346 ±(99.9%) 18392501.093 ops/s [Average]
  (min, avg, max) = (136250166.919, 156116838.346, 167739828.653), stdev = 12165500.682
  CI (99.9%): [137724337.252, 174509339.439] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  35669231.116 ±(99.9%) 1897296.861 ops/s [Average]
  (min, avg, max) = (34158078.204, 35669231.116, 37820282.860), stdev = 1254944.401
  CI (99.9%): [33771934.255, 37566527.978] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 33728749.385 ops/s
# Warmup Iteration   2: 33076101.261 ops/s
# Warmup Iteration   3: 31740335.860 ops/s
# Warmup Iteration   4: 31393062.772 ops/s
# Warmup Iteration   5: 29826722.800 ops/s
Iteration   1: 30746310.114 ops/s
                 getSynchronized: 11870962.024 ops/s
                 incSynchronized: 18875348.090 ops/s

Iteration   2: 29350786.057 ops/s
                 getSynchronized: 11905643.178 ops/s
                 incSynchronized: 17445142.879 ops/s

Iteration   3: 32162289.109 ops/s
                 getSynchronized: 12376471.527 ops/s
                 incSynchronized: 19785817.582 ops/s

Iteration   4: 30500868.152 ops/s
                 getSynchronized: 11734612.077 ops/s
                 incSynchronized: 18766256.075 ops/s

Iteration   5: 30291987.710 ops/s
                 getSynchronized: 11978156.841 ops/s
                 incSynchronized: 18313830.870 ops/s

Iteration   6: 29188384.767 ops/s
                 getSynchronized: 11479227.310 ops/s
                 incSynchronized: 17709157.457 ops/s

Iteration   7: 31668184.433 ops/s
                 getSynchronized: 12215427.258 ops/s
                 incSynchronized: 19452757.176 ops/s

Iteration   8: 31515604.022 ops/s
                 getSynchronized: 12228636.194 ops/s
                 incSynchronized: 19286967.828 ops/s

Iteration   9: 29821225.057 ops/s
                 getSynchronized: 12619040.434 ops/s
                 incSynchronized: 17202184.623 ops/s

Iteration  10: 30041280.129 ops/s
                 getSynchronized: 11165135.943 ops/s
                 incSynchronized: 18876144.185 ops/s



Result "incSynchronized":
  30528691.955 ±(99.9%) 1509100.213 ops/s [Average]
  (min, avg, max) = (29188384.767, 30528691.955, 32162289.109), stdev = 998176.353
  CI (99.9%): [29019591.742, 32037792.168] (assumes normal distribution)

Secondary result "getSynchronized":
  11957331.279 ±(99.9%) 651266.285 ops/s [Average]
  (min, avg, max) = (11165135.943, 11957331.279, 12619040.434), stdev = 430772.324
  CI (99.9%): [11306064.993, 12608597.564] (assumes normal distribution)

Secondary result "incSynchronized":
  18571360.677 ±(99.9%) 1327593.811 ops/s [Average]
  (min, avg, max) = (17202184.623, 18571360.677, 19785817.582), stdev = 878121.106
  CI (99.9%): [17243766.866, 19898954.487] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 33685109.604 ops/s
# Warmup Iteration   2: 34395075.397 ops/s
# Warmup Iteration   3: 33523159.869 ops/s
# Warmup Iteration   4: 33642025.420 ops/s
# Warmup Iteration   5: 32893611.552 ops/s
Iteration   1: 33664386.434 ops/s
                 getSynchronizedMethod: 15106076.027 ops/s
                 incSynchronizedMethod: 18558310.408 ops/s

Iteration   2: 32598621.641 ops/s
                 getSynchronizedMethod: 15563204.085 ops/s
                 incSynchronizedMethod: 17035417.556 ops/s

Iteration   3: 33902560.270 ops/s
                 getSynchronizedMethod: 14441821.050 ops/s
                 incSynchronizedMethod: 19460739.220 ops/s

Iteration   4: 33211425.014 ops/s
                 getSynchronizedMethod: 16697748.547 ops/s
                 incSynchronizedMethod: 16513676.467 ops/s

Iteration   5: 34774611.562 ops/s
                 getSynchronizedMethod: 18298771.834 ops/s
                 incSynchronizedMethod: 16475839.728 ops/s

Iteration   6: 34541415.066 ops/s
                 getSynchronizedMethod: 15835547.105 ops/s
                 incSynchronizedMethod: 18705867.961 ops/s

Iteration   7: 33748282.177 ops/s
                 getSynchronizedMethod: 15706116.855 ops/s
                 incSynchronizedMethod: 18042165.322 ops/s

Iteration   8: 34106727.466 ops/s
                 getSynchronizedMethod: 16085194.529 ops/s
                 incSynchronizedMethod: 18021532.937 ops/s

Iteration   9: 33183605.315 ops/s
                 getSynchronizedMethod: 13536039.970 ops/s
                 incSynchronizedMethod: 19647565.344 ops/s

Iteration  10: 33314869.547 ops/s
                 getSynchronizedMethod: 14175840.438 ops/s
                 incSynchronizedMethod: 19139029.109 ops/s



Result "incSynchronizedMethod":
  33704650.449 ±(99.9%) 1000233.133 ops/s [Average]
  (min, avg, max) = (32598621.641, 33704650.449, 34774611.562), stdev = 661592.287
  CI (99.9%): [32704417.316, 34704883.582] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  15544636.044 ±(99.9%) 2055408.256 ops/s [Average]
  (min, avg, max) = (13536039.970, 15544636.044, 18298771.834), stdev = 1359525.299
  CI (99.9%): [13489227.788, 17600044.300] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  18160014.405 ±(99.9%) 1757661.185 ops/s [Average]
  (min, avg, max) = (16475839.728, 18160014.405, 19647565.344), stdev = 1162584.046
  CI (99.9%): [16402353.220, 19917675.590] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 108163014.087 ops/s
# Warmup Iteration   2: 102670416.910 ops/s
# Warmup Iteration   3: 126058864.555 ops/s
# Warmup Iteration   4: 139501061.763 ops/s
# Warmup Iteration   5: 120056544.525 ops/s
Iteration   1: 136983939.074 ops/s
                 getVolatile: 97286574.862 ops/s
                 incVolatile: 39697364.212 ops/s

Iteration   2: 111349881.615 ops/s
                 getVolatile: 71309536.193 ops/s
                 incVolatile: 40040345.422 ops/s

Iteration   3: 158497277.385 ops/s
                 getVolatile: 118109015.368 ops/s
                 incVolatile: 40388262.017 ops/s

Iteration   4: 112176681.581 ops/s
                 getVolatile: 70283604.418 ops/s
                 incVolatile: 41893077.163 ops/s

Iteration   5: 125749002.778 ops/s
                 getVolatile: 84287952.800 ops/s
                 incVolatile: 41461049.978 ops/s

Iteration   6: 125785694.317 ops/s
                 getVolatile: 85773686.169 ops/s
                 incVolatile: 40012008.148 ops/s

Iteration   7: 166262996.157 ops/s
                 getVolatile: 127458317.649 ops/s
                 incVolatile: 38804678.509 ops/s

Iteration   8: 131591843.163 ops/s
                 getVolatile: 90496078.988 ops/s
                 incVolatile: 41095764.175 ops/s

Iteration   9: 132515247.086 ops/s
                 getVolatile: 90416767.669 ops/s
                 incVolatile: 42098479.417 ops/s

Iteration  10: 156731252.676 ops/s
                 getVolatile: 116996701.862 ops/s
                 incVolatile: 39734550.814 ops/s



Result "incVolatile":
  135764381.583 ±(99.9%) 28810672.093 ops/s [Average]
  (min, avg, max) = (111349881.615, 135764381.583, 166262996.157), stdev = 19056475.745
  CI (99.9%): [106953709.490, 164575053.676] (assumes normal distribution)

Secondary result "getVolatile":
  95241823.598 ±(99.9%) 29768918.425 ops/s [Average]
  (min, avg, max) = (70283604.418, 95241823.598, 127458317.649), stdev = 19690296.363
  CI (99.9%): [65472905.172, 125010742.023] (assumes normal distribution)

Secondary result "incVolatile":
  40522557.985 ±(99.9%) 1620143.924 ops/s [Average]
  (min, avg, max) = (38804678.509, 40522557.985, 42098479.417), stdev = 1071624.892
  CI (99.9%): [38902414.062, 42142701.909] (assumes normal distribution)


# Run complete. Total time: 00:03:22

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  136123979.730 ± 14075349.191  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   57646191.994 ±  5407857.698  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   78477787.737 ± 14439391.903  ops/s
CounterBenchmark.Atomic                                    thrpt   10  105965250.972 ± 12865263.667  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   67879637.383 ± 13435833.877  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   38085613.589 ±  1513269.645  ops/s
CounterBenchmark.LockFair                                  thrpt   10     362016.318 ±    75696.818  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     172779.301 ±     2122.911  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     189237.017 ±    77161.747  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   46846299.921 ±   669518.544  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   24855699.584 ±  1419028.541  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   21990600.337 ±  1909799.388  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     334441.782 ±     5964.512  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     167234.820 ±     2995.201  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     167206.962 ±     2971.472  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10   11940846.468 ±  1183758.702  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    9660317.983 ±   505897.145  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10    2280528.484 ±  1038420.369  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     345987.325 ±     3815.923  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     172993.832 ±     1907.730  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     172993.493 ±     1908.194  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   34051342.728 ±  1129426.140  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   16803594.116 ±  1150901.836  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   17247748.612 ±  1053554.764  ops/s
CounterBenchmark.Stamped                                   thrpt   10   51182477.129 ±   481244.483  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10      29534.377 ±    13752.028  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   51152942.753 ±   491228.710  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  191786069.462 ± 16578214.014  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  156116838.346 ± 18392501.093  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   35669231.116 ±  1897296.861  ops/s
CounterBenchmark.Synchronized                              thrpt   10   30528691.955 ±  1509100.213  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   11957331.279 ±   651266.285  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   18571360.677 ±  1327593.811  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   33704650.449 ±  1000233.133  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   15544636.044 ±  2055408.256  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   18160014.405 ±  1757661.185  ops/s
CounterBenchmark.Volatile                                  thrpt   10  135764381.583 ± 28810672.093  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10   95241823.598 ± 29768918.425  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   40522557.985 ±  1620143.924  ops/s

Benchmark result is saved to ./counters/results/results-4-4.csv
Running benchmarks with thread group distribution: 16,16
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 134071822.465 ops/s
# Warmup Iteration   2: 138210897.481 ops/s
# Warmup Iteration   3: 139248803.556 ops/s
# Warmup Iteration   4: 141429456.727 ops/s
# Warmup Iteration   5: 154308033.757 ops/s
Iteration   1: 152756683.322 ops/s
                 getAdder: 70086026.630 ops/s
                 incAdder: 82670656.692 ops/s

Iteration   2: 145265694.603 ops/s
                 getAdder: 69090226.416 ops/s
                 incAdder: 76175468.187 ops/s

Iteration   3: 133972785.389 ops/s
                 getAdder: 61376594.440 ops/s
                 incAdder: 72596190.949 ops/s

Iteration   4: 121968045.931 ops/s
                 getAdder: 58138842.479 ops/s
                 incAdder: 63829203.452 ops/s

Iteration   5: 146568903.932 ops/s
                 getAdder: 63183593.111 ops/s
                 incAdder: 83385310.821 ops/s

Iteration   6: 155551857.974 ops/s
                 getAdder: 71183330.111 ops/s
                 incAdder: 84368527.863 ops/s

Iteration   7: 141181590.326 ops/s
                 getAdder: 66072915.247 ops/s
                 incAdder: 75108675.079 ops/s

Iteration   8: 140629860.733 ops/s
                 getAdder: 66691751.361 ops/s
                 incAdder: 73938109.372 ops/s

Iteration   9: 153722080.712 ops/s
                 getAdder: 71280677.993 ops/s
                 incAdder: 82441402.719 ops/s

Iteration  10: 148809375.616 ops/s
                 getAdder: 65732955.624 ops/s
                 incAdder: 83076419.992 ops/s



Result "getAdder":
  144042687.854 ±(99.9%) 15460832.037 ops/s [Average]
  (min, avg, max) = (121968045.931, 144042687.854, 155551857.974), stdev = 10226383.118
  CI (99.9%): [128581855.817, 159503519.890] (assumes normal distribution)

Secondary result "getAdder":
  66283691.341 ±(99.9%) 6606463.727 ops/s [Average]
  (min, avg, max) = (58138842.479, 66283691.341, 71280677.993), stdev = 4369766.709
  CI (99.9%): [59677227.614, 72890155.068] (assumes normal distribution)

Secondary result "incAdder":
  77758996.513 ±(99.9%) 10009392.136 ops/s [Average]
  (min, avg, max) = (63829203.452, 77758996.513, 84368527.863), stdev = 6620593.156
  CI (99.9%): [67749604.376, 87768388.649] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:33
# Fork: 1 of 1
# Warmup Iteration   1: 94072106.589 ops/s
# Warmup Iteration   2: 116532963.787 ops/s
# Warmup Iteration   3: 115439725.053 ops/s
# Warmup Iteration   4: 127102444.207 ops/s
# Warmup Iteration   5: 132716366.482 ops/s
Iteration   1: 102082142.804 ops/s
                 getAtomic: 63663174.453 ops/s
                 incAtomic: 38418968.350 ops/s

Iteration   2: 120437594.898 ops/s
                 getAtomic: 83318600.284 ops/s
                 incAtomic: 37118994.613 ops/s

Iteration   3: 118323615.943 ops/s
                 getAtomic: 81798917.916 ops/s
                 incAtomic: 36524698.027 ops/s

Iteration   4: 101549324.607 ops/s
                 getAtomic: 62206904.723 ops/s
                 incAtomic: 39342419.884 ops/s

Iteration   5: 127003643.095 ops/s
                 getAtomic: 88946944.169 ops/s
                 incAtomic: 38056698.926 ops/s

Iteration   6: 129960047.540 ops/s
                 getAtomic: 90435872.347 ops/s
                 incAtomic: 39524175.193 ops/s

Iteration   7: 125033320.413 ops/s
                 getAtomic: 87039366.515 ops/s
                 incAtomic: 37993953.898 ops/s

Iteration   8: 115193696.008 ops/s
                 getAtomic: 75178593.480 ops/s
                 incAtomic: 40015102.528 ops/s

Iteration   9: 130335598.161 ops/s
                 getAtomic: 92618194.190 ops/s
                 incAtomic: 37717403.971 ops/s

Iteration  10: 133735371.000 ops/s
                 getAtomic: 95872694.040 ops/s
                 incAtomic: 37862676.961 ops/s



Result "getAtomic":
  120365435.447 ±(99.9%) 17129318.768 ops/s [Average]
  (min, avg, max) = (101549324.607, 120365435.447, 133735371.000), stdev = 11329983.784
  CI (99.9%): [103236116.679, 137494754.215] (assumes normal distribution)

Secondary result "getAtomic":
  82107926.212 ±(99.9%) 17647094.044 ops/s [Average]
  (min, avg, max) = (62206904.723, 82107926.212, 95872694.040), stdev = 11672460.071
  CI (99.9%): [64460832.168, 99755020.255] (assumes normal distribution)

Secondary result "incAtomic":
  38257509.235 ±(99.9%) 1652542.922 ops/s [Average]
  (min, avg, max) = (36524698.027, 38257509.235, 40015102.528), stdev = 1093054.824
  CI (99.9%): [36604966.313, 39910052.157] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 322923.610 ops/s
# Warmup Iteration   2: 313153.135 ops/s
# Warmup Iteration   3: 332301.017 ops/s
# Warmup Iteration   4: 330113.048 ops/s
# Warmup Iteration   5: 331561.801 ops/s
Iteration   1: 333468.206 ops/s
                 getFairLock: 166734.244 ops/s
                 incFairLock: 166733.961 ops/s

Iteration   2: 334974.070 ops/s
                 getFairLock: 167495.512 ops/s
                 incFairLock: 167478.557 ops/s

Iteration   3: 334453.051 ops/s
                 getFairLock: 167226.573 ops/s
                 incFairLock: 167226.477 ops/s

Iteration   4: 332816.774 ops/s
                 getFairLock: 166408.618 ops/s
                 incFairLock: 166408.156 ops/s

Iteration   5: 335835.018 ops/s
                 getFairLock: 167917.701 ops/s
                 incFairLock: 167917.318 ops/s

Iteration   6: 330901.641 ops/s
                 getFairLock: 165450.400 ops/s
                 incFairLock: 165451.241 ops/s

Iteration   7: 327530.354 ops/s
                 getFairLock: 163724.337 ops/s
                 incFairLock: 163806.017 ops/s

Iteration   8: 332086.341 ops/s
                 getFairLock: 166044.020 ops/s
                 incFairLock: 166042.320 ops/s

Iteration   9: 334672.225 ops/s
                 getFairLock: 167336.592 ops/s
                 incFairLock: 167335.633 ops/s

Iteration  10: 320402.074 ops/s
                 getFairLock: 160203.654 ops/s
                 incFairLock: 160198.420 ops/s



Result "getFairLock":
  331713.975 ±(99.9%) 7026.818 ops/s [Average]
  (min, avg, max) = (320402.074, 331713.975, 335835.018), stdev = 4647.805
  CI (99.9%): [324687.158, 338740.793] (assumes normal distribution)

Secondary result "getFairLock":
  165854.165 ±(99.9%) 3519.694 ops/s [Average]
  (min, avg, max) = (160203.654, 165854.165, 167917.701), stdev = 2328.060
  CI (99.9%): [162334.471, 169373.860] (assumes normal distribution)

Secondary result "incFairLock":
  165859.810 ±(99.9%) 3507.233 ops/s [Average]
  (min, avg, max) = (160198.420, 165859.810, 167917.318), stdev = 2319.817
  CI (99.9%): [162352.577, 169367.043] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 40368539.603 ops/s
# Warmup Iteration   2: 47002336.597 ops/s
# Warmup Iteration   3: 45800233.369 ops/s
# Warmup Iteration   4: 47587622.792 ops/s
# Warmup Iteration   5: 48436019.859 ops/s
Iteration   1: 48448101.081 ops/s
                 getNonFairLock: 22437531.200 ops/s
                 incNonFairLock: 26010569.881 ops/s

Iteration   2: 48657165.409 ops/s
                 getNonFairLock: 23444969.707 ops/s
                 incNonFairLock: 25212195.702 ops/s

Iteration   3: 48641356.897 ops/s
                 getNonFairLock: 25211227.687 ops/s
                 incNonFairLock: 23430129.211 ops/s

Iteration   4: 48275998.630 ops/s
                 getNonFairLock: 22920294.477 ops/s
                 incNonFairLock: 25355704.153 ops/s

Iteration   5: 48087909.741 ops/s
                 getNonFairLock: 21307082.702 ops/s
                 incNonFairLock: 26780827.040 ops/s

Iteration   6: 48176526.245 ops/s
                 getNonFairLock: 22299871.842 ops/s
                 incNonFairLock: 25876654.403 ops/s

Iteration   7: 48110730.573 ops/s
                 getNonFairLock: 23136939.096 ops/s
                 incNonFairLock: 24973791.477 ops/s

Iteration   8: 48584481.219 ops/s
                 getNonFairLock: 22042585.354 ops/s
                 incNonFairLock: 26541895.865 ops/s

Iteration   9: 47975184.477 ops/s
                 getNonFairLock: 23029342.164 ops/s
                 incNonFairLock: 24945842.312 ops/s

Iteration  10: 48604375.984 ops/s
                 getNonFairLock: 23549603.252 ops/s
                 incNonFairLock: 25054772.732 ops/s



Result "getNonFairLock":
  48356183.026 ±(99.9%) 393653.219 ops/s [Average]
  (min, avg, max) = (47975184.477, 48356183.026, 48657165.409), stdev = 260377.231
  CI (99.9%): [47962529.806, 48749836.245] (assumes normal distribution)

Secondary result "getNonFairLock":
  22937944.748 ±(99.9%) 1590942.779 ops/s [Average]
  (min, avg, max) = (21307082.702, 22937944.748, 25211227.687), stdev = 1052310.143
  CI (99.9%): [21347001.970, 24528887.527] (assumes normal distribution)

Secondary result "incNonFairLock":
  25418238.278 ±(99.9%) 1445912.907 ops/s [Average]
  (min, avg, max) = (23430129.211, 25418238.278, 26780827.040), stdev = 956381.863
  CI (99.9%): [23972325.370, 26864151.185] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 308950.873 ops/s
# Warmup Iteration   2: 319111.912 ops/s
# Warmup Iteration   3: 320479.222 ops/s
# Warmup Iteration   4: 325671.240 ops/s
# Warmup Iteration   5: 328529.403 ops/s
Iteration   1: 324679.192 ops/s
                 getFairRWLock: 162338.768 ops/s
                 incFairRWLock: 162340.423 ops/s

Iteration   2: 329596.357 ops/s
                 getFairRWLock: 164797.621 ops/s
                 incFairRWLock: 164798.736 ops/s

Iteration   3: 327510.486 ops/s
                 getFairRWLock: 163755.610 ops/s
                 incFairRWLock: 163754.876 ops/s

Iteration   4: 331280.032 ops/s
                 getFairRWLock: 165639.964 ops/s
                 incFairRWLock: 165640.068 ops/s

Iteration   5: 333244.252 ops/s
                 getFairRWLock: 166635.641 ops/s
                 incFairRWLock: 166608.611 ops/s

Iteration   6: 329544.550 ops/s
                 getFairRWLock: 164772.002 ops/s
                 incFairRWLock: 164772.547 ops/s

Iteration   7: 329727.137 ops/s
                 getFairRWLock: 164862.957 ops/s
                 incFairRWLock: 164864.181 ops/s

Iteration   8: 332742.025 ops/s
                 getFairRWLock: 166369.514 ops/s
                 incFairRWLock: 166372.511 ops/s

Iteration   9: 330989.557 ops/s
                 getFairRWLock: 165495.016 ops/s
                 incFairRWLock: 165494.541 ops/s

Iteration  10: 324558.726 ops/s
                 getFairRWLock: 162279.377 ops/s
                 incFairRWLock: 162279.349 ops/s



Result "getFairRWLock":
  329387.231 ±(99.9%) 4548.647 ops/s [Average]
  (min, avg, max) = (324558.726, 329387.231, 333244.252), stdev = 3008.648
  CI (99.9%): [324838.584, 333935.878] (assumes normal distribution)

Secondary result "getFairRWLock":
  164694.647 ±(99.9%) 2277.132 ops/s [Average]
  (min, avg, max) = (162279.377, 164694.647, 166635.641), stdev = 1506.182
  CI (99.9%): [162417.515, 166971.779] (assumes normal distribution)

Secondary result "incFairRWLock":
  164692.584 ±(99.9%) 2271.531 ops/s [Average]
  (min, avg, max) = (162279.349, 164692.584, 166608.611), stdev = 1502.477
  CI (99.9%): [162421.053, 166964.115] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 10447864.998 ops/s
# Warmup Iteration   2: 9639268.411 ops/s
# Warmup Iteration   3: 8723122.931 ops/s
# Warmup Iteration   4: 8021014.697 ops/s
# Warmup Iteration   5: 7745583.665 ops/s
Iteration   1: 7697406.311 ops/s
                 getNonFairRWLock: 7638540.294 ops/s
                 incNonFairRWLock: 58866.017 ops/s

Iteration   2: 7789080.926 ops/s
                 getNonFairRWLock: 7521861.787 ops/s
                 incNonFairRWLock: 267219.139 ops/s

Iteration   3: 8114103.357 ops/s
                 getNonFairRWLock: 7392088.742 ops/s
                 incNonFairRWLock: 722014.615 ops/s

Iteration   4: 7782262.676 ops/s
                 getNonFairRWLock: 7674850.740 ops/s
                 incNonFairRWLock: 107411.936 ops/s

Iteration   5: 9187009.074 ops/s
                 getNonFairRWLock: 7478709.828 ops/s
                 incNonFairRWLock: 1708299.246 ops/s

Iteration   6: 8643050.486 ops/s
                 getNonFairRWLock: 7769803.601 ops/s
                 incNonFairRWLock: 873246.885 ops/s

Iteration   7: 8741743.381 ops/s
                 getNonFairRWLock: 7648787.312 ops/s
                 incNonFairRWLock: 1092956.069 ops/s

Iteration   8: 8093988.911 ops/s
                 getNonFairRWLock: 7467557.975 ops/s
                 incNonFairRWLock: 626430.937 ops/s

Iteration   9: 7891979.472 ops/s
                 getNonFairRWLock: 7616478.568 ops/s
                 incNonFairRWLock: 275500.904 ops/s

Iteration  10: 8078816.546 ops/s
                 getNonFairRWLock: 7669269.737 ops/s
                 incNonFairRWLock: 409546.810 ops/s



Result "getNonFairRWLock":
  8201944.114 ±(99.9%) 745452.257 ops/s [Average]
  (min, avg, max) = (7697406.311, 8201944.114, 9187009.074), stdev = 493070.512
  CI (99.9%): [7456491.857, 8947396.371] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  7587794.858 ±(99.9%) 177077.803 ops/s [Average]
  (min, avg, max) = (7392088.742, 7587794.858, 7769803.601), stdev = 117126.003
  CI (99.9%): [7410717.055, 7764872.661] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  614149.256 ±(99.9%) 772111.229 ops/s [Average]
  (min, avg, max) = (58866.017, 614149.256, 1708299.246), stdev = 510703.772
  CI (99.9%): [≈ 0, 1386260.484] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:54
# Fork: 1 of 1
# Warmup Iteration   1: 329766.530 ops/s
# Warmup Iteration   2: 324619.938 ops/s
# Warmup Iteration   3: 331075.439 ops/s
# Warmup Iteration   4: 332016.834 ops/s
# Warmup Iteration   5: 335293.163 ops/s
Iteration   1: 340081.414 ops/s
                 getFairSemaphore: 170040.589 ops/s
                 incFairSemaphore: 170040.826 ops/s

Iteration   2: 338493.505 ops/s
                 getFairSemaphore: 169246.294 ops/s
                 incFairSemaphore: 169247.212 ops/s

Iteration   3: 336312.592 ops/s
                 getFairSemaphore: 168156.184 ops/s
                 incFairSemaphore: 168156.408 ops/s

Iteration   4: 330952.012 ops/s
                 getFairSemaphore: 165486.021 ops/s
                 incFairSemaphore: 165465.992 ops/s

Iteration   5: 335168.085 ops/s
                 getFairSemaphore: 167583.696 ops/s
                 incFairSemaphore: 167584.389 ops/s

Iteration   6: 339798.326 ops/s
                 getFairSemaphore: 169897.127 ops/s
                 incFairSemaphore: 169901.198 ops/s

Iteration   7: 334691.790 ops/s
                 getFairSemaphore: 167345.365 ops/s
                 incFairSemaphore: 167346.425 ops/s

Iteration   8: 339831.123 ops/s
                 getFairSemaphore: 169915.332 ops/s
                 incFairSemaphore: 169915.791 ops/s

Iteration   9: 331521.075 ops/s
                 getFairSemaphore: 165760.579 ops/s
                 incFairSemaphore: 165760.496 ops/s

Iteration  10: 327313.366 ops/s
                 getFairSemaphore: 163656.220 ops/s
                 incFairSemaphore: 163657.147 ops/s



Result "getFairSemaphore":
  335416.329 ±(99.9%) 6610.721 ops/s [Average]
  (min, avg, max) = (327313.366, 335416.329, 340081.414), stdev = 4372.583
  CI (99.9%): [328805.607, 342027.050] (assumes normal distribution)

Secondary result "getFairSemaphore":
  167708.741 ±(99.9%) 3303.342 ops/s [Average]
  (min, avg, max) = (163656.220, 167708.741, 170040.589), stdev = 2184.956
  CI (99.9%): [164405.399, 171012.082] (assumes normal distribution)

Secondary result "incFairSemaphore":
  167707.588 ±(99.9%) 3307.386 ops/s [Average]
  (min, avg, max) = (163657.147, 167707.588, 170040.826), stdev = 2187.631
  CI (99.9%): [164400.202, 171014.975] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 34961846.211 ops/s
# Warmup Iteration   2: 35208637.726 ops/s
# Warmup Iteration   3: 37176325.752 ops/s
# Warmup Iteration   4: 35527331.156 ops/s
# Warmup Iteration   5: 35790075.975 ops/s
Iteration   1: 35929726.044 ops/s
                 getNonFairSemaphore: 18464135.057 ops/s
                 incNonFairSemaphore: 17465590.987 ops/s

Iteration   2: 37480558.916 ops/s
                 getNonFairSemaphore: 20073485.539 ops/s
                 incNonFairSemaphore: 17407073.377 ops/s

Iteration   3: 38095325.994 ops/s
                 getNonFairSemaphore: 18717977.208 ops/s
                 incNonFairSemaphore: 19377348.785 ops/s

Iteration   4: 34846061.606 ops/s
                 getNonFairSemaphore: 18799407.067 ops/s
                 incNonFairSemaphore: 16046654.539 ops/s

Iteration   5: 36348246.218 ops/s
                 getNonFairSemaphore: 16925041.723 ops/s
                 incNonFairSemaphore: 19423204.495 ops/s

Iteration   6: 35368221.678 ops/s
                 getNonFairSemaphore: 18570414.693 ops/s
                 incNonFairSemaphore: 16797806.984 ops/s

Iteration   7: 35928125.215 ops/s
                 getNonFairSemaphore: 17870978.763 ops/s
                 incNonFairSemaphore: 18057146.452 ops/s

Iteration   8: 36558457.073 ops/s
                 getNonFairSemaphore: 18102065.206 ops/s
                 incNonFairSemaphore: 18456391.866 ops/s

Iteration   9: 37155822.093 ops/s
                 getNonFairSemaphore: 19569074.599 ops/s
                 incNonFairSemaphore: 17586747.494 ops/s

Iteration  10: 37148025.053 ops/s
                 getNonFairSemaphore: 19018586.905 ops/s
                 incNonFairSemaphore: 18129438.148 ops/s



Result "getNonFairSemaphore":
  36485856.989 ±(99.9%) 1516028.782 ops/s [Average]
  (min, avg, max) = (34846061.606, 36485856.989, 38095325.994), stdev = 1002759.173
  CI (99.9%): [34969828.207, 38001885.771] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  18611116.676 ±(99.9%) 1327812.537 ops/s [Average]
  (min, avg, max) = (16925041.723, 18611116.676, 20073485.539), stdev = 878265.781
  CI (99.9%): [17283304.139, 19938929.214] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  17874740.313 ±(99.9%) 1598631.610 ops/s [Average]
  (min, avg, max) = (16046654.539, 17874740.313, 19423204.495), stdev = 1057395.829
  CI (99.9%): [16276108.703, 19473371.923] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 42161503.182 ops/s
# Warmup Iteration   2: 51310044.226 ops/s
# Warmup Iteration   3: 48745511.932 ops/s
# Warmup Iteration   4: 50071308.335 ops/s
# Warmup Iteration   5: 49877193.536 ops/s
Iteration   1: 51009028.069 ops/s
                 getStamped: 30549.318 ops/s
                 incStamped: 50978478.751 ops/s

Iteration   2: 50741345.964 ops/s
                 getStamped: 28281.438 ops/s
                 incStamped: 50713064.527 ops/s

Iteration   3: 50754612.430 ops/s
                 getStamped: 28062.805 ops/s
                 incStamped: 50726549.626 ops/s

Iteration   4: 50406277.873 ops/s
                 getStamped: 31327.429 ops/s
                 incStamped: 50374950.444 ops/s

Iteration   5: 50845159.313 ops/s
                 getStamped: 29586.065 ops/s
                 incStamped: 50815573.248 ops/s

Iteration   6: 50499231.216 ops/s
                 getStamped: 28504.710 ops/s
                 incStamped: 50470726.506 ops/s

Iteration   7: 50919435.677 ops/s
                 getStamped: 27647.725 ops/s
                 incStamped: 50891787.951 ops/s

Iteration   8: 51383694.534 ops/s
                 getStamped: 27384.606 ops/s
                 incStamped: 51356309.927 ops/s

Iteration   9: 50768559.931 ops/s
                 getStamped: 26242.935 ops/s
                 incStamped: 50742316.996 ops/s

Iteration  10: 51561451.444 ops/s
                 getStamped: 25161.155 ops/s
                 incStamped: 51536290.289 ops/s



Result "getStamped":
  50888879.645 ±(99.9%) 541245.022 ops/s [Average]
  (min, avg, max) = (50406277.873, 50888879.645, 51561451.444), stdev = 358000.071
  CI (99.9%): [50347634.623, 51430124.667] (assumes normal distribution)

Secondary result "getStamped":
  28274.819 ±(99.9%) 2820.251 ops/s [Average]
  (min, avg, max) = (25161.155, 28274.819, 31327.429), stdev = 1865.421
  CI (99.9%): [25454.568, 31095.069] (assumes normal distribution)

Secondary result "incStamped":
  50860604.826 ±(99.9%) 542952.357 ops/s [Average]
  (min, avg, max) = (50374950.444, 50860604.826, 51536290.289), stdev = 359129.366
  CI (99.9%): [50317652.470, 51403557.183] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:04
# Fork: 1 of 1
# Warmup Iteration   1: 201112680.658 ops/s
# Warmup Iteration   2: 216002799.476 ops/s
# Warmup Iteration   3: 293905124.258 ops/s
# Warmup Iteration   4: 240214410.512 ops/s
# Warmup Iteration   5: 253767033.197 ops/s
Iteration   1: 261173266.222 ops/s
                 getOptimisticStamped: 235641661.239 ops/s
                 incOptimisticStamped: 25531604.983 ops/s

Iteration   2: 243463687.610 ops/s
                 getOptimisticStamped: 215387588.104 ops/s
                 incOptimisticStamped: 28076099.506 ops/s

Iteration   3: 252287456.607 ops/s
                 getOptimisticStamped: 223129421.550 ops/s
                 incOptimisticStamped: 29158035.056 ops/s

Iteration   4: 260082991.424 ops/s
                 getOptimisticStamped: 233500658.302 ops/s
                 incOptimisticStamped: 26582333.122 ops/s

Iteration   5: 285526837.981 ops/s
                 getOptimisticStamped: 260710668.315 ops/s
                 incOptimisticStamped: 24816169.666 ops/s

Iteration   6: 221031776.609 ops/s
                 getOptimisticStamped: 190450496.884 ops/s
                 incOptimisticStamped: 30581279.725 ops/s

Iteration   7: 208674396.038 ops/s
                 getOptimisticStamped: 176745218.045 ops/s
                 incOptimisticStamped: 31929177.994 ops/s

Iteration   8: 233505356.810 ops/s
                 getOptimisticStamped: 203418025.809 ops/s
                 incOptimisticStamped: 30087331.001 ops/s

Iteration   9: 252905823.751 ops/s
                 getOptimisticStamped: 225404030.242 ops/s
                 incOptimisticStamped: 27501793.509 ops/s

Iteration  10: 250315060.587 ops/s
                 getOptimisticStamped: 223770429.624 ops/s
                 incOptimisticStamped: 26544630.963 ops/s



Result "getOptimisticStamped":
  246896665.364 ±(99.9%) 32922768.008 ops/s [Average]
  (min, avg, max) = (208674396.038, 246896665.364, 285526837.981), stdev = 21776372.588
  CI (99.9%): [213973897.356, 279819433.372] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  218815819.811 ±(99.9%) 36214035.685 ops/s [Average]
  (min, avg, max) = (176745218.045, 218815819.811, 260710668.315), stdev = 23953342.374
  CI (99.9%): [182601784.126, 255029855.496] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  28080845.553 ±(99.9%) 3504035.658 ops/s [Average]
  (min, avg, max) = (24816169.666, 28080845.553, 31929177.994), stdev = 2317702.632
  CI (99.9%): [24576809.894, 31584881.211] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 32027740.442 ops/s
# Warmup Iteration   2: 30657305.193 ops/s
# Warmup Iteration   3: 31833940.352 ops/s
# Warmup Iteration   4: 29968479.273 ops/s
# Warmup Iteration   5: 31559997.658 ops/s
Iteration   1: 30635082.163 ops/s
                 getSynchronized: 11137745.172 ops/s
                 incSynchronized: 19497336.991 ops/s

Iteration   2: 30431537.794 ops/s
                 getSynchronized: 14069928.884 ops/s
                 incSynchronized: 16361608.910 ops/s

Iteration   3: 30926612.825 ops/s
                 getSynchronized: 14504258.735 ops/s
                 incSynchronized: 16422354.090 ops/s

Iteration   4: 31348147.541 ops/s
                 getSynchronized: 12888771.355 ops/s
                 incSynchronized: 18459376.186 ops/s

Iteration   5: 30079463.656 ops/s
                 getSynchronized: 13678093.538 ops/s
                 incSynchronized: 16401370.118 ops/s

Iteration   6: 30652016.996 ops/s
                 getSynchronized: 12643505.839 ops/s
                 incSynchronized: 18008511.156 ops/s

Iteration   7: 30652426.118 ops/s
                 getSynchronized: 12756863.846 ops/s
                 incSynchronized: 17895562.272 ops/s

Iteration   8: 31258446.200 ops/s
                 getSynchronized: 12643178.773 ops/s
                 incSynchronized: 18615267.427 ops/s

Iteration   9: 31471524.021 ops/s
                 getSynchronized: 12932465.041 ops/s
                 incSynchronized: 18539058.980 ops/s

Iteration  10: 30977651.472 ops/s
                 getSynchronized: 12071611.563 ops/s
                 incSynchronized: 18906039.909 ops/s



Result "getSynchronized":
  30843290.879 ±(99.9%) 660205.569 ops/s [Average]
  (min, avg, max) = (30079463.656, 30843290.879, 31471524.021), stdev = 436685.107
  CI (99.9%): [30183085.310, 31503496.448] (assumes normal distribution)

Secondary result "getSynchronized":
  12932642.275 ±(99.9%) 1467733.931 ops/s [Average]
  (min, avg, max) = (11137745.172, 12932642.275, 14504258.735), stdev = 970815.119
  CI (99.9%): [11464908.344, 14400376.206] (assumes normal distribution)

Secondary result "incSynchronized":
  17910648.604 ±(99.9%) 1716632.725 ops/s [Average]
  (min, avg, max) = (16361608.910, 17910648.604, 19497336.991), stdev = 1135446.260
  CI (99.9%): [16194015.879, 19627281.329] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:32
# Fork: 1 of 1
# Warmup Iteration   1: 32915956.087 ops/s
# Warmup Iteration   2: 30972303.550 ops/s
# Warmup Iteration   3: 32048628.470 ops/s
# Warmup Iteration   4: 31202073.252 ops/s
# Warmup Iteration   5: 32307558.516 ops/s
Iteration   1: 30703540.118 ops/s
                 getSynchronizedMethod: 14063043.711 ops/s
                 incSynchronizedMethod: 16640496.408 ops/s

Iteration   2: 33224462.263 ops/s
                 getSynchronizedMethod: 16769125.554 ops/s
                 incSynchronizedMethod: 16455336.709 ops/s

Iteration   3: 31825729.011 ops/s
                 getSynchronizedMethod: 15216860.899 ops/s
                 incSynchronizedMethod: 16608868.112 ops/s

Iteration   4: 31061065.160 ops/s
                 getSynchronizedMethod: 13692865.098 ops/s
                 incSynchronizedMethod: 17368200.062 ops/s

Iteration   5: 31166966.363 ops/s
                 getSynchronizedMethod: 15528674.476 ops/s
                 incSynchronizedMethod: 15638291.887 ops/s

Iteration   6: 32832174.730 ops/s
                 getSynchronizedMethod: 15261940.416 ops/s
                 incSynchronizedMethod: 17570234.314 ops/s

Iteration   7: 34636493.965 ops/s
                 getSynchronizedMethod: 16613043.592 ops/s
                 incSynchronizedMethod: 18023450.372 ops/s

Iteration   8: 32223741.409 ops/s
                 getSynchronizedMethod: 15671962.821 ops/s
                 incSynchronizedMethod: 16551778.587 ops/s

Iteration   9: 30555191.899 ops/s
                 getSynchronizedMethod: 13793218.885 ops/s
                 incSynchronizedMethod: 16761973.014 ops/s

Iteration  10: 32209405.356 ops/s
                 getSynchronizedMethod: 16312712.322 ops/s
                 incSynchronizedMethod: 15896693.034 ops/s



Result "getSynchronizedMethod":
  32043877.027 ±(99.9%) 1925057.054 ops/s [Average]
  (min, avg, max) = (30555191.899, 32043877.027, 34636493.965), stdev = 1273306.049
  CI (99.9%): [30118819.974, 33968934.081] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  15292344.777 ±(99.9%) 1708224.473 ops/s [Average]
  (min, avg, max) = (13692865.098, 15292344.777, 16769125.554), stdev = 1129884.722
  CI (99.9%): [13584120.304, 17000569.251] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  16751532.250 ±(99.9%) 1103967.194 ops/s [Average]
  (min, avg, max) = (15638291.887, 16751532.250, 18023450.372), stdev = 730205.946
  CI (99.9%): [15647565.056, 17855499.444] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 32 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:16
# Fork: 1 of 1
# Warmup Iteration   1: 138623845.222 ops/s
# Warmup Iteration   2: 153014162.477 ops/s
# Warmup Iteration   3: 160808432.220 ops/s
# Warmup Iteration   4: 156558635.501 ops/s
# Warmup Iteration   5: 154995279.259 ops/s
Iteration   1: 158236663.931 ops/s
                 getVolatile: 116257774.043 ops/s
                 incVolatile: 41978889.889 ops/s

Iteration   2: 147922266.913 ops/s
                 getVolatile: 105185628.326 ops/s
                 incVolatile: 42736638.587 ops/s

Iteration   3: 142964425.374 ops/s
                 getVolatile: 99572257.966 ops/s
                 incVolatile: 43392167.408 ops/s

Iteration   4: 158050537.512 ops/s
                 getVolatile: 113302595.739 ops/s
                 incVolatile: 44747941.773 ops/s

Iteration   5: 147883363.564 ops/s
                 getVolatile: 105272522.544 ops/s
                 incVolatile: 42610841.021 ops/s

Iteration   6: 159055030.244 ops/s
                 getVolatile: 116385641.731 ops/s
                 incVolatile: 42669388.513 ops/s

Iteration   7: 139955583.811 ops/s
                 getVolatile: 95770439.805 ops/s
                 incVolatile: 44185144.006 ops/s

Iteration   8: 145828733.000 ops/s
                 getVolatile: 101892357.921 ops/s
                 incVolatile: 43936375.080 ops/s

Iteration   9: 171892126.247 ops/s
                 getVolatile: 130233913.089 ops/s
                 incVolatile: 41658213.158 ops/s

Iteration  10: 162483333.769 ops/s
                 getVolatile: 119625019.024 ops/s
                 incVolatile: 42858314.745 ops/s



Result "getVolatile":
  153427206.436 ±(99.9%) 15192932.606 ops/s [Average]
  (min, avg, max) = (139955583.811, 153427206.436, 171892126.247), stdev = 10049184.232
  CI (99.9%): [138234273.830, 168620139.043] (assumes normal distribution)

Secondary result "getVolatile":
  110349815.019 ±(99.9%) 16048737.668 ops/s [Average]
  (min, avg, max) = (95770439.805, 110349815.019, 130233913.089), stdev = 10615246.292
  CI (99.9%): [94301077.351, 126398552.687] (assumes normal distribution)

Secondary result "incVolatile":
  43077391.418 ±(99.9%) 1479922.754 ops/s [Average]
  (min, avg, max) = (41658213.158, 43077391.418, 44747941.773), stdev = 978877.271
  CI (99.9%): [41597468.664, 44557314.172] (assumes normal distribution)


# Run complete. Total time: 00:03:31

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  144042687.854 ± 15460832.037  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   66283691.341 ±  6606463.727  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   77758996.513 ± 10009392.136  ops/s
CounterBenchmark.Atomic                                    thrpt   10  120365435.447 ± 17129318.768  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   82107926.212 ± 17647094.044  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   38257509.235 ±  1652542.922  ops/s
CounterBenchmark.LockFair                                  thrpt   10     331713.975 ±     7026.818  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     165854.165 ±     3519.694  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     165859.810 ±     3507.233  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   48356183.026 ±   393653.219  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   22937944.748 ±  1590942.779  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   25418238.278 ±  1445912.907  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     329387.231 ±     4548.647  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     164694.647 ±     2277.132  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     164692.584 ±     2271.531  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10    8201944.114 ±   745452.257  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    7587794.858 ±   177077.803  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10     614149.256 ±   772111.229  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     335416.329 ±     6610.721  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     167708.741 ±     3303.342  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     167707.588 ±     3307.386  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   36485856.989 ±  1516028.782  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   18611116.676 ±  1327812.537  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   17874740.313 ±  1598631.610  ops/s
CounterBenchmark.Stamped                                   thrpt   10   50888879.645 ±   541245.022  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10      28274.819 ±     2820.251  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   50860604.826 ±   542952.357  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  246896665.364 ± 32922768.008  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  218815819.811 ± 36214035.685  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   28080845.553 ±  3504035.658  ops/s
CounterBenchmark.Synchronized                              thrpt   10   30843290.879 ±   660205.569  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   12932642.275 ±  1467733.931  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   17910648.604 ±  1716632.725  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   32043877.027 ±  1925057.054  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   15292344.777 ±  1708224.473  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   16751532.250 ±  1103967.194  ops/s
CounterBenchmark.Volatile                                  thrpt   10  153427206.436 ± 15192932.606  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  110349815.019 ± 16048737.668  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   43077391.418 ±  1479922.754  ops/s

Benchmark result is saved to ./counters/results/results-16-16.csv
Running benchmarks with thread group distribution: 64,64
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 83605142.935 ops/s
# Warmup Iteration   2: 132879674.881 ops/s
# Warmup Iteration   3: 163158004.294 ops/s
# Warmup Iteration   4: 154280592.822 ops/s
# Warmup Iteration   5: 136330189.510 ops/s
Iteration   1: 145190596.312 ops/s
                 getAdder: 57182695.788 ops/s
                 incAdder: 88007900.524 ops/s

Iteration   2: 141160751.432 ops/s
                 getAdder: 55895348.641 ops/s
                 incAdder: 85265402.790 ops/s

Iteration   3: 140775027.148 ops/s
                 getAdder: 54901542.915 ops/s
                 incAdder: 85873484.234 ops/s

Iteration   4: 147756955.507 ops/s
                 getAdder: 56493624.409 ops/s
                 incAdder: 91263331.098 ops/s

Iteration   5: 143845817.621 ops/s
                 getAdder: 57136307.395 ops/s
                 incAdder: 86709510.226 ops/s

Iteration   6: 142826868.741 ops/s
                 getAdder: 56732375.721 ops/s
                 incAdder: 86094493.020 ops/s

Iteration   7: 146562199.592 ops/s
                 getAdder: 55660381.290 ops/s
                 incAdder: 90901818.302 ops/s

Iteration   8: 149681103.868 ops/s
                 getAdder: 58131183.424 ops/s
                 incAdder: 91549920.444 ops/s

Iteration   9: 136381822.660 ops/s
                 getAdder: 53153363.556 ops/s
                 incAdder: 83228459.104 ops/s

Iteration  10: 142234123.751 ops/s
                 getAdder: 54823076.236 ops/s
                 incAdder: 87411047.515 ops/s



Result "incAdder":
  143641526.663 ±(99.9%) 5835929.074 ops/s [Average]
  (min, avg, max) = (136381822.660, 143641526.663, 149681103.868), stdev = 3860105.745
  CI (99.9%): [137805597.589, 149477455.737] (assumes normal distribution)

Secondary result "getAdder":
  56010989.937 ±(99.9%) 2186951.946 ops/s [Average]
  (min, avg, max) = (53153363.556, 56010989.937, 58131183.424), stdev = 1446533.305
  CI (99.9%): [53824037.992, 58197941.883] (assumes normal distribution)

Secondary result "incAdder":
  87630536.726 ±(99.9%) 4237929.128 ops/s [Average]
  (min, avg, max) = (83228459.104, 87630536.726, 91549920.444), stdev = 2803127.722
  CI (99.9%): [83392607.598, 91868465.854] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:05:29
# Fork: 1 of 1
# Warmup Iteration   1: 103424653.621 ops/s
# Warmup Iteration   2: 109831360.482 ops/s
# Warmup Iteration   3: 108739802.838 ops/s
# Warmup Iteration   4: 116770418.210 ops/s
# Warmup Iteration   5: 122609404.125 ops/s
Iteration   1: 114314429.339 ops/s
                 getAtomic: 78035650.543 ops/s
                 incAtomic: 36278778.796 ops/s

Iteration   2: 128752773.241 ops/s
                 getAtomic: 92199403.942 ops/s
                 incAtomic: 36553369.299 ops/s

Iteration   3: 117038330.479 ops/s
                 getAtomic: 80099194.455 ops/s
                 incAtomic: 36939136.024 ops/s

Iteration   4: 123834104.408 ops/s
                 getAtomic: 88924245.135 ops/s
                 incAtomic: 34909859.273 ops/s

Iteration   5: 130395352.980 ops/s
                 getAtomic: 94426961.076 ops/s
                 incAtomic: 35968391.905 ops/s

Iteration   6: 128532344.735 ops/s
                 getAtomic: 92259976.882 ops/s
                 incAtomic: 36272367.853 ops/s

Iteration   7: 107585630.856 ops/s
                 getAtomic: 69738926.853 ops/s
                 incAtomic: 37846704.003 ops/s

Iteration   8: 120772370.865 ops/s
                 getAtomic: 83023510.361 ops/s
                 incAtomic: 37748860.504 ops/s

Iteration   9: 125910013.330 ops/s
                 getAtomic: 90145883.336 ops/s
                 incAtomic: 35764129.994 ops/s

Iteration  10: 124501135.031 ops/s
                 getAtomic: 88173348.265 ops/s
                 incAtomic: 36327786.765 ops/s



Result "incAtomic":
  122163648.526 ±(99.9%) 10999109.229 ops/s [Average]
  (min, avg, max) = (107585630.856, 122163648.526, 130395352.980), stdev = 7275229.733
  CI (99.9%): [111164539.297, 133162757.756] (assumes normal distribution)

Secondary result "getAtomic":
  85702710.085 ±(99.9%) 11815993.614 ops/s [Average]
  (min, avg, max) = (69738926.853, 85702710.085, 94426961.076), stdev = 7815548.176
  CI (99.9%): [73886716.471, 97518703.699] (assumes normal distribution)

Secondary result "incAtomic":
  36460938.442 ±(99.9%) 1336829.838 ops/s [Average]
  (min, avg, max) = (34909859.273, 36460938.442, 37846704.003), stdev = 884230.166
  CI (99.9%): [35124108.604, 37797768.279] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:05:02
# Fork: 1 of 1
# Warmup Iteration   1: 313589.989 ops/s
# Warmup Iteration   2: 305829.749 ops/s
# Warmup Iteration   3: 317549.388 ops/s
# Warmup Iteration   4: 317351.715 ops/s
# Warmup Iteration   5: 315288.870 ops/s
Iteration   1: 311066.092 ops/s
                 getFairLock: 155518.838 ops/s
                 incFairLock: 155547.255 ops/s

Iteration   2: 318916.514 ops/s
                 getFairLock: 159458.042 ops/s
                 incFairLock: 159458.473 ops/s

Iteration   3: 320839.778 ops/s
                 getFairLock: 160420.226 ops/s
                 incFairLock: 160419.552 ops/s

Iteration   4: 318485.175 ops/s
                 getFairLock: 159242.280 ops/s
                 incFairLock: 159242.895 ops/s

Iteration   5: 306848.972 ops/s
                 getFairLock: 153400.620 ops/s
                 incFairLock: 153448.353 ops/s

Iteration   6: 323357.153 ops/s
                 getFairLock: 161678.793 ops/s
                 incFairLock: 161678.361 ops/s

Iteration   7: 322066.043 ops/s
                 getFairLock: 161032.673 ops/s
                 incFairLock: 161033.371 ops/s

Iteration   8: 320953.051 ops/s
                 getFairLock: 160476.616 ops/s
                 incFairLock: 160476.435 ops/s

Iteration   9: 320329.540 ops/s
                 getFairLock: 160164.952 ops/s
                 incFairLock: 160164.588 ops/s

Iteration  10: 322990.716 ops/s
                 getFairLock: 161495.735 ops/s
                 incFairLock: 161494.981 ops/s



Result "incFairLock":
  318585.303 ±(99.9%) 8163.792 ops/s [Average]
  (min, avg, max) = (306848.972, 318585.303, 323357.153), stdev = 5399.843
  CI (99.9%): [310421.511, 326749.096] (assumes normal distribution)

Secondary result "getFairLock":
  159288.877 ±(99.9%) 4094.020 ops/s [Average]
  (min, avg, max) = (153400.620, 159288.877, 161678.793), stdev = 2707.941
  CI (99.9%): [155194.857, 163382.897] (assumes normal distribution)

Secondary result "incFairLock":
  159296.426 ±(99.9%) 4069.775 ops/s [Average]
  (min, avg, max) = (153448.353, 159296.426, 161678.361), stdev = 2691.904
  CI (99.9%): [155226.651, 163366.202] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:03:54
# Fork: 1 of 1
# Warmup Iteration   1: 41491705.604 ops/s
# Warmup Iteration   2: 35610792.939 ops/s
# Warmup Iteration   3: 45761743.672 ops/s
# Warmup Iteration   4: 46710844.305 ops/s
# Warmup Iteration   5: 46105770.733 ops/s
Iteration   1: 47766749.919 ops/s
                 getNonFairLock: 21144224.025 ops/s
                 incNonFairLock: 26622525.893 ops/s

Iteration   2: 46836519.361 ops/s
                 getNonFairLock: 19298999.897 ops/s
                 incNonFairLock: 27537519.464 ops/s

Iteration   3: 46409783.999 ops/s
                 getNonFairLock: 20154156.448 ops/s
                 incNonFairLock: 26255627.550 ops/s

Iteration   4: 45849048.273 ops/s
                 getNonFairLock: 19615113.062 ops/s
                 incNonFairLock: 26233935.211 ops/s

Iteration   5: 46276833.475 ops/s
                 getNonFairLock: 19712668.439 ops/s
                 incNonFairLock: 26564165.037 ops/s

Iteration   6: 46443441.741 ops/s
                 getNonFairLock: 18663355.995 ops/s
                 incNonFairLock: 27780085.746 ops/s

Iteration   7: 46103345.561 ops/s
                 getNonFairLock: 22164420.151 ops/s
                 incNonFairLock: 23938925.410 ops/s

Iteration   8: 45555408.502 ops/s
                 getNonFairLock: 21448550.951 ops/s
                 incNonFairLock: 24106857.551 ops/s

Iteration   9: 47906328.747 ops/s
                 getNonFairLock: 20443343.621 ops/s
                 incNonFairLock: 27462985.126 ops/s

Iteration  10: 47248691.131 ops/s
                 getNonFairLock: 20088848.472 ops/s
                 incNonFairLock: 27159842.660 ops/s



Result "incNonFairLock":
  46639615.071 ±(99.9%) 1192115.754 ops/s [Average]
  (min, avg, max) = (45555408.502, 46639615.071, 47906328.747), stdev = 788510.760
  CI (99.9%): [45447499.317, 47831730.825] (assumes normal distribution)

Secondary result "getNonFairLock":
  20273368.106 ±(99.9%) 1600149.326 ops/s [Average]
  (min, avg, max) = (18663355.995, 20273368.106, 22164420.151), stdev = 1058399.704
  CI (99.9%): [18673218.780, 21873517.432] (assumes normal distribution)

Secondary result "incNonFairLock":
  26366246.965 ±(99.9%) 2036789.219 ops/s [Average]
  (min, avg, max) = (23938925.410, 26366246.965, 27780085.746), stdev = 1347209.958
  CI (99.9%): [24329457.746, 28403036.184] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 282447.682 ops/s
# Warmup Iteration   2: 294953.154 ops/s
# Warmup Iteration   3: 315162.317 ops/s
# Warmup Iteration   4: 318202.293 ops/s
# Warmup Iteration   5: 324023.257 ops/s
Iteration   1: 307401.146 ops/s
                 getFairRWLock: 153699.518 ops/s
                 incFairRWLock: 153701.628 ops/s

Iteration   2: 319272.415 ops/s
                 getFairRWLock: 159635.975 ops/s
                 incFairRWLock: 159636.440 ops/s

Iteration   3: 311803.377 ops/s
                 getFairRWLock: 155901.424 ops/s
                 incFairRWLock: 155901.953 ops/s

Iteration   4: 316108.188 ops/s
                 getFairRWLock: 158053.006 ops/s
                 incFairRWLock: 158055.182 ops/s

Iteration   5: 310670.243 ops/s
                 getFairRWLock: 155332.812 ops/s
                 incFairRWLock: 155337.431 ops/s

Iteration   6: 318362.657 ops/s
                 getFairRWLock: 159179.368 ops/s
                 incFairRWLock: 159183.289 ops/s

Iteration   7: 321505.366 ops/s
                 getFairRWLock: 160751.131 ops/s
                 incFairRWLock: 160754.235 ops/s

Iteration   8: 320593.787 ops/s
                 getFairRWLock: 160296.673 ops/s
                 incFairRWLock: 160297.114 ops/s

Iteration   9: 321952.104 ops/s
                 getFairRWLock: 160975.880 ops/s
                 incFairRWLock: 160976.224 ops/s

Iteration  10: 322443.759 ops/s
                 getFairRWLock: 161221.806 ops/s
                 incFairRWLock: 161221.953 ops/s



Result "incFairRWLock":
  317011.304 ±(99.9%) 8037.922 ops/s [Average]
  (min, avg, max) = (307401.146, 317011.304, 322443.759), stdev = 5316.588
  CI (99.9%): [308973.382, 325049.226] (assumes normal distribution)

Secondary result "getFairRWLock":
  158504.759 ±(99.9%) 4019.434 ops/s [Average]
  (min, avg, max) = (153699.518, 158504.759, 161221.806), stdev = 2658.606
  CI (99.9%): [154485.326, 162524.193] (assumes normal distribution)

Secondary result "incFairRWLock":
  158506.545 ±(99.9%) 4018.489 ops/s [Average]
  (min, avg, max) = (153701.628, 158506.545, 161221.953), stdev = 2657.981
  CI (99.9%): [154488.056, 162525.034] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 8304306.277 ops/s
# Warmup Iteration   2: 8683972.826 ops/s
# Warmup Iteration   3: 9722998.315 ops/s
# Warmup Iteration   4: 10094081.561 ops/s
# Warmup Iteration   5: 8860941.714 ops/s
Iteration   1: 9510291.765 ops/s
                 getNonFairRWLock: 7586103.916 ops/s
                 incNonFairRWLock: 1924187.850 ops/s

Iteration   2: 7668910.355 ops/s
                 getNonFairRWLock: 7415437.898 ops/s
                 incNonFairRWLock: 253472.457 ops/s

Iteration   3: 8937963.387 ops/s
                 getNonFairRWLock: 8634246.249 ops/s
                 incNonFairRWLock: 303717.138 ops/s

Iteration   4: 8683568.422 ops/s
                 getNonFairRWLock: 8217803.276 ops/s
                 incNonFairRWLock: 465765.146 ops/s

Iteration   5: 8195087.867 ops/s
                 getNonFairRWLock: 7873044.722 ops/s
                 incNonFairRWLock: 322043.144 ops/s

Iteration   6: 8929044.288 ops/s
                 getNonFairRWLock: 8901266.450 ops/s
                 incNonFairRWLock: 27777.838 ops/s

Iteration   7: 8073103.716 ops/s
                 getNonFairRWLock: 8043088.420 ops/s
                 incNonFairRWLock: 30015.297 ops/s

Iteration   8: 8372911.595 ops/s
                 getNonFairRWLock: 8345413.280 ops/s
                 incNonFairRWLock: 27498.315 ops/s

Iteration   9: 7161989.751 ops/s
                 getNonFairRWLock: 7149096.574 ops/s
                 incNonFairRWLock: 12893.176 ops/s

Iteration  10: 7706800.438 ops/s
                 getNonFairRWLock: 7328193.616 ops/s
                 incNonFairRWLock: 378606.822 ops/s



Result "incNonFairRWLock":
  8323967.158 ±(99.9%) 1071644.209 ops/s [Average]
  (min, avg, max) = (7161989.751, 8323967.158, 9510291.765), stdev = 708826.292
  CI (99.9%): [7252322.950, 9395611.367] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  7949369.440 ±(99.9%) 881847.807 ops/s [Average]
  (min, avg, max) = (7149096.574, 7949369.440, 8901266.450), stdev = 583287.724
  CI (99.9%): [7067521.634, 8831217.247] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  374597.718 ±(99.9%) 861499.836 ops/s [Average]
  (min, avg, max) = (12893.176, 374597.718, 1924187.850), stdev = 569828.801
  CI (99.9%): [≈ 0, 1236097.555] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:02:27
# Fork: 1 of 1
# Warmup Iteration   1: 314498.174 ops/s
# Warmup Iteration   2: 317601.887 ops/s
# Warmup Iteration   3: 315334.647 ops/s
# Warmup Iteration   4: 319149.798 ops/s
# Warmup Iteration   5: 312331.338 ops/s
Iteration   1: 319769.262 ops/s
                 getFairSemaphore: 159884.202 ops/s
                 incFairSemaphore: 159885.060 ops/s

Iteration   2: 321201.299 ops/s
                 getFairSemaphore: 160599.757 ops/s
                 incFairSemaphore: 160601.542 ops/s

Iteration   3: 319604.601 ops/s
                 getFairSemaphore: 159802.421 ops/s
                 incFairSemaphore: 159802.180 ops/s

Iteration   4: 316679.785 ops/s
                 getFairSemaphore: 158339.441 ops/s
                 incFairSemaphore: 158340.344 ops/s

Iteration   5: 319326.951 ops/s
                 getFairSemaphore: 159663.044 ops/s
                 incFairSemaphore: 159663.907 ops/s

Iteration   6: 311704.727 ops/s
                 getFairSemaphore: 155852.534 ops/s
                 incFairSemaphore: 155852.193 ops/s

Iteration   7: 309615.691 ops/s
                 getFairSemaphore: 154804.510 ops/s
                 incFairSemaphore: 154811.181 ops/s

Iteration   8: 325588.032 ops/s
                 getFairSemaphore: 162793.869 ops/s
                 incFairSemaphore: 162794.163 ops/s

Iteration   9: 326295.370 ops/s
                 getFairSemaphore: 163147.722 ops/s
                 incFairSemaphore: 163147.648 ops/s

Iteration  10: 322679.820 ops/s
                 getFairSemaphore: 161339.865 ops/s
                 incFairSemaphore: 161339.956 ops/s



Result "incFairSemaphore":
  319246.554 ±(99.9%) 8159.321 ops/s [Average]
  (min, avg, max) = (309615.691, 319246.554, 326295.370), stdev = 5396.886
  CI (99.9%): [311087.233, 327405.875] (assumes normal distribution)

Secondary result "getFairSemaphore":
  159622.737 ±(99.9%) 4080.570 ops/s [Average]
  (min, avg, max) = (154804.510, 159622.737, 163147.722), stdev = 2699.044
  CI (99.9%): [155542.167, 163703.306] (assumes normal distribution)

Secondary result "incFairSemaphore":
  159623.817 ±(99.9%) 4078.752 ops/s [Average]
  (min, avg, max) = (154811.181, 159623.817, 163147.648), stdev = 2697.842
  CI (99.9%): [155545.066, 163702.569] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 36901506.588 ops/s
# Warmup Iteration   2: 40849223.009 ops/s
# Warmup Iteration   3: 37351078.294 ops/s
# Warmup Iteration   4: 41179037.469 ops/s
# Warmup Iteration   5: 37729719.632 ops/s
Iteration   1: 39088284.340 ops/s
                 getNonFairSemaphore: 20335417.821 ops/s
                 incNonFairSemaphore: 18752866.518 ops/s

Iteration   2: 38280876.502 ops/s
                 getNonFairSemaphore: 19722611.636 ops/s
                 incNonFairSemaphore: 18558264.866 ops/s

Iteration   3: 37647697.860 ops/s
                 getNonFairSemaphore: 18424814.520 ops/s
                 incNonFairSemaphore: 19222883.339 ops/s

Iteration   4: 36986036.710 ops/s
                 getNonFairSemaphore: 19181293.631 ops/s
                 incNonFairSemaphore: 17804743.079 ops/s

Iteration   5: 37864400.426 ops/s
                 getNonFairSemaphore: 19089053.104 ops/s
                 incNonFairSemaphore: 18775347.322 ops/s

Iteration   6: 37718328.536 ops/s
                 getNonFairSemaphore: 18778396.418 ops/s
                 incNonFairSemaphore: 18939932.117 ops/s

Iteration   7: 37751316.730 ops/s
                 getNonFairSemaphore: 17673508.899 ops/s
                 incNonFairSemaphore: 20077807.830 ops/s

Iteration   8: 36900485.396 ops/s
                 getNonFairSemaphore: 18331558.830 ops/s
                 incNonFairSemaphore: 18568926.566 ops/s

Iteration   9: 37200283.855 ops/s
                 getNonFairSemaphore: 16481867.190 ops/s
                 incNonFairSemaphore: 20718416.665 ops/s

Iteration  10: 36100219.745 ops/s
                 getNonFairSemaphore: 16975535.854 ops/s
                 incNonFairSemaphore: 19124683.891 ops/s



Result "incNonFairSemaphore":
  37553793.010 ±(99.9%) 1238708.393 ops/s [Average]
  (min, avg, max) = (36100219.745, 37553793.010, 39088284.340), stdev = 819328.906
  CI (99.9%): [36315084.617, 38792501.403] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  18499405.791 ±(99.9%) 1807647.755 ops/s [Average]
  (min, avg, max) = (16481867.190, 18499405.791, 20335417.821), stdev = 1195647.068
  CI (99.9%): [16691758.035, 20307053.546] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  19054387.219 ±(99.9%) 1242118.976 ops/s [Average]
  (min, avg, max) = (17804743.079, 19054387.219, 20718416.665), stdev = 821584.796
  CI (99.9%): [17812268.243, 20296506.196] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:38
# Fork: 1 of 1
# Warmup Iteration   1: 47934014.002 ops/s
# Warmup Iteration   2: 51738021.059 ops/s
# Warmup Iteration   3: 53332142.908 ops/s
# Warmup Iteration   4: 52990246.195 ops/s
# Warmup Iteration   5: 53330882.355 ops/s
Iteration   1: 53749557.109 ops/s
                 getStamped: 14841.621 ops/s
                 incStamped: 53734715.488 ops/s

Iteration   2: 53205475.814 ops/s
                 getStamped: 16239.345 ops/s
                 incStamped: 53189236.468 ops/s

Iteration   3: 53055677.547 ops/s
                 getStamped: 14844.183 ops/s
                 incStamped: 53040833.364 ops/s

Iteration   4: 52974212.871 ops/s
                 getStamped: 17231.403 ops/s
                 incStamped: 52956981.468 ops/s

Iteration   5: 52687737.199 ops/s
                 getStamped: 15121.673 ops/s
                 incStamped: 52672615.527 ops/s

Iteration   6: 52264426.680 ops/s
                 getStamped: 21063.474 ops/s
                 incStamped: 52243363.205 ops/s

Iteration   7: 51378887.643 ops/s
                 getStamped: 23636.449 ops/s
                 incStamped: 51355251.194 ops/s

Iteration   8: 51832388.287 ops/s
                 getStamped: 21604.633 ops/s
                 incStamped: 51810783.654 ops/s

Iteration   9: 51165887.101 ops/s
                 getStamped: 25308.226 ops/s
                 incStamped: 51140578.875 ops/s

Iteration  10: 51743859.989 ops/s
                 getStamped: 22883.651 ops/s
                 incStamped: 51720976.337 ops/s



Result "incStamped":
  52405811.024 ±(99.9%) 1299471.639 ops/s [Average]
  (min, avg, max) = (51165887.101, 52405811.024, 53749557.109), stdev = 859520.031
  CI (99.9%): [51106339.385, 53705282.663] (assumes normal distribution)

Secondary result "getStamped":
  19277.466 ±(99.9%) 6110.074 ops/s [Average]
  (min, avg, max) = (14841.621, 19277.466, 25308.226), stdev = 4041.435
  CI (99.9%): [13167.392, 25387.539] (assumes normal distribution)

Secondary result "incStamped":
  52386533.558 ±(99.9%) 1305245.265 ops/s [Average]
  (min, avg, max) = (51140578.875, 52386533.558, 53734715.488), stdev = 863338.927
  CI (99.9%): [51081288.293, 53691778.823] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:17
# Fork: 1 of 1
# Warmup Iteration   1: 260453544.376 ops/s
# Warmup Iteration   2: 327700563.707 ops/s
# Warmup Iteration   3: 365678179.162 ops/s
# Warmup Iteration   4: 377820870.284 ops/s
# Warmup Iteration   5: 361662232.870 ops/s
Iteration   1: 294676371.389 ops/s
                 getOptimisticStamped: 275673793.378 ops/s
                 incOptimisticStamped: 19002578.010 ops/s

Iteration   2: 354916776.432 ops/s
                 getOptimisticStamped: 343338761.789 ops/s
                 incOptimisticStamped: 11578014.643 ops/s

Iteration   3: 385628200.451 ops/s
                 getOptimisticStamped: 378510293.880 ops/s
                 incOptimisticStamped: 7117906.572 ops/s

Iteration   4: 382245729.161 ops/s
                 getOptimisticStamped: 376749566.124 ops/s
                 incOptimisticStamped: 5496163.038 ops/s

Iteration   5: 385888237.431 ops/s
                 getOptimisticStamped: 380345850.538 ops/s
                 incOptimisticStamped: 5542386.893 ops/s

Iteration   6: 359879182.199 ops/s
                 getOptimisticStamped: 349390459.405 ops/s
                 incOptimisticStamped: 10488722.794 ops/s

Iteration   7: 378985884.313 ops/s
                 getOptimisticStamped: 371014983.184 ops/s
                 incOptimisticStamped: 7970901.129 ops/s

Iteration   8: 399583247.844 ops/s
                 getOptimisticStamped: 393751055.910 ops/s
                 incOptimisticStamped: 5832191.935 ops/s

Iteration   9: 363733898.655 ops/s
                 getOptimisticStamped: 355476216.379 ops/s
                 incOptimisticStamped: 8257682.276 ops/s

Iteration  10: 393558753.775 ops/s
                 getOptimisticStamped: 387480276.417 ops/s
                 incOptimisticStamped: 6078477.358 ops/s



Result "incOptimisticStamped":
  369909628.165 ±(99.9%) 45635752.588 ops/s [Average]
  (min, avg, max) = (294676371.389, 369909628.165, 399583247.844), stdev = 30185224.750
  CI (99.9%): [324273875.577, 415545380.753] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  361173125.700 ±(99.9%) 51788395.670 ops/s [Average]
  (min, avg, max) = (275673793.378, 361173125.700, 393751055.910), stdev = 34254817.201
  CI (99.9%): [309384730.030, 412961521.371] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  8736502.465 ±(99.9%) 6297879.947 ops/s [Average]
  (min, avg, max) = (5496163.038, 8736502.465, 19002578.010), stdev = 4165657.645
  CI (99.9%): [2438622.518, 15034382.411] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 32025025.617 ops/s
# Warmup Iteration   2: 33927289.237 ops/s
# Warmup Iteration   3: 29899497.428 ops/s
# Warmup Iteration   4: 30684824.702 ops/s
# Warmup Iteration   5: 31592586.931 ops/s
Iteration   1: 29989660.007 ops/s
                 getSynchronized: 15089727.252 ops/s
                 incSynchronized: 14899932.755 ops/s

Iteration   2: 30548386.042 ops/s
                 getSynchronized: 15708013.837 ops/s
                 incSynchronized: 14840372.206 ops/s

Iteration   3: 29759064.403 ops/s
                 getSynchronized: 14490995.221 ops/s
                 incSynchronized: 15268069.182 ops/s

Iteration   4: 31238281.390 ops/s
                 getSynchronized: 16407689.364 ops/s
                 incSynchronized: 14830592.027 ops/s

Iteration   5: 30222370.711 ops/s
                 getSynchronized: 13341209.412 ops/s
                 incSynchronized: 16881161.299 ops/s

Iteration   6: 30127554.314 ops/s
                 getSynchronized: 14299955.847 ops/s
                 incSynchronized: 15827598.467 ops/s

Iteration   7: 30239245.733 ops/s
                 getSynchronized: 13286556.366 ops/s
                 incSynchronized: 16952689.367 ops/s

Iteration   8: 31312661.576 ops/s
                 getSynchronized: 12562181.866 ops/s
                 incSynchronized: 18750479.710 ops/s

Iteration   9: 31309416.560 ops/s
                 getSynchronized: 14190567.716 ops/s
                 incSynchronized: 17118848.844 ops/s

Iteration  10: 30692475.427 ops/s
                 getSynchronized: 15127507.624 ops/s
                 incSynchronized: 15564967.803 ops/s



Result "incSynchronized":
  30543911.617 ±(99.9%) 869074.440 ops/s [Average]
  (min, avg, max) = (29759064.403, 30543911.617, 31312661.576), stdev = 574838.932
  CI (99.9%): [29674837.177, 31412986.056] (assumes normal distribution)

Secondary result "getSynchronized":
  14450440.450 ±(99.9%) 1783292.926 ops/s [Average]
  (min, avg, max) = (12562181.866, 14450440.450, 16407689.364), stdev = 1179537.856
  CI (99.9%): [12667147.524, 16233733.377] (assumes normal distribution)

Secondary result "incSynchronized":
  16093471.166 ±(99.9%) 1957694.852 ops/s [Average]
  (min, avg, max) = (14830592.027, 16093471.166, 18750479.710), stdev = 1294893.931
  CI (99.9%): [14135776.315, 18051166.018] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:38
# Fork: 1 of 1
# Warmup Iteration   1: 33157694.295 ops/s
# Warmup Iteration   2: 33031268.270 ops/s
# Warmup Iteration   3: 35425299.093 ops/s
# Warmup Iteration   4: 33796670.416 ops/s
# Warmup Iteration   5: 34791390.593 ops/s
Iteration   1: 35420727.302 ops/s
                 getSynchronizedMethod: 16218410.657 ops/s
                 incSynchronizedMethod: 19202316.644 ops/s

Iteration   2: 33215767.431 ops/s
                 getSynchronizedMethod: 16742701.095 ops/s
                 incSynchronizedMethod: 16473066.336 ops/s

Iteration   3: 35346816.933 ops/s
                 getSynchronizedMethod: 17853647.524 ops/s
                 incSynchronizedMethod: 17493169.409 ops/s

Iteration   4: 34283806.618 ops/s
                 getSynchronizedMethod: 17236169.114 ops/s
                 incSynchronizedMethod: 17047637.504 ops/s

Iteration   5: 35556921.029 ops/s
                 getSynchronizedMethod: 15718159.244 ops/s
                 incSynchronizedMethod: 19838761.785 ops/s

Iteration   6: 35822846.582 ops/s
                 getSynchronizedMethod: 18846808.273 ops/s
                 incSynchronizedMethod: 16976038.309 ops/s

Iteration   7: 35248606.070 ops/s
                 getSynchronizedMethod: 17429509.067 ops/s
                 incSynchronizedMethod: 17819097.003 ops/s

Iteration   8: 34723198.117 ops/s
                 getSynchronizedMethod: 19414158.897 ops/s
                 incSynchronizedMethod: 15309039.220 ops/s

Iteration   9: 34817717.293 ops/s
                 getSynchronizedMethod: 16275061.731 ops/s
                 incSynchronizedMethod: 18542655.562 ops/s

Iteration  10: 33967710.235 ops/s
                 getSynchronizedMethod: 19370981.581 ops/s
                 incSynchronizedMethod: 14596728.654 ops/s



Result "incSynchronizedMethod":
  34840411.761 ±(99.9%) 1230669.920 ops/s [Average]
  (min, avg, max) = (33215767.431, 34840411.761, 35822846.582), stdev = 814011.954
  CI (99.9%): [33609741.841, 36071081.681] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  17510560.718 ±(99.9%) 2020113.877 ops/s [Average]
  (min, avg, max) = (15718159.244, 17510560.718, 19414158.897), stdev = 1336180.252
  CI (99.9%): [15490446.842, 19530674.595] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  17329851.043 ±(99.9%) 2470407.337 ops/s [Average]
  (min, avg, max) = (14596728.654, 17329851.043, 19838761.785), stdev = 1634021.495
  CI (99.9%): [14859443.706, 19800258.379] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 128 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 139337224.354 ops/s
# Warmup Iteration   2: 153352310.083 ops/s
# Warmup Iteration   3: 165340933.758 ops/s
# Warmup Iteration   4: 146615667.810 ops/s
# Warmup Iteration   5: 149755438.072 ops/s
Iteration   1: 142269648.541 ops/s
                 getVolatile: 99990293.785 ops/s
                 incVolatile: 42279354.756 ops/s

Iteration   2: 148587648.870 ops/s
                 getVolatile: 106343957.118 ops/s
                 incVolatile: 42243691.752 ops/s

Iteration   3: 179139972.227 ops/s
                 getVolatile: 138818010.114 ops/s
                 incVolatile: 40321962.113 ops/s

Iteration   4: 148464618.452 ops/s
                 getVolatile: 107446467.999 ops/s
                 incVolatile: 41018150.453 ops/s

Iteration   5: 153983138.220 ops/s
                 getVolatile: 113239559.055 ops/s
                 incVolatile: 40743579.165 ops/s

Iteration   6: 160373655.287 ops/s
                 getVolatile: 119282162.885 ops/s
                 incVolatile: 41091492.402 ops/s

Iteration   7: 148894800.615 ops/s
                 getVolatile: 106966705.289 ops/s
                 incVolatile: 41928095.326 ops/s

Iteration   8: 148049299.518 ops/s
                 getVolatile: 106546993.726 ops/s
                 incVolatile: 41502305.793 ops/s

Iteration   9: 155832353.494 ops/s
                 getVolatile: 114063426.318 ops/s
                 incVolatile: 41768927.177 ops/s

Iteration  10: 155106791.470 ops/s
                 getVolatile: 113952657.822 ops/s
                 incVolatile: 41154133.647 ops/s



Result "incVolatile":
  154070192.669 ±(99.9%) 15419497.178 ops/s [Average]
  (min, avg, max) = (142269648.541, 154070192.669, 179139972.227), stdev = 10199042.668
  CI (99.9%): [138650695.491, 169489689.848] (assumes normal distribution)

Secondary result "getVolatile":
  112665023.411 ±(99.9%) 16169319.666 ops/s [Average]
  (min, avg, max) = (99990293.785, 112665023.411, 138818010.114), stdev = 10695003.818
  CI (99.9%): [96495703.745, 128834343.077] (assumes normal distribution)

Secondary result "incVolatile":
  41405169.258 ±(99.9%) 982999.503 ops/s [Average]
  (min, avg, max) = (40321962.113, 41405169.258, 42279354.756), stdev = 650193.307
  CI (99.9%): [40422169.756, 42388168.761] (assumes normal distribution)


# Run complete. Total time: 00:04:17

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  143641526.663 ±  5835929.074  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   56010989.937 ±  2186951.946  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   87630536.726 ±  4237929.128  ops/s
CounterBenchmark.Atomic                                    thrpt   10  122163648.526 ± 10999109.229  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   85702710.085 ± 11815993.614  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   36460938.442 ±  1336829.838  ops/s
CounterBenchmark.LockFair                                  thrpt   10     318585.303 ±     8163.792  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     159288.877 ±     4094.020  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     159296.426 ±     4069.775  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   46639615.071 ±  1192115.754  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   20273368.106 ±  1600149.326  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   26366246.965 ±  2036789.219  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     317011.304 ±     8037.922  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     158504.759 ±     4019.434  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     158506.545 ±     4018.489  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10    8323967.158 ±  1071644.209  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    7949369.440 ±   881847.807  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10     374597.718 ±   861499.836  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     319246.554 ±     8159.321  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     159622.737 ±     4080.570  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     159623.817 ±     4078.752  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   37553793.010 ±  1238708.393  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   18499405.791 ±  1807647.755  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   19054387.219 ±  1242118.976  ops/s
CounterBenchmark.Stamped                                   thrpt   10   52405811.024 ±  1299471.639  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10      19277.466 ±     6110.074  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   52386533.558 ±  1305245.265  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  369909628.165 ± 45635752.588  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  361173125.700 ± 51788395.670  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10    8736502.465 ±  6297879.947  ops/s
CounterBenchmark.Synchronized                              thrpt   10   30543911.617 ±   869074.440  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   14450440.450 ±  1783292.926  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   16093471.166 ±  1957694.852  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   34840411.761 ±  1230669.920  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   17510560.718 ±  2020113.877  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   17329851.043 ±  2470407.337  ops/s
CounterBenchmark.Volatile                                  thrpt   10  154070192.669 ± 15419497.178  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  112665023.411 ± 16169319.666  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   41405169.258 ±   982999.503  ops/s

Benchmark result is saved to ./counters/results/results-64-64.csv
Running benchmarks with thread group distribution: 128,128
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 132836866.305 ops/s
# Warmup Iteration   2: 162255638.480 ops/s
# Warmup Iteration   3: 151048193.271 ops/s
# Warmup Iteration   4: 158791700.558 ops/s
# Warmup Iteration   5: 160175732.810 ops/s
Iteration   1: 164469170.045 ops/s
                 getAdder: 69713931.794 ops/s
                 incAdder: 94755238.251 ops/s

Iteration   2: 159264718.934 ops/s
                 getAdder: 67393209.506 ops/s
                 incAdder: 91871509.427 ops/s

Iteration   3: 168478322.519 ops/s
                 getAdder: 71494005.288 ops/s
                 incAdder: 96984317.231 ops/s

Iteration   4: 158854046.754 ops/s
                 getAdder: 65962906.694 ops/s
                 incAdder: 92891140.060 ops/s

Iteration   5: 160706603.285 ops/s
                 getAdder: 67001851.200 ops/s
                 incAdder: 93704752.085 ops/s

Iteration   6: 151567354.292 ops/s
                 getAdder: 63172917.352 ops/s
                 incAdder: 88394436.939 ops/s

Iteration   7: 160939762.267 ops/s
                 getAdder: 66811171.422 ops/s
                 incAdder: 94128590.845 ops/s

Iteration   8: 160124641.866 ops/s
                 getAdder: 69119469.431 ops/s
                 incAdder: 91005172.435 ops/s

Iteration   9: 160422103.667 ops/s
                 getAdder: 65974619.582 ops/s
                 incAdder: 94447484.084 ops/s

Iteration  10: 158898073.093 ops/s
                 getAdder: 67005170.653 ops/s
                 incAdder: 91892902.440 ops/s



Result "getAdder":
  160372479.672 ±(99.9%) 6497308.764 ops/s [Average]
  (min, avg, max) = (151567354.292, 160372479.672, 168478322.519), stdev = 4297567.460
  CI (99.9%): [153875170.908, 166869788.436] (assumes normal distribution)

Secondary result "getAdder":
  67364925.292 ±(99.9%) 3480038.226 ops/s [Average]
  (min, avg, max) = (63172917.352, 67364925.292, 71494005.288), stdev = 2301829.816
  CI (99.9%): [63884887.066, 70844963.518] (assumes normal distribution)

Secondary result "incAdder":
  93007554.380 ±(99.9%) 3582043.147 ops/s [Average]
  (min, avg, max) = (88394436.939, 93007554.380, 96984317.231), stdev = 2369299.756
  CI (99.9%): [89425511.233, 96589597.527] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:08:30
# Fork: 1 of 1
# Warmup Iteration   1: 250931629.111 ops/s
# Warmup Iteration   2: 139360054.974 ops/s
# Warmup Iteration   3: 135407097.549 ops/s
# Warmup Iteration   4: 144182143.862 ops/s
# Warmup Iteration   5: 151491262.464 ops/s
Iteration   1: 130611985.892 ops/s
                 getAtomic: 91949630.084 ops/s
                 incAtomic: 38662355.808 ops/s

Iteration   2: 155987998.698 ops/s
                 getAtomic: 118693030.898 ops/s
                 incAtomic: 37294967.800 ops/s

Iteration   3: 137709408.566 ops/s
                 getAtomic: 99164732.581 ops/s
                 incAtomic: 38544675.985 ops/s

Iteration   4: 150595414.620 ops/s
                 getAtomic: 112322734.716 ops/s
                 incAtomic: 38272679.904 ops/s

Iteration   5: 131810396.184 ops/s
                 getAtomic: 91816315.237 ops/s
                 incAtomic: 39994080.947 ops/s

Iteration   6: 169164051.843 ops/s
                 getAtomic: 131959820.835 ops/s
                 incAtomic: 37204231.008 ops/s

Iteration   7: 142088862.293 ops/s
                 getAtomic: 103814135.124 ops/s
                 incAtomic: 38274727.169 ops/s

Iteration   8: 139473217.881 ops/s
                 getAtomic: 101119914.588 ops/s
                 incAtomic: 38353303.293 ops/s

Iteration   9: 145514589.002 ops/s
                 getAtomic: 106454168.007 ops/s
                 incAtomic: 39060420.996 ops/s

Iteration  10: 143392440.810 ops/s
                 getAtomic: 103977234.120 ops/s
                 incAtomic: 39415206.690 ops/s



Result "getAtomic":
  144634836.579 ±(99.9%) 17534468.294 ops/s [Average]
  (min, avg, max) = (130611985.892, 144634836.579, 169164051.843), stdev = 11597965.111
  CI (99.9%): [127100368.285, 162169304.873] (assumes normal distribution)

Secondary result "getAtomic":
  106127171.619 ±(99.9%) 18537247.339 ops/s [Average]
  (min, avg, max) = (91816315.237, 106127171.619, 131959820.835), stdev = 12261241.361
  CI (99.9%): [87589924.280, 124664418.958] (assumes normal distribution)

Secondary result "incAtomic":
  38507664.960 ±(99.9%) 1301210.924 ops/s [Average]
  (min, avg, max) = (37204231.008, 38507664.960, 39994080.947), stdev = 860670.460
  CI (99.9%): [37206454.036, 39808875.884] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:07:42
# Fork: 1 of 1
# Warmup Iteration   1: 280493.518 ops/s
# Warmup Iteration   2: 274649.794 ops/s
# Warmup Iteration   3: 280610.522 ops/s
# Warmup Iteration   4: 273611.136 ops/s
# Warmup Iteration   5: 284457.038 ops/s
Iteration   1: 271733.438 ops/s
                 getFairLock: 135866.205 ops/s
                 incFairLock: 135867.233 ops/s

Iteration   2: 287572.910 ops/s
                 getFairLock: 143786.331 ops/s
                 incFairLock: 143786.579 ops/s

Iteration   3: 288133.384 ops/s
                 getFairLock: 144065.415 ops/s
                 incFairLock: 144067.969 ops/s

Iteration   4: 284770.257 ops/s
                 getFairLock: 142385.126 ops/s
                 incFairLock: 142385.131 ops/s

Iteration   5: 282562.905 ops/s
                 getFairLock: 141280.629 ops/s
                 incFairLock: 141282.276 ops/s

Iteration   6: 283403.939 ops/s
                 getFairLock: 141701.440 ops/s
                 incFairLock: 141702.499 ops/s

Iteration   7: 282196.246 ops/s
                 getFairLock: 141093.448 ops/s
                 incFairLock: 141102.798 ops/s

Iteration   8: 281506.558 ops/s
                 getFairLock: 140751.869 ops/s
                 incFairLock: 140754.689 ops/s

Iteration   9: 283780.058 ops/s
                 getFairLock: 141890.360 ops/s
                 incFairLock: 141889.697 ops/s

Iteration  10: 283716.078 ops/s
                 getFairLock: 141858.036 ops/s
                 incFairLock: 141858.042 ops/s



Result "getFairLock":
  282937.577 ±(99.9%) 6792.061 ops/s [Average]
  (min, avg, max) = (271733.438, 282937.577, 288133.384), stdev = 4492.528
  CI (99.9%): [276145.516, 289729.639] (assumes normal distribution)

Secondary result "getFairLock":
  141467.886 ±(99.9%) 3396.195 ops/s [Average]
  (min, avg, max) = (135866.205, 141467.886, 144065.415), stdev = 2246.372
  CI (99.9%): [138071.691, 144864.080] (assumes normal distribution)

Secondary result "incFairLock":
  141469.691 ±(99.9%) 3395.868 ops/s [Average]
  (min, avg, max) = (135867.233, 141469.691, 144067.969), stdev = 2246.157
  CI (99.9%): [138073.823, 144865.560] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:05:32
# Fork: 1 of 1
# Warmup Iteration   1: 46528618.076 ops/s
# Warmup Iteration   2: 39717712.992 ops/s
# Warmup Iteration   3: 48241708.365 ops/s
# Warmup Iteration   4: 48577457.888 ops/s
# Warmup Iteration   5: 46608961.287 ops/s
Iteration   1: 48468079.199 ops/s
                 getNonFairLock: 21727711.608 ops/s
                 incNonFairLock: 26740367.590 ops/s

Iteration   2: 48841866.752 ops/s
                 getNonFairLock: 20519476.510 ops/s
                 incNonFairLock: 28322390.242 ops/s

Iteration   3: 48415712.785 ops/s
                 getNonFairLock: 20482091.328 ops/s
                 incNonFairLock: 27933621.458 ops/s

Iteration   4: 48524308.901 ops/s
                 getNonFairLock: 21656719.551 ops/s
                 incNonFairLock: 26867589.351 ops/s

Iteration   5: 48168221.696 ops/s
                 getNonFairLock: 21913815.899 ops/s
                 incNonFairLock: 26254405.797 ops/s

Iteration   6: 48378085.343 ops/s
                 getNonFairLock: 21193922.827 ops/s
                 incNonFairLock: 27184162.516 ops/s

Iteration   7: 48131970.394 ops/s
                 getNonFairLock: 21654039.907 ops/s
                 incNonFairLock: 26477930.487 ops/s

Iteration   8: 49334323.749 ops/s
                 getNonFairLock: 20763915.581 ops/s
                 incNonFairLock: 28570408.168 ops/s

Iteration   9: 48551925.736 ops/s
                 getNonFairLock: 23891080.983 ops/s
                 incNonFairLock: 24660844.753 ops/s

Iteration  10: 48372222.335 ops/s
                 getNonFairLock: 22735614.708 ops/s
                 incNonFairLock: 25636607.628 ops/s



Result "getNonFairLock":
  48518671.689 ±(99.9%) 527974.326 ops/s [Average]
  (min, avg, max) = (48131970.394, 48518671.689, 49334323.749), stdev = 349222.326
  CI (99.9%): [47990697.363, 49046646.015] (assumes normal distribution)

Secondary result "getNonFairLock":
  21653838.890 ±(99.9%) 1586594.126 ops/s [Average]
  (min, avg, max) = (20482091.328, 21653838.890, 23891080.983), stdev = 1049433.779
  CI (99.9%): [20067244.764, 23240433.016] (assumes normal distribution)

Secondary result "incNonFairLock":
  26864832.799 ±(99.9%) 1829677.434 ops/s [Average]
  (min, avg, max) = (24660844.753, 26864832.799, 28570408.168), stdev = 1210218.336
  CI (99.9%): [25035155.365, 28694510.233] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:04:21
# Fork: 1 of 1
# Warmup Iteration   1: 258457.781 ops/s
# Warmup Iteration   2: 266468.581 ops/s
# Warmup Iteration   3: 278762.567 ops/s
# Warmup Iteration   4: 268176.793 ops/s
# Warmup Iteration   5: 270030.862 ops/s
Iteration   1: 268456.069 ops/s
                 getFairRWLock: 134226.677 ops/s
                 incFairRWLock: 134229.392 ops/s

Iteration   2: 283310.713 ops/s
                 getFairRWLock: 141657.085 ops/s
                 incFairRWLock: 141653.629 ops/s

Iteration   3: 282696.898 ops/s
                 getFairRWLock: 141348.296 ops/s
                 incFairRWLock: 141348.602 ops/s

Iteration   4: 278090.708 ops/s
                 getFairRWLock: 139045.249 ops/s
                 incFairRWLock: 139045.458 ops/s

Iteration   5: 281718.574 ops/s
                 getFairRWLock: 140859.081 ops/s
                 incFairRWLock: 140859.492 ops/s

Iteration   6: 285517.946 ops/s
                 getFairRWLock: 142758.855 ops/s
                 incFairRWLock: 142759.091 ops/s

Iteration   7: 274590.128 ops/s
                 getFairRWLock: 137294.130 ops/s
                 incFairRWLock: 137295.998 ops/s

Iteration   8: 284265.603 ops/s
                 getFairRWLock: 142131.516 ops/s
                 incFairRWLock: 142134.087 ops/s

Iteration   9: 282859.372 ops/s
                 getFairRWLock: 141429.625 ops/s
                 incFairRWLock: 141429.747 ops/s

Iteration  10: 285140.583 ops/s
                 getFairRWLock: 142569.657 ops/s
                 incFairRWLock: 142570.926 ops/s



Result "getFairRWLock":
  280664.659 ±(99.9%) 8222.135 ops/s [Average]
  (min, avg, max) = (268456.069, 280664.659, 285517.946), stdev = 5438.433
  CI (99.9%): [272442.524, 288886.794] (assumes normal distribution)

Secondary result "getFairRWLock":
  140332.017 ±(99.9%) 4111.635 ops/s [Average]
  (min, avg, max) = (134226.677, 140332.017, 142758.855), stdev = 2719.592
  CI (99.9%): [136220.382, 144443.652] (assumes normal distribution)

Secondary result "incFairRWLock":
  140332.642 ±(99.9%) 4110.500 ops/s [Average]
  (min, avg, max) = (134229.392, 140332.642, 142759.091), stdev = 2718.841
  CI (99.9%): [136222.142, 144443.142] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 9248809.733 ops/s
# Warmup Iteration   2: 9136879.685 ops/s
# Warmup Iteration   3: 12798707.759 ops/s
# Warmup Iteration   4: 7724827.614 ops/s
# Warmup Iteration   5: 8986636.067 ops/s
Iteration   1: 9227660.395 ops/s
                 getNonFairRWLock: 9181298.859 ops/s
                 incNonFairRWLock: 46361.536 ops/s

Iteration   2: 8712521.232 ops/s
                 getNonFairRWLock: 7960080.343 ops/s
                 incNonFairRWLock: 752440.889 ops/s

Iteration   3: 11109304.496 ops/s
                 getNonFairRWLock: 10757721.518 ops/s
                 incNonFairRWLock: 351582.978 ops/s

Iteration   4: 567735355.219 ops/s
                 getNonFairRWLock: 32095038.797 ops/s
                 incNonFairRWLock: 535640316.422 ops/s

Iteration   5: 499226918.977 ops/s
                 getNonFairRWLock: 27966370.445 ops/s
                 incNonFairRWLock: 471260548.532 ops/s

Iteration   6: 5923729.904 ops/s
                 getNonFairRWLock: 5685125.335 ops/s
                 incNonFairRWLock: 238604.569 ops/s

Iteration   7: 7331780.815 ops/s
                 getNonFairRWLock: 7318078.975 ops/s
                 incNonFairRWLock: 13701.840 ops/s

Iteration   8: 9940897.980 ops/s
                 getNonFairRWLock: 9914921.205 ops/s
                 incNonFairRWLock: 25976.775 ops/s

Iteration   9: 8372096.030 ops/s
                 getNonFairRWLock: 8085712.845 ops/s
                 incNonFairRWLock: 286383.186 ops/s

Iteration  10: 9771319.756 ops/s
                 getNonFairRWLock: 8122116.533 ops/s
                 incNonFairRWLock: 1649203.223 ops/s



Result "getNonFairRWLock":
  113735158.481 ±(99.9%) 335358214.201 ops/s [Average]
  (min, avg, max) = (5923729.904, 113735158.481, 567735355.219), stdev = 221818694.624
  CI (99.9%): [≈ 0, 449093372.681] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  12708646.486 ±(99.9%) 14038745.994 ops/s [Average]
  (min, avg, max) = (5685125.335, 12708646.486, 32095038.797), stdev = 9285761.251
  CI (99.9%): [≈ 0, 26747392.480] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  101026511.995 ±(99.9%) 321479408.946 ops/s [Average]
  (min, avg, max) = (13701.840, 101026511.995, 535640316.422), stdev = 212638724.269
  CI (99.9%): [≈ 0, 422505920.941] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:03:18
# Fork: 1 of 1
# Warmup Iteration   1: 272616.452 ops/s
# Warmup Iteration   2: 274526.241 ops/s
# Warmup Iteration   3: 284880.664 ops/s
# Warmup Iteration   4: 278251.960 ops/s
# Warmup Iteration   5: 288883.691 ops/s
Iteration   1: 285556.300 ops/s
                 getFairSemaphore: 142776.543 ops/s
                 incFairSemaphore: 142779.757 ops/s

Iteration   2: 287744.415 ops/s
                 getFairSemaphore: 143869.008 ops/s
                 incFairSemaphore: 143875.408 ops/s

Iteration   3: 283230.320 ops/s
                 getFairSemaphore: 141608.093 ops/s
                 incFairSemaphore: 141622.227 ops/s

Iteration   4: 282845.508 ops/s
                 getFairSemaphore: 141422.724 ops/s
                 incFairSemaphore: 141422.784 ops/s

Iteration   5: 284071.442 ops/s
                 getFairSemaphore: 142035.819 ops/s
                 incFairSemaphore: 142035.623 ops/s

Iteration   6: 284672.088 ops/s
                 getFairSemaphore: 142334.865 ops/s
                 incFairSemaphore: 142337.223 ops/s

Iteration   7: 289457.987 ops/s
                 getFairSemaphore: 144720.036 ops/s
                 incFairSemaphore: 144737.951 ops/s

Iteration   8: 283313.152 ops/s
                 getFairSemaphore: 141656.370 ops/s
                 incFairSemaphore: 141656.783 ops/s

Iteration   9: 281035.773 ops/s
                 getFairSemaphore: 140508.878 ops/s
                 incFairSemaphore: 140526.895 ops/s

Iteration  10: 288729.495 ops/s
                 getFairSemaphore: 144364.580 ops/s
                 incFairSemaphore: 144364.915 ops/s



Result "getFairSemaphore":
  285065.648 ±(99.9%) 4182.650 ops/s [Average]
  (min, avg, max) = (281035.773, 285065.648, 289457.987), stdev = 2766.564
  CI (99.9%): [280882.998, 289248.298] (assumes normal distribution)

Secondary result "getFairSemaphore":
  142529.692 ±(99.9%) 2091.378 ops/s [Average]
  (min, avg, max) = (140508.878, 142529.692, 144720.036), stdev = 1383.317
  CI (99.9%): [140438.313, 144621.070] (assumes normal distribution)

Secondary result "incFairSemaphore":
  142535.956 ±(99.9%) 2091.287 ops/s [Average]
  (min, avg, max) = (140526.895, 142535.956, 144737.951), stdev = 1383.257
  CI (99.9%): [140444.669, 144627.243] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 37492373.846 ops/s
# Warmup Iteration   2: 37425049.587 ops/s
# Warmup Iteration   3: 39633577.913 ops/s
# Warmup Iteration   4: 37278836.257 ops/s
# Warmup Iteration   5: 37622637.457 ops/s
Iteration   1: 38928637.698 ops/s
                 getNonFairSemaphore: 19516895.816 ops/s
                 incNonFairSemaphore: 19411741.882 ops/s

Iteration   2: 38944425.188 ops/s
                 getNonFairSemaphore: 18374870.776 ops/s
                 incNonFairSemaphore: 20569554.412 ops/s

Iteration   3: 38012347.575 ops/s
                 getNonFairSemaphore: 19353065.606 ops/s
                 incNonFairSemaphore: 18659281.969 ops/s

Iteration   4: 38064728.745 ops/s
                 getNonFairSemaphore: 20257197.273 ops/s
                 incNonFairSemaphore: 17807531.472 ops/s

Iteration   5: 38393831.477 ops/s
                 getNonFairSemaphore: 19954673.873 ops/s
                 incNonFairSemaphore: 18439157.603 ops/s

Iteration   6: 37201278.863 ops/s
                 getNonFairSemaphore: 17097562.094 ops/s
                 incNonFairSemaphore: 20103716.770 ops/s

Iteration   7: 38418956.165 ops/s
                 getNonFairSemaphore: 18158973.334 ops/s
                 incNonFairSemaphore: 20259982.831 ops/s

Iteration   8: 38384637.616 ops/s
                 getNonFairSemaphore: 17033572.676 ops/s
                 incNonFairSemaphore: 21351064.939 ops/s

Iteration   9: 38756210.074 ops/s
                 getNonFairSemaphore: 19910541.390 ops/s
                 incNonFairSemaphore: 18845668.684 ops/s

Iteration  10: 38007511.913 ops/s
                 getNonFairSemaphore: 19946161.172 ops/s
                 incNonFairSemaphore: 18061350.741 ops/s



Result "getNonFairSemaphore":
  38311256.531 ±(99.9%) 793350.161 ops/s [Average]
  (min, avg, max) = (37201278.863, 38311256.531, 38944425.188), stdev = 524752.011
  CI (99.9%): [37517906.370, 39104606.693] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  18960351.401 ±(99.9%) 1829325.758 ops/s [Average]
  (min, avg, max) = (17033572.676, 18960351.401, 20257197.273), stdev = 1209985.724
  CI (99.9%): [17131025.643, 20789677.159] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  19350905.130 ±(99.9%) 1781201.819 ops/s [Average]
  (min, avg, max) = (17807531.472, 19350905.130, 21351064.939), stdev = 1178154.718
  CI (99.9%): [17569703.311, 21132106.950] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 49803221.074 ops/s
# Warmup Iteration   2: 53164363.397 ops/s
# Warmup Iteration   3: 53459019.339 ops/s
# Warmup Iteration   4: 54766225.395 ops/s
# Warmup Iteration   5: 54037635.350 ops/s
Iteration   1: 54058519.331 ops/s
                 getStamped: 10737.261 ops/s
                 incStamped: 54047782.070 ops/s

Iteration   2: 53670353.916 ops/s
                 getStamped: 14009.410 ops/s
                 incStamped: 53656344.506 ops/s

Iteration   3: 53462998.157 ops/s
                 getStamped: 13228.369 ops/s
                 incStamped: 53449769.788 ops/s

Iteration   4: 53091593.908 ops/s
                 getStamped: 17254.480 ops/s
                 incStamped: 53074339.428 ops/s

Iteration   5: 53112880.863 ops/s
                 getStamped: 17110.781 ops/s
                 incStamped: 53095770.082 ops/s

Iteration   6: 51767109.328 ops/s
                 getStamped: 19650.966 ops/s
                 incStamped: 51747458.362 ops/s

Iteration   7: 51246045.342 ops/s
                 getStamped: 18535.374 ops/s
                 incStamped: 51227509.968 ops/s

Iteration   8: 52090348.206 ops/s
                 getStamped: 20584.101 ops/s
                 incStamped: 52069764.105 ops/s

Iteration   9: 52511027.325 ops/s
                 getStamped: 17658.332 ops/s
                 incStamped: 52493368.992 ops/s

Iteration  10: 52912024.547 ops/s
                 getStamped: 17855.171 ops/s
                 incStamped: 52894169.376 ops/s



Result "getStamped":
  52792290.092 ±(99.9%) 1337571.697 ops/s [Average]
  (min, avg, max) = (51246045.342, 52792290.092, 54058519.331), stdev = 884720.861
  CI (99.9%): [51454718.395, 54129861.790] (assumes normal distribution)

Secondary result "getStamped":
  16662.425 ±(99.9%) 4638.654 ops/s [Average]
  (min, avg, max) = (10737.261, 16662.425, 20584.101), stdev = 3068.182
  CI (99.9%): [12023.771, 21301.078] (assumes normal distribution)

Secondary result "incStamped":
  52775627.668 ±(99.9%) 1341497.572 ops/s [Average]
  (min, avg, max) = (51227509.968, 52775627.668, 54047782.070), stdev = 887317.584
  CI (99.9%): [51434130.095, 54117125.240] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 261098822.655 ops/s
# Warmup Iteration   2: 348753772.577 ops/s
# Warmup Iteration   3: 408955007.540 ops/s
# Warmup Iteration   4: 426213093.153 ops/s
# Warmup Iteration   5: 348870438.499 ops/s
Iteration   1: 405974187.880 ops/s
                 getOptimisticStamped: 399914956.599 ops/s
                 incOptimisticStamped: 6059231.280 ops/s

Iteration   2: 461705592.660 ops/s
                 getOptimisticStamped: 457530840.842 ops/s
                 incOptimisticStamped: 4174751.818 ops/s

Iteration   3: 448024611.709 ops/s
                 getOptimisticStamped: 444786200.000 ops/s
                 incOptimisticStamped: 3238411.709 ops/s

Iteration   4: 415663298.083 ops/s
                 getOptimisticStamped: 411756335.560 ops/s
                 incOptimisticStamped: 3906962.523 ops/s

Iteration   5: 423021151.287 ops/s
                 getOptimisticStamped: 417441274.502 ops/s
                 incOptimisticStamped: 5579876.784 ops/s

Iteration   6: 437887471.341 ops/s
                 getOptimisticStamped: 433096312.950 ops/s
                 incOptimisticStamped: 4791158.391 ops/s

Iteration   7: 344336938.338 ops/s
                 getOptimisticStamped: 330771206.909 ops/s
                 incOptimisticStamped: 13565731.429 ops/s

Iteration   8: 424339780.883 ops/s
                 getOptimisticStamped: 421017514.392 ops/s
                 incOptimisticStamped: 3322266.491 ops/s

Iteration   9: 393010557.736 ops/s
                 getOptimisticStamped: 383533193.480 ops/s
                 incOptimisticStamped: 9477364.256 ops/s

Iteration  10: 439888942.296 ops/s
                 getOptimisticStamped: 434714661.417 ops/s
                 incOptimisticStamped: 5174280.879 ops/s



Result "getOptimisticStamped":
  419385253.221 ±(99.9%) 50226914.897 ops/s [Average]
  (min, avg, max) = (344336938.338, 419385253.221, 461705592.660), stdev = 33221994.350
  CI (99.9%): [369158338.324, 469612168.118] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  413456249.665 ±(99.9%) 54634818.803 ops/s [Average]
  (min, avg, max) = (330771206.909, 413456249.665, 457530840.842), stdev = 36137549.864
  CI (99.9%): [358821430.862, 468091068.469] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  5929003.556 ±(99.9%) 4888962.932 ops/s [Average]
  (min, avg, max) = (3238411.709, 5929003.556, 13565731.429), stdev = 3233746.274
  CI (99.9%): [1040040.624, 10817966.488] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: 29889386.395 ops/s
# Warmup Iteration   2: 31673161.824 ops/s
# Warmup Iteration   3: 27444035.396 ops/s
# Warmup Iteration   4: 30730314.156 ops/s
# Warmup Iteration   5: 29127702.299 ops/s
Iteration   1: 28804785.034 ops/s
                 getSynchronized: 15070289.037 ops/s
                 incSynchronized: 13734495.997 ops/s

Iteration   2: 29320383.474 ops/s
                 getSynchronized: 15834853.520 ops/s
                 incSynchronized: 13485529.954 ops/s

Iteration   3: 29637199.843 ops/s
                 getSynchronized: 15275549.593 ops/s
                 incSynchronized: 14361650.250 ops/s

Iteration   4: 30120176.024 ops/s
                 getSynchronized: 13926978.892 ops/s
                 incSynchronized: 16193197.133 ops/s

Iteration   5: 32041477.871 ops/s
                 getSynchronized: 14982402.597 ops/s
                 incSynchronized: 17059075.273 ops/s

Iteration   6: 29630246.931 ops/s
                 getSynchronized: 14913337.593 ops/s
                 incSynchronized: 14716909.338 ops/s

Iteration   7: 31324238.029 ops/s
                 getSynchronized: 13312857.509 ops/s
                 incSynchronized: 18011380.520 ops/s

Iteration   8: 29554489.426 ops/s
                 getSynchronized: 15102643.698 ops/s
                 incSynchronized: 14451845.728 ops/s

Iteration   9: 29513636.701 ops/s
                 getSynchronized: 16096864.138 ops/s
                 incSynchronized: 13416772.563 ops/s

Iteration  10: 29910663.362 ops/s
                 getSynchronized: 13670729.640 ops/s
                 incSynchronized: 16239933.722 ops/s



Result "getSynchronized":
  29985729.670 ±(99.9%) 1472318.650 ops/s [Average]
  (min, avg, max) = (28804785.034, 29985729.670, 32041477.871), stdev = 973847.626
  CI (99.9%): [28513411.020, 31458048.319] (assumes normal distribution)

Secondary result "getSynchronized":
  14818650.622 ±(99.9%) 1374157.615 ops/s [Average]
  (min, avg, max) = (13312857.509, 14818650.622, 16096864.138), stdev = 908920.180
  CI (99.9%): [13444493.007, 16192808.236] (assumes normal distribution)

Secondary result "incSynchronized":
  15167079.048 ±(99.9%) 2426311.825 ops/s [Average]
  (min, avg, max) = (13416772.563, 15167079.048, 18011380.520), stdev = 1604855.044
  CI (99.9%): [12740767.223, 17593390.873] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 32845638.646 ops/s
# Warmup Iteration   2: 33618091.874 ops/s
# Warmup Iteration   3: 31375960.701 ops/s
# Warmup Iteration   4: 35190414.348 ops/s
# Warmup Iteration   5: 33586355.722 ops/s
Iteration   1: 34765849.125 ops/s
                 getSynchronizedMethod: 15637081.291 ops/s
                 incSynchronizedMethod: 19128767.834 ops/s

Iteration   2: 35681073.884 ops/s
                 getSynchronizedMethod: 18222737.818 ops/s
                 incSynchronizedMethod: 17458336.066 ops/s

Iteration   3: 36336879.895 ops/s
                 getSynchronizedMethod: 18105066.908 ops/s
                 incSynchronizedMethod: 18231812.987 ops/s

Iteration   4: 34388087.132 ops/s
                 getSynchronizedMethod: 16268967.799 ops/s
                 incSynchronizedMethod: 18119119.334 ops/s

Iteration   5: 34244177.889 ops/s
                 getSynchronizedMethod: 17421316.441 ops/s
                 incSynchronizedMethod: 16822861.447 ops/s

Iteration   6: 35174385.310 ops/s
                 getSynchronizedMethod: 15539671.771 ops/s
                 incSynchronizedMethod: 19634713.539 ops/s

Iteration   7: 35014250.121 ops/s
                 getSynchronizedMethod: 17098647.306 ops/s
                 incSynchronizedMethod: 17915602.815 ops/s

Iteration   8: 34630536.499 ops/s
                 getSynchronizedMethod: 17863867.435 ops/s
                 incSynchronizedMethod: 16766669.063 ops/s

Iteration   9: 36006867.625 ops/s
                 getSynchronizedMethod: 15016869.504 ops/s
                 incSynchronizedMethod: 20989998.121 ops/s

Iteration  10: 34830894.175 ops/s
                 getSynchronizedMethod: 16615738.289 ops/s
                 incSynchronizedMethod: 18215155.886 ops/s



Result "getSynchronizedMethod":
  35107300.165 ±(99.9%) 1050593.144 ops/s [Average]
  (min, avg, max) = (34244177.889, 35107300.165, 36336879.895), stdev = 694902.316
  CI (99.9%): [34056707.021, 36157893.310] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  16778996.456 ±(99.9%) 1728661.051 ops/s [Average]
  (min, avg, max) = (15016869.504, 16778996.456, 18222737.818), stdev = 1143402.253
  CI (99.9%): [15050335.406, 18507657.507] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  18328303.709 ±(99.9%) 1960249.467 ops/s [Average]
  (min, avg, max) = (16766669.063, 18328303.709, 20989998.121), stdev = 1296583.652
  CI (99.9%): [16368054.242, 20288553.177] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 256 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 93491517.067 ops/s
# Warmup Iteration   2: 166902237.775 ops/s
# Warmup Iteration   3: 158632509.131 ops/s
# Warmup Iteration   4: 147748618.787 ops/s
# Warmup Iteration   5: 157023539.615 ops/s
Iteration   1: 159016712.200 ops/s
                 getVolatile: 115815511.666 ops/s
                 incVolatile: 43201200.533 ops/s

Iteration   2: 263355177.704 ops/s
                 getVolatile: 201092967.692 ops/s
                 incVolatile: 62262210.012 ops/s

Iteration   3: 160018078.214 ops/s
                 getVolatile: 116178688.633 ops/s
                 incVolatile: 43839389.582 ops/s

Iteration   4: 170835949.100 ops/s
                 getVolatile: 127202340.370 ops/s
                 incVolatile: 43633608.730 ops/s

Iteration   5: 148216390.882 ops/s
                 getVolatile: 104778862.046 ops/s
                 incVolatile: 43437528.836 ops/s

Iteration   6: 165314897.721 ops/s
                 getVolatile: 121944653.736 ops/s
                 incVolatile: 43370243.985 ops/s

Iteration   7: 171465390.325 ops/s
                 getVolatile: 128551851.870 ops/s
                 incVolatile: 42913538.455 ops/s

Iteration   8: 162464009.454 ops/s
                 getVolatile: 119072003.845 ops/s
                 incVolatile: 43392005.610 ops/s

Iteration   9: 146530561.000 ops/s
                 getVolatile: 103107164.272 ops/s
                 incVolatile: 43423396.728 ops/s

Iteration  10: 156952433.221 ops/s
                 getVolatile: 114912710.256 ops/s
                 incVolatile: 42039722.965 ops/s



Result "getVolatile":
  170416959.982 ±(99.9%) 50923860.554 ops/s [Average]
  (min, avg, max) = (146530561.000, 170416959.982, 263355177.704), stdev = 33682980.750
  CI (99.9%): [119493099.428, 221340820.536] (assumes normal distribution)

Secondary result "getVolatile":
  125265675.439 ±(99.9%) 42174197.057 ops/s [Average]
  (min, avg, max) = (103107164.272, 125265675.439, 201092967.692), stdev = 27895620.092
  CI (99.9%): [83091478.381, 167439872.496] (assumes normal distribution)

Secondary result "incVolatile":
  45151284.544 ±(99.9%) 9119869.095 ops/s [Average]
  (min, avg, max) = (42039722.965, 45151284.544, 62262210.012), stdev = 6032228.739
  CI (99.9%): [36031415.449, 54271153.638] (assumes normal distribution)


# Run complete. Total time: 00:05:27

Benchmark                                                   Mode  Cnt          Score           Error  Units
CounterBenchmark.Adder                                     thrpt   10  160372479.672 ±   6497308.764  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   67364925.292 ±   3480038.226  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   93007554.380 ±   3582043.147  ops/s
CounterBenchmark.Atomic                                    thrpt   10  144634836.579 ±  17534468.294  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10  106127171.619 ±  18537247.339  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   38507664.960 ±   1301210.924  ops/s
CounterBenchmark.LockFair                                  thrpt   10     282937.577 ±      6792.061  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     141467.886 ±      3396.195  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     141469.691 ±      3395.868  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   48518671.689 ±    527974.326  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   21653838.890 ±   1586594.126  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   26864832.799 ±   1829677.434  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     280664.659 ±      8222.135  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     140332.017 ±      4111.635  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     140332.642 ±      4110.500  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10  113735158.481 ± 335358214.201  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10   12708646.486 ±  14038745.994  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10  101026511.995 ± 321479408.946  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     285065.648 ±      4182.650  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     142529.692 ±      2091.378  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     142535.956 ±      2091.287  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   38311256.531 ±    793350.161  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   18960351.401 ±   1829325.758  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   19350905.130 ±   1781201.819  ops/s
CounterBenchmark.Stamped                                   thrpt   10   52792290.092 ±   1337571.697  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10      16662.425 ±      4638.654  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   52775627.668 ±   1341497.572  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  419385253.221 ±  50226914.897  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  413456249.665 ±  54634818.803  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10    5929003.556 ±   4888962.932  ops/s
CounterBenchmark.Synchronized                              thrpt   10   29985729.670 ±   1472318.650  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   14818650.622 ±   1374157.615  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   15167079.048 ±   2426311.825  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   35107300.165 ±   1050593.144  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   16778996.456 ±   1728661.051  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   18328303.709 ±   1960249.467  ops/s
CounterBenchmark.Volatile                                  thrpt   10  170416959.982 ±  50923860.554  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  125265675.439 ±  42174197.057  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   45151284.544 ±   9119869.095  ops/s

Benchmark result is saved to ./counters/results/results-128-128.csv
Running benchmarks with thread group distribution: 1,19
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 244050867.433 ops/s
# Warmup Iteration   2: 256051202.054 ops/s
# Warmup Iteration   3: 255180050.628 ops/s
# Warmup Iteration   4: 260863637.054 ops/s
# Warmup Iteration   5: 258844906.822 ops/s
Iteration   1: 263736199.437 ops/s
                 getAdder: 2965647.047 ops/s
                 incAdder: 260770552.390 ops/s

Iteration   2: 260007877.836 ops/s
                 getAdder: 3018147.498 ops/s
                 incAdder: 256989730.337 ops/s

Iteration   3: 261706932.010 ops/s
                 getAdder: 3399286.572 ops/s
                 incAdder: 258307645.438 ops/s

Iteration   4: 258354836.103 ops/s
                 getAdder: 3366340.799 ops/s
                 incAdder: 254988495.303 ops/s

Iteration   5: 263885846.718 ops/s
                 getAdder: 2951300.199 ops/s
                 incAdder: 260934546.519 ops/s

Iteration   6: 262241866.966 ops/s
                 getAdder: 3148124.778 ops/s
                 incAdder: 259093742.188 ops/s

Iteration   7: 259724838.586 ops/s
                 getAdder: 3504668.659 ops/s
                 incAdder: 256220169.927 ops/s

Iteration   8: 261125206.876 ops/s
                 getAdder: 3171194.869 ops/s
                 incAdder: 257954012.007 ops/s

Iteration   9: 257772630.148 ops/s
                 getAdder: 3446693.481 ops/s
                 incAdder: 254325936.667 ops/s

Iteration  10: 263634622.058 ops/s
                 getAdder: 3490282.015 ops/s
                 incAdder: 260144340.043 ops/s



Result "incAdder":
  261219085.674 ±(99.9%) 3356374.717 ops/s [Average]
  (min, avg, max) = (257772630.148, 261219085.674, 263885846.718), stdev = 2220034.062
  CI (99.9%): [257862710.957, 264575460.391] (assumes normal distribution)

Secondary result "getAdder":
  3246168.592 ±(99.9%) 333286.469 ops/s [Average]
  (min, avg, max) = (2951300.199, 3246168.592, 3504668.659), stdev = 220448.363
  CI (99.9%): [2912882.123, 3579455.061] (assumes normal distribution)

Secondary result "incAdder":
  257972917.082 ±(99.9%) 3525065.608 ops/s [Average]
  (min, avg, max) = (254325936.667, 257972917.082, 260934546.519), stdev = 2331612.641
  CI (99.9%): [254447851.474, 261497982.690] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:21
# Fork: 1 of 1
# Warmup Iteration   1: 46669912.650 ops/s
# Warmup Iteration   2: 48437597.464 ops/s
# Warmup Iteration   3: 49419010.818 ops/s
# Warmup Iteration   4: 47123917.271 ops/s
# Warmup Iteration   5: 47172669.887 ops/s
Iteration   1: 47141153.289 ops/s
                 getAtomic: 2703634.850 ops/s
                 incAtomic: 44437518.439 ops/s

Iteration   2: 49390285.070 ops/s
                 getAtomic: 5536146.930 ops/s
                 incAtomic: 43854138.141 ops/s

Iteration   3: 47647862.540 ops/s
                 getAtomic: 3650456.017 ops/s
                 incAtomic: 43997406.523 ops/s

Iteration   4: 46510131.833 ops/s
                 getAtomic: 2551700.450 ops/s
                 incAtomic: 43958431.383 ops/s

Iteration   5: 48004948.489 ops/s
                 getAtomic: 4209233.840 ops/s
                 incAtomic: 43795714.649 ops/s

Iteration   6: 47466584.416 ops/s
                 getAtomic: 3354081.216 ops/s
                 incAtomic: 44112503.200 ops/s

Iteration   7: 47879367.240 ops/s
                 getAtomic: 3711290.681 ops/s
                 incAtomic: 44168076.560 ops/s

Iteration   8: 48244908.640 ops/s
                 getAtomic: 3972031.159 ops/s
                 incAtomic: 44272877.480 ops/s

Iteration   9: 46371440.137 ops/s
                 getAtomic: 2544670.143 ops/s
                 incAtomic: 43826769.994 ops/s

Iteration  10: 47047655.738 ops/s
                 getAtomic: 3089662.851 ops/s
                 incAtomic: 43957992.887 ops/s



Result "incAtomic":
  47570433.739 ±(99.9%) 1341612.106 ops/s [Average]
  (min, avg, max) = (46371440.137, 47570433.739, 49390285.070), stdev = 887393.341
  CI (99.9%): [46228821.633, 48912045.845] (assumes normal distribution)

Secondary result "getAtomic":
  3532290.814 ±(99.9%) 1386040.317 ops/s [Average]
  (min, avg, max) = (2544670.143, 3532290.814, 5536146.930), stdev = 916779.851
  CI (99.9%): [2146250.497, 4918331.131] (assumes normal distribution)

Secondary result "incAtomic":
  44038142.926 ±(99.9%) 314216.858 ops/s [Average]
  (min, avg, max) = (43795714.649, 44038142.926, 44437518.439), stdev = 207834.996
  CI (99.9%): [43723926.068, 44352359.783] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 328701.513 ops/s
# Warmup Iteration   2: 327486.911 ops/s
# Warmup Iteration   3: 334564.918 ops/s
# Warmup Iteration   4: 330253.356 ops/s
# Warmup Iteration   5: 330455.840 ops/s
Iteration   1: 337697.827 ops/s
                 getFairLock: 16885.010 ops/s
                 incFairLock: 320812.817 ops/s

Iteration   2: 336605.051 ops/s
                 getFairLock: 16828.552 ops/s
                 incFairLock: 319776.498 ops/s

Iteration   3: 340958.061 ops/s
                 getFairLock: 17047.123 ops/s
                 incFairLock: 323910.938 ops/s

Iteration   4: 332334.880 ops/s
                 getFairLock: 16616.943 ops/s
                 incFairLock: 315717.937 ops/s

Iteration   5: 334388.187 ops/s
                 getFairLock: 16718.390 ops/s
                 incFairLock: 317669.797 ops/s

Iteration   6: 333226.936 ops/s
                 getFairLock: 16661.357 ops/s
                 incFairLock: 316565.579 ops/s

Iteration   7: 334981.779 ops/s
                 getFairLock: 16750.412 ops/s
                 incFairLock: 318231.367 ops/s

Iteration   8: 335441.554 ops/s
                 getFairLock: 16772.305 ops/s
                 incFairLock: 318669.249 ops/s

Iteration   9: 333281.140 ops/s
                 getFairLock: 16663.994 ops/s
                 incFairLock: 316617.145 ops/s

Iteration  10: 334723.638 ops/s
                 getFairLock: 16735.693 ops/s
                 incFairLock: 317987.945 ops/s



Result "incFairLock":
  335363.905 ±(99.9%) 3833.875 ops/s [Average]
  (min, avg, max) = (332334.880, 335363.905, 340958.061), stdev = 2535.871
  CI (99.9%): [331530.030, 339197.780] (assumes normal distribution)

Secondary result "getFairLock":
  16767.978 ±(99.9%) 191.308 ops/s [Average]
  (min, avg, max) = (16616.943, 16767.978, 17047.123), stdev = 126.539
  CI (99.9%): [16576.670, 16959.287] (assumes normal distribution)

Secondary result "incFairLock":
  318595.927 ±(99.9%) 3642.570 ops/s [Average]
  (min, avg, max) = (315717.937, 318595.927, 323910.938), stdev = 2409.335
  CI (99.9%): [314953.357, 322238.497] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 41529652.784 ops/s
# Warmup Iteration   2: 49798633.711 ops/s
# Warmup Iteration   3: 41615303.111 ops/s
# Warmup Iteration   4: 51390164.277 ops/s
# Warmup Iteration   5: 51618587.592 ops/s
Iteration   1: 51180828.766 ops/s
                 getNonFairLock: 2123469.253 ops/s
                 incNonFairLock: 49057359.513 ops/s

Iteration   2: 51665649.646 ops/s
                 getNonFairLock: 1966617.502 ops/s
                 incNonFairLock: 49699032.144 ops/s

Iteration   3: 51477323.388 ops/s
                 getNonFairLock: 3181610.283 ops/s
                 incNonFairLock: 48295713.105 ops/s

Iteration   4: 51019959.384 ops/s
                 getNonFairLock: 2779318.599 ops/s
                 incNonFairLock: 48240640.786 ops/s

Iteration   5: 51376463.793 ops/s
                 getNonFairLock: 2468610.650 ops/s
                 incNonFairLock: 48907853.143 ops/s

Iteration   6: 51846452.668 ops/s
                 getNonFairLock: 1776342.673 ops/s
                 incNonFairLock: 50070109.995 ops/s

Iteration   7: 51647192.416 ops/s
                 getNonFairLock: 1902419.645 ops/s
                 incNonFairLock: 49744772.771 ops/s

Iteration   8: 51228367.048 ops/s
                 getNonFairLock: 3816240.972 ops/s
                 incNonFairLock: 47412126.076 ops/s

Iteration   9: 51887122.036 ops/s
                 getNonFairLock: 2710775.750 ops/s
                 incNonFairLock: 49176346.286 ops/s

Iteration  10: 51056521.108 ops/s
                 getNonFairLock: 2027302.058 ops/s
                 incNonFairLock: 49029219.049 ops/s



Result "incNonFairLock":
  51438588.025 ±(99.9%) 478045.229 ops/s [Average]
  (min, avg, max) = (51019959.384, 51438588.025, 51887122.036), stdev = 316197.320
  CI (99.9%): [50960542.796, 51916633.255] (assumes normal distribution)

Secondary result "getNonFairLock":
  2475270.739 ±(99.9%) 988170.407 ops/s [Average]
  (min, avg, max) = (1776342.673, 2475270.739, 3816240.972), stdev = 653613.540
  CI (99.9%): [1487100.332, 3463441.145] (assumes normal distribution)

Secondary result "incNonFairLock":
  48963317.287 ±(99.9%) 1215009.838 ops/s [Average]
  (min, avg, max) = (47412126.076, 48963317.287, 50070109.995), stdev = 803653.779
  CI (99.9%): [47748307.449, 50178327.125] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 322795.210 ops/s
# Warmup Iteration   2: 329405.942 ops/s
# Warmup Iteration   3: 331510.375 ops/s
# Warmup Iteration   4: 332762.169 ops/s
# Warmup Iteration   5: 341854.090 ops/s
Iteration   1: 341431.253 ops/s
                 getFairRWLock: 17071.167 ops/s
                 incFairRWLock: 324360.086 ops/s

Iteration   2: 337271.613 ops/s
                 getFairRWLock: 16859.468 ops/s
                 incFairRWLock: 320412.145 ops/s

Iteration   3: 340415.484 ops/s
                 getFairRWLock: 17019.852 ops/s
                 incFairRWLock: 323395.633 ops/s

Iteration   4: 343775.763 ops/s
                 getFairRWLock: 17188.647 ops/s
                 incFairRWLock: 326587.116 ops/s

Iteration   5: 337234.157 ops/s
                 getFairRWLock: 16857.208 ops/s
                 incFairRWLock: 320376.949 ops/s

Iteration   6: 341458.778 ops/s
                 getFairRWLock: 17072.777 ops/s
                 incFairRWLock: 324386.001 ops/s

Iteration   7: 340349.235 ops/s
                 getFairRWLock: 17017.366 ops/s
                 incFairRWLock: 323331.869 ops/s

Iteration   8: 339544.871 ops/s
                 getFairRWLock: 16977.048 ops/s
                 incFairRWLock: 322567.822 ops/s

Iteration   9: 334795.991 ops/s
                 getFairRWLock: 16740.196 ops/s
                 incFairRWLock: 318055.796 ops/s

Iteration  10: 335072.532 ops/s
                 getFairRWLock: 16751.191 ops/s
                 incFairRWLock: 318321.341 ops/s



Result "incFairRWLock":
  339134.968 ±(99.9%) 4448.146 ops/s [Average]
  (min, avg, max) = (334795.991, 339134.968, 343775.763), stdev = 2942.173
  CI (99.9%): [334686.822, 343583.114] (assumes normal distribution)

Secondary result "getFairRWLock":
  16955.492 ±(99.9%) 223.624 ops/s [Average]
  (min, avg, max) = (16740.196, 16955.492, 17188.647), stdev = 147.913
  CI (99.9%): [16731.868, 17179.116] (assumes normal distribution)

Secondary result "incFairRWLock":
  322179.476 ±(99.9%) 4224.536 ops/s [Average]
  (min, avg, max) = (318055.796, 322179.476, 326587.116), stdev = 2794.269
  CI (99.9%): [317954.940, 326404.012] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 41078892.617 ops/s
# Warmup Iteration   2: 38770056.684 ops/s
# Warmup Iteration   3: 44204420.456 ops/s
# Warmup Iteration   4: 44185730.596 ops/s
# Warmup Iteration   5: 45741239.183 ops/s
Iteration   1: 45213757.013 ops/s
                 getNonFairRWLock: 6007.947 ops/s
                 incNonFairRWLock: 45207749.066 ops/s

Iteration   2: 45178061.508 ops/s
                 getNonFairRWLock: 6317.949 ops/s
                 incNonFairRWLock: 45171743.559 ops/s

Iteration   3: 45070308.436 ops/s
                 getNonFairRWLock: 6281.299 ops/s
                 incNonFairRWLock: 45064027.137 ops/s

Iteration   4: 45340445.464 ops/s
                 getNonFairRWLock: 6158.494 ops/s
                 incNonFairRWLock: 45334286.970 ops/s

Iteration   5: 44823272.635 ops/s
                 getNonFairRWLock: 6523.196 ops/s
                 incNonFairRWLock: 44816749.439 ops/s

Iteration   6: 45827405.408 ops/s
                 getNonFairRWLock: 5780.406 ops/s
                 incNonFairRWLock: 45821625.002 ops/s

Iteration   7: 45161659.977 ops/s
                 getNonFairRWLock: 5867.184 ops/s
                 incNonFairRWLock: 45155792.793 ops/s

Iteration   8: 44690765.935 ops/s
                 getNonFairRWLock: 6255.038 ops/s
                 incNonFairRWLock: 44684510.897 ops/s

Iteration   9: 43746240.308 ops/s
                 getNonFairRWLock: 6707.292 ops/s
                 incNonFairRWLock: 43739533.016 ops/s

Iteration  10: 44613347.891 ops/s
                 getNonFairRWLock: 6302.998 ops/s
                 incNonFairRWLock: 44607044.893 ops/s



Result "incNonFairRWLock":
  44966526.457 ±(99.9%) 835109.359 ops/s [Average]
  (min, avg, max) = (43746240.308, 44966526.457, 45827405.408), stdev = 552373.134
  CI (99.9%): [44131417.098, 45801635.817] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  6220.180 ±(99.9%) 426.821 ops/s [Average]
  (min, avg, max) = (5780.406, 6220.180, 6707.292), stdev = 282.316
  CI (99.9%): [5793.359, 6647.002] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  44960306.277 ±(99.9%) 835466.017 ops/s [Average]
  (min, avg, max) = (43739533.016, 44960306.277, 45821625.002), stdev = 552609.042
  CI (99.9%): [44124840.260, 45795772.294] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 332950.307 ops/s
# Warmup Iteration   2: 326538.161 ops/s
# Warmup Iteration   3: 337448.848 ops/s
# Warmup Iteration   4: 336865.726 ops/s
# Warmup Iteration   5: 338701.827 ops/s
Iteration   1: 344438.329 ops/s
                 getFairSemaphore: 17221.694 ops/s
                 incFairSemaphore: 327216.635 ops/s

Iteration   2: 339377.050 ops/s
                 getFairSemaphore: 16966.704 ops/s
                 incFairSemaphore: 322410.346 ops/s

Iteration   3: 342321.014 ops/s
                 getFairSemaphore: 17115.950 ops/s
                 incFairSemaphore: 325205.064 ops/s

Iteration   4: 340060.734 ops/s
                 getFairSemaphore: 17002.996 ops/s
                 incFairSemaphore: 323057.738 ops/s

Iteration   5: 339531.020 ops/s
                 getFairSemaphore: 16976.675 ops/s
                 incFairSemaphore: 322554.345 ops/s

Iteration   6: 339678.711 ops/s
                 getFairSemaphore: 16984.006 ops/s
                 incFairSemaphore: 322694.705 ops/s

Iteration   7: 340142.027 ops/s
                 getFairSemaphore: 17007.185 ops/s
                 incFairSemaphore: 323134.842 ops/s

Iteration   8: 342510.373 ops/s
                 getFairSemaphore: 17125.655 ops/s
                 incFairSemaphore: 325384.718 ops/s

Iteration   9: 341625.335 ops/s
                 getFairSemaphore: 17081.355 ops/s
                 incFairSemaphore: 324543.981 ops/s

Iteration  10: 342806.631 ops/s
                 getFairSemaphore: 17140.492 ops/s
                 incFairSemaphore: 325666.139 ops/s



Result "incFairSemaphore":
  341249.122 ±(99.9%) 2620.493 ops/s [Average]
  (min, avg, max) = (339377.050, 341249.122, 344438.329), stdev = 1733.294
  CI (99.9%): [338628.630, 343869.615] (assumes normal distribution)

Secondary result "getFairSemaphore":
  17062.271 ±(99.9%) 131.347 ops/s [Average]
  (min, avg, max) = (16966.704, 17062.271, 17221.694), stdev = 86.878
  CI (99.9%): [16930.924, 17193.619] (assumes normal distribution)

Secondary result "incFairSemaphore":
  324186.851 ±(99.9%) 2489.149 ops/s [Average]
  (min, avg, max) = (322410.346, 324186.851, 327216.635), stdev = 1646.418
  CI (99.9%): [321697.702, 326676.001] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 36828680.871 ops/s
# Warmup Iteration   2: 36405901.783 ops/s
# Warmup Iteration   3: 35288745.939 ops/s
# Warmup Iteration   4: 35502623.391 ops/s
# Warmup Iteration   5: 36156704.221 ops/s
Iteration   1: 36577664.077 ops/s
                 getNonFairSemaphore: 1672614.327 ops/s
                 incNonFairSemaphore: 34905049.750 ops/s

Iteration   2: 36825734.654 ops/s
                 getNonFairSemaphore: 1752496.678 ops/s
                 incNonFairSemaphore: 35073237.976 ops/s

Iteration   3: 37264234.044 ops/s
                 getNonFairSemaphore: 2054661.606 ops/s
                 incNonFairSemaphore: 35209572.438 ops/s

Iteration   4: 35692096.746 ops/s
                 getNonFairSemaphore: 1111911.074 ops/s
                 incNonFairSemaphore: 34580185.672 ops/s

Iteration   5: 35321286.897 ops/s
                 getNonFairSemaphore: 1679939.970 ops/s
                 incNonFairSemaphore: 33641346.927 ops/s

Iteration   6: 35866292.570 ops/s
                 getNonFairSemaphore: 1431228.690 ops/s
                 incNonFairSemaphore: 34435063.880 ops/s

Iteration   7: 36697878.096 ops/s
                 getNonFairSemaphore: 1242200.620 ops/s
                 incNonFairSemaphore: 35455677.476 ops/s

Iteration   8: 36965567.868 ops/s
                 getNonFairSemaphore: 1433371.179 ops/s
                 incNonFairSemaphore: 35532196.689 ops/s

Iteration   9: 36305548.445 ops/s
                 getNonFairSemaphore: 1982380.997 ops/s
                 incNonFairSemaphore: 34323167.448 ops/s

Iteration  10: 35615422.997 ops/s
                 getNonFairSemaphore: 1801066.024 ops/s
                 incNonFairSemaphore: 33814356.974 ops/s



Result "incNonFairSemaphore":
  36313172.639 ±(99.9%) 991006.574 ops/s [Average]
  (min, avg, max) = (35321286.897, 36313172.639, 37264234.044), stdev = 655489.490
  CI (99.9%): [35322166.065, 37304179.214] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  1616187.117 ±(99.9%) 464117.570 ops/s [Average]
  (min, avg, max) = (1111911.074, 1616187.117, 2054661.606), stdev = 306985.036
  CI (99.9%): [1152069.546, 2080304.687] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  34696985.523 ±(99.9%) 987050.284 ops/s [Average]
  (min, avg, max) = (33641346.927, 34696985.523, 35532196.689), stdev = 652872.648
  CI (99.9%): [33709935.239, 35684035.807] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:18
# Fork: 1 of 1
# Warmup Iteration   1: 52054606.882 ops/s
# Warmup Iteration   2: 53639345.944 ops/s
# Warmup Iteration   3: 44168502.897 ops/s
# Warmup Iteration   4: 50915618.654 ops/s
# Warmup Iteration   5: 51539097.768 ops/s
Iteration   1: 51312653.890 ops/s
                 getStamped: 3065.796 ops/s
                 incStamped: 51309588.094 ops/s

Iteration   2: 50455516.399 ops/s
                 getStamped: 3384.001 ops/s
                 incStamped: 50452132.398 ops/s

Iteration   3: 50195150.442 ops/s
                 getStamped: 3634.582 ops/s
                 incStamped: 50191515.860 ops/s

Iteration   4: 51919424.285 ops/s
                 getStamped: 2601.823 ops/s
                 incStamped: 51916822.461 ops/s

Iteration   5: 51112213.138 ops/s
                 getStamped: 3360.673 ops/s
                 incStamped: 51108852.465 ops/s

Iteration   6: 51667620.458 ops/s
                 getStamped: 2703.503 ops/s
                 incStamped: 51664916.955 ops/s

Iteration   7: 51920859.989 ops/s
                 getStamped: 2745.934 ops/s
                 incStamped: 51918114.055 ops/s

Iteration   8: 51057940.984 ops/s
                 getStamped: 2698.834 ops/s
                 incStamped: 51055242.150 ops/s

Iteration   9: 51903424.359 ops/s
                 getStamped: 2384.940 ops/s
                 incStamped: 51901039.419 ops/s

Iteration  10: 52108169.939 ops/s
                 getStamped: 2240.885 ops/s
                 incStamped: 52105929.054 ops/s



Result "incStamped":
  51365297.388 ±(99.9%) 996091.301 ops/s [Average]
  (min, avg, max) = (50195150.442, 51365297.388, 52108169.939), stdev = 658852.722
  CI (99.9%): [50369206.087, 52361388.690] (assumes normal distribution)

Secondary result "getStamped":
  2882.097 ±(99.9%) 694.982 ops/s [Average]
  (min, avg, max) = (2240.885, 2882.097, 3634.582), stdev = 459.687
  CI (99.9%): [2187.115, 3577.079] (assumes normal distribution)

Secondary result "incStamped":
  51362415.291 ±(99.9%) 996713.571 ops/s [Average]
  (min, avg, max) = (50191515.860, 51362415.291, 52105929.054), stdev = 659264.315
  CI (99.9%): [50365701.720, 52359128.862] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 53478754.406 ops/s
# Warmup Iteration   2: 52459553.122 ops/s
# Warmup Iteration   3: 53594854.900 ops/s
# Warmup Iteration   4: 55815681.702 ops/s
# Warmup Iteration   5: 55675705.681 ops/s
Iteration   1: 54042759.504 ops/s
                 getOptimisticStamped: 1067974.974 ops/s
                 incOptimisticStamped: 52974784.530 ops/s

Iteration   2: 55094782.001 ops/s
                 getOptimisticStamped: 2227694.043 ops/s
                 incOptimisticStamped: 52867087.957 ops/s

Iteration   3: 54444915.627 ops/s
                 getOptimisticStamped: 1200641.389 ops/s
                 incOptimisticStamped: 53244274.238 ops/s

Iteration   4: 54305826.550 ops/s
                 getOptimisticStamped: 1242244.662 ops/s
                 incOptimisticStamped: 53063581.887 ops/s

Iteration   5: 53338141.382 ops/s
                 getOptimisticStamped: 288471.017 ops/s
                 incOptimisticStamped: 53049670.365 ops/s

Iteration   6: 55918234.314 ops/s
                 getOptimisticStamped: 3351195.942 ops/s
                 incOptimisticStamped: 52567038.372 ops/s

Iteration   7: 55213351.007 ops/s
                 getOptimisticStamped: 2757160.078 ops/s
                 incOptimisticStamped: 52456190.929 ops/s

Iteration   8: 55304388.678 ops/s
                 getOptimisticStamped: 1805607.081 ops/s
                 incOptimisticStamped: 53498781.597 ops/s

Iteration   9: 55696093.436 ops/s
                 getOptimisticStamped: 3761148.082 ops/s
                 incOptimisticStamped: 51934945.354 ops/s

Iteration  10: 55789729.405 ops/s
                 getOptimisticStamped: 3410865.931 ops/s
                 incOptimisticStamped: 52378863.474 ops/s



Result "incOptimisticStamped":
  54914822.190 ±(99.9%) 1284243.844 ops/s [Average]
  (min, avg, max) = (53338141.382, 54914822.190, 55918234.314), stdev = 849447.787
  CI (99.9%): [53630578.347, 56199066.034] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  2111300.320 ±(99.9%) 1779468.261 ops/s [Average]
  (min, avg, max) = (288471.017, 2111300.320, 3761148.082), stdev = 1177008.077
  CI (99.9%): [331832.059, 3890768.581] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  52803521.870 ±(99.9%) 703832.991 ops/s [Average]
  (min, avg, max) = (51934945.354, 52803521.870, 53498781.597), stdev = 465541.945
  CI (99.9%): [52099688.879, 53507354.861] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 35203856.621 ops/s
# Warmup Iteration   2: 36073374.246 ops/s
# Warmup Iteration   3: 33355800.474 ops/s
# Warmup Iteration   4: 33968128.510 ops/s
# Warmup Iteration   5: 33404674.176 ops/s
Iteration   1: 33405182.675 ops/s
                 getSynchronized: 1396005.465 ops/s
                 incSynchronized: 32009177.210 ops/s

Iteration   2: 33714686.016 ops/s
                 getSynchronized: 1510547.797 ops/s
                 incSynchronized: 32204138.219 ops/s

Iteration   3: 34086428.285 ops/s
                 getSynchronized: 1460055.616 ops/s
                 incSynchronized: 32626372.669 ops/s

Iteration   4: 33601578.840 ops/s
                 getSynchronized: 1668380.420 ops/s
                 incSynchronized: 31933198.420 ops/s

Iteration   5: 34673458.174 ops/s
                 getSynchronized: 950547.164 ops/s
                 incSynchronized: 33722911.010 ops/s

Iteration   6: 33499691.899 ops/s
                 getSynchronized: 1826265.871 ops/s
                 incSynchronized: 31673426.028 ops/s

Iteration   7: 33513965.130 ops/s
                 getSynchronized: 1484452.194 ops/s
                 incSynchronized: 32029512.936 ops/s

Iteration   8: 33571497.031 ops/s
                 getSynchronized: 804044.351 ops/s
                 incSynchronized: 32767452.680 ops/s

Iteration   9: 33428212.286 ops/s
                 getSynchronized: 1020848.841 ops/s
                 incSynchronized: 32407363.445 ops/s

Iteration  10: 33515847.907 ops/s
                 getSynchronized: 1438491.688 ops/s
                 incSynchronized: 32077356.219 ops/s



Result "incSynchronized":
  33701054.824 ±(99.9%) 594745.450 ops/s [Average]
  (min, avg, max) = (33405182.675, 33701054.824, 34673458.174), stdev = 393387.291
  CI (99.9%): [33106309.375, 34295800.274] (assumes normal distribution)

Secondary result "getSynchronized":
  1355963.941 ±(99.9%) 493699.214 ops/s [Average]
  (min, avg, max) = (804044.351, 1355963.941, 1826265.871), stdev = 326551.462
  CI (99.9%): [862264.727, 1849663.155] (assumes normal distribution)

Secondary result "incSynchronized":
  32345090.884 ±(99.9%) 885084.695 ops/s [Average]
  (min, avg, max) = (31673426.028, 32345090.884, 33722911.010), stdev = 585428.724
  CI (99.9%): [31460006.189, 33230175.578] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 36651106.437 ops/s
# Warmup Iteration   2: 35183940.594 ops/s
# Warmup Iteration   3: 38145913.800 ops/s
# Warmup Iteration   4: 35192577.438 ops/s
# Warmup Iteration   5: 35660122.036 ops/s
Iteration   1: 36256585.101 ops/s
                 getSynchronizedMethod: 1341849.412 ops/s
                 incSynchronizedMethod: 34914735.689 ops/s

Iteration   2: 36908927.543 ops/s
                 getSynchronizedMethod: 1337412.050 ops/s
                 incSynchronizedMethod: 35571515.493 ops/s

Iteration   3: 37325259.546 ops/s
                 getSynchronizedMethod: 1967329.930 ops/s
                 incSynchronizedMethod: 35357929.616 ops/s

Iteration   4: 36540823.625 ops/s
                 getSynchronizedMethod: 1498874.513 ops/s
                 incSynchronizedMethod: 35041949.112 ops/s

Iteration   5: 36734559.986 ops/s
                 getSynchronizedMethod: 2006273.902 ops/s
                 incSynchronizedMethod: 34728286.084 ops/s

Iteration   6: 36747290.757 ops/s
                 getSynchronizedMethod: 1947406.720 ops/s
                 incSynchronizedMethod: 34799884.037 ops/s

Iteration   7: 35794502.766 ops/s
                 getSynchronizedMethod: 1521519.163 ops/s
                 incSynchronizedMethod: 34272983.603 ops/s

Iteration   8: 35633208.501 ops/s
                 getSynchronizedMethod: 1662752.499 ops/s
                 incSynchronizedMethod: 33970456.002 ops/s

Iteration   9: 36512617.152 ops/s
                 getSynchronizedMethod: 1657920.108 ops/s
                 incSynchronizedMethod: 34854697.044 ops/s

Iteration  10: 36301515.967 ops/s
                 getSynchronizedMethod: 989797.944 ops/s
                 incSynchronizedMethod: 35311718.023 ops/s



Result "incSynchronizedMethod":
  36475529.094 ±(99.9%) 765607.128 ops/s [Average]
  (min, avg, max) = (35633208.501, 36475529.094, 37325259.546), stdev = 506401.712
  CI (99.9%): [35709921.967, 37241136.222] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  1593113.624 ±(99.9%) 491663.883 ops/s [Average]
  (min, avg, max) = (989797.944, 1593113.624, 2006273.902), stdev = 325205.216
  CI (99.9%): [1101449.741, 2084777.507] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  34882415.470 ±(99.9%) 738282.870 ops/s [Average]
  (min, avg, max) = (33970456.002, 34882415.470, 35571515.493), stdev = 488328.407
  CI (99.9%): [34144132.601, 35620698.340] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 68447234.288 ops/s
# Warmup Iteration   2: 68934946.937 ops/s
# Warmup Iteration   3: 70684590.201 ops/s
# Warmup Iteration   4: 70792696.969 ops/s
# Warmup Iteration   5: 71310782.147 ops/s
Iteration   1: 72311691.667 ops/s
                 getVolatile: 10893142.263 ops/s
                 incVolatile: 61418549.404 ops/s

Iteration   2: 70272545.386 ops/s
                 getVolatile: 8572288.382 ops/s
                 incVolatile: 61700257.005 ops/s

Iteration   3: 70812535.372 ops/s
                 getVolatile: 8423984.705 ops/s
                 incVolatile: 62388550.667 ops/s

Iteration   4: 70898946.223 ops/s
                 getVolatile: 8706064.211 ops/s
                 incVolatile: 62192882.012 ops/s

Iteration   5: 71085687.196 ops/s
                 getVolatile: 8754922.510 ops/s
                 incVolatile: 62330764.686 ops/s

Iteration   6: 70407592.803 ops/s
                 getVolatile: 8353646.028 ops/s
                 incVolatile: 62053946.774 ops/s

Iteration   7: 70031122.830 ops/s
                 getVolatile: 8368020.185 ops/s
                 incVolatile: 61663102.645 ops/s

Iteration   8: 70443659.765 ops/s
                 getVolatile: 8643302.870 ops/s
                 incVolatile: 61800356.894 ops/s

Iteration   9: 71476816.862 ops/s
                 getVolatile: 9807678.380 ops/s
                 incVolatile: 61669138.481 ops/s

Iteration  10: 70291509.596 ops/s
                 getVolatile: 8749907.595 ops/s
                 incVolatile: 61541602.000 ops/s



Result "incVolatile":
  70803210.770 ±(99.9%) 1038149.242 ops/s [Average]
  (min, avg, max) = (70031122.830, 70803210.770, 72311691.667), stdev = 686671.446
  CI (99.9%): [69765061.527, 71841360.012] (assumes normal distribution)

Secondary result "getVolatile":
  8927295.713 ±(99.9%) 1219066.663 ops/s [Average]
  (min, avg, max) = (8353646.028, 8927295.713, 10893142.263), stdev = 806337.118
  CI (99.9%): [7708229.050, 10146362.376] (assumes normal distribution)

Secondary result "incVolatile":
  61875915.057 ±(99.9%) 515759.267 ops/s [Average]
  (min, avg, max) = (61418549.404, 61875915.057, 62388550.667), stdev = 341142.821
  CI (99.9%): [61360155.790, 62391674.323] (assumes normal distribution)


# Run complete. Total time: 00:03:25

Benchmark                                                   Mode  Cnt          Score         Error  Units
CounterBenchmark.Adder                                     thrpt   10  261219085.674 ± 3356374.717  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10    3246168.592 ±  333286.469  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10  257972917.082 ± 3525065.608  ops/s
CounterBenchmark.Atomic                                    thrpt   10   47570433.739 ± 1341612.106  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10    3532290.814 ± 1386040.317  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   44038142.926 ±  314216.858  ops/s
CounterBenchmark.LockFair                                  thrpt   10     335363.905 ±    3833.875  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10      16767.978 ±     191.308  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     318595.927 ±    3642.570  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   51438588.025 ±  478045.229  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10    2475270.739 ±  988170.407  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   48963317.287 ± 1215009.838  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     339134.968 ±    4448.146  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10      16955.492 ±     223.624  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     322179.476 ±    4224.536  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10   44966526.457 ±  835109.359  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10       6220.180 ±     426.821  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10   44960306.277 ±  835466.017  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     341249.122 ±    2620.493  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10      17062.271 ±     131.347  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     324186.851 ±    2489.149  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   36313172.639 ±  991006.574  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10    1616187.117 ±  464117.570  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   34696985.523 ±  987050.284  ops/s
CounterBenchmark.Stamped                                   thrpt   10   51365297.388 ±  996091.301  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10       2882.097 ±     694.982  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   51362415.291 ±  996713.571  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10   54914822.190 ± 1284243.844  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10    2111300.320 ± 1779468.261  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   52803521.870 ±  703832.991  ops/s
CounterBenchmark.Synchronized                              thrpt   10   33701054.824 ±  594745.450  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10    1355963.941 ±  493699.214  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   32345090.884 ±  885084.695  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   36475529.094 ±  765607.128  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10    1593113.624 ±  491663.883  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   34882415.470 ±  738282.870  ops/s
CounterBenchmark.Volatile                                  thrpt   10   70803210.770 ± 1038149.242  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10    8927295.713 ± 1219066.663  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   61875915.057 ±  515759.267  ops/s

Benchmark result is saved to ./counters/results/results-1-19.csv
Running benchmarks with thread group distribution: 19,1
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 394759663.044 ops/s
# Warmup Iteration   2: 500246749.909 ops/s
# Warmup Iteration   3: 441146038.103 ops/s
# Warmup Iteration   4: 521745363.817 ops/s
# Warmup Iteration   5: 514547489.102 ops/s
Iteration   1: 520058861.617 ops/s
                 getAdder: 514179002.404 ops/s
                 incAdder: 5879859.213 ops/s

Iteration   2: 533770562.374 ops/s
                 getAdder: 528875477.270 ops/s
                 incAdder: 4895085.104 ops/s

Iteration   3: 533513847.188 ops/s
                 getAdder: 528522832.027 ops/s
                 incAdder: 4991015.161 ops/s

Iteration   4: 525641350.881 ops/s
                 getAdder: 520042541.718 ops/s
                 incAdder: 5598809.163 ops/s

Iteration   5: 537018232.733 ops/s
                 getAdder: 532084782.239 ops/s
                 incAdder: 4933450.493 ops/s

Iteration   6: 528469951.544 ops/s
                 getAdder: 523124657.057 ops/s
                 incAdder: 5345294.487 ops/s

Iteration   7: 535403734.834 ops/s
                 getAdder: 530389203.062 ops/s
                 incAdder: 5014531.772 ops/s

Iteration   8: 508359634.427 ops/s
                 getAdder: 501483566.940 ops/s
                 incAdder: 6876067.486 ops/s

Iteration   9: 531523354.739 ops/s
                 getAdder: 526719606.686 ops/s
                 incAdder: 4803748.053 ops/s

Iteration  10: 525677170.951 ops/s
                 getAdder: 520298952.376 ops/s
                 incAdder: 5378218.575 ops/s



Result "incAdder":
  527943670.129 ±(99.9%) 13066013.036 ops/s [Average]
  (min, avg, max) = (508359634.427, 527943670.129, 537018232.733), stdev = 8642358.627
  CI (99.9%): [514877657.093, 541009683.165] (assumes normal distribution)

Secondary result "getAdder":
  522572062.178 ±(99.9%) 13993056.902 ops/s [Average]
  (min, avg, max) = (501483566.940, 522572062.178, 532084782.239), stdev = 9255540.746
  CI (99.9%): [508579005.276, 536565119.080] (assumes normal distribution)

Secondary result "incAdder":
  5371607.951 ±(99.9%) 954580.824 ops/s [Average]
  (min, avg, max) = (4803748.053, 5371607.951, 6876067.486), stdev = 631396.111
  CI (99.9%): [4417027.127, 6326188.775] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 468047424.864 ops/s
# Warmup Iteration   2: 438890554.165 ops/s
# Warmup Iteration   3: 553514667.805 ops/s
# Warmup Iteration   4: 555226321.090 ops/s
# Warmup Iteration   5: 548752938.710 ops/s
Iteration   1: 547658642.918 ops/s
                 getAtomic: 539501407.103 ops/s
                 incAtomic: 8157235.815 ops/s

Iteration   2: 552955465.033 ops/s
                 getAtomic: 544855773.303 ops/s
                 incAtomic: 8099691.730 ops/s

Iteration   3: 561249865.105 ops/s
                 getAtomic: 553266794.135 ops/s
                 incAtomic: 7983070.970 ops/s

Iteration   4: 567816200.777 ops/s
                 getAtomic: 560369471.069 ops/s
                 incAtomic: 7446729.708 ops/s

Iteration   5: 555689986.727 ops/s
                 getAtomic: 546973157.097 ops/s
                 incAtomic: 8716829.630 ops/s

Iteration   6: 574937787.525 ops/s
                 getAtomic: 567689857.021 ops/s
                 incAtomic: 7247930.504 ops/s

Iteration   7: 548618050.866 ops/s
                 getAtomic: 539796738.299 ops/s
                 incAtomic: 8821312.567 ops/s

Iteration   8: 567199668.096 ops/s
                 getAtomic: 559815459.343 ops/s
                 incAtomic: 7384208.752 ops/s

Iteration   9: 569739007.254 ops/s
                 getAtomic: 562627681.875 ops/s
                 incAtomic: 7111325.380 ops/s

Iteration  10: 552013303.343 ops/s
                 getAtomic: 544050361.828 ops/s
                 incAtomic: 7962941.515 ops/s



Result "incAtomic":
  559787797.764 ±(99.9%) 14656897.656 ops/s [Average]
  (min, avg, max) = (547658642.918, 559787797.764, 574937787.525), stdev = 9694630.301
  CI (99.9%): [545130900.109, 574444695.420] (assumes normal distribution)

Secondary result "getAtomic":
  551894670.107 ±(99.9%) 15421132.288 ops/s [Average]
  (min, avg, max) = (539501407.103, 551894670.107, 567689857.021), stdev = 10200124.193
  CI (99.9%): [536473537.819, 567315802.396] (assumes normal distribution)

Secondary result "incAtomic":
  7893127.657 ±(99.9%) 894591.734 ops/s [Average]
  (min, avg, max) = (7111325.380, 7893127.657, 8821312.567), stdev = 591717.042
  CI (99.9%): [6998535.923, 8787719.391] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 326599.665 ops/s
# Warmup Iteration   2: 327680.632 ops/s
# Warmup Iteration   3: 339394.718 ops/s
# Warmup Iteration   4: 333877.138 ops/s
# Warmup Iteration   5: 337887.656 ops/s
Iteration   1: 336931.112 ops/s
                 getFairLock: 320085.028 ops/s
                 incFairLock: 16846.084 ops/s

Iteration   2: 335437.403 ops/s
                 getFairLock: 318667.581 ops/s
                 incFairLock: 16769.821 ops/s

Iteration   3: 336615.564 ops/s
                 getFairLock: 319784.799 ops/s
                 incFairLock: 16830.765 ops/s

Iteration   4: 337309.782 ops/s
                 getFairLock: 320444.293 ops/s
                 incFairLock: 16865.489 ops/s

Iteration   5: 331915.210 ops/s
                 getFairLock: 315317.743 ops/s
                 incFairLock: 16597.468 ops/s

Iteration   6: 337945.407 ops/s
                 getFairLock: 321047.853 ops/s
                 incFairLock: 16897.554 ops/s

Iteration   7: 334706.644 ops/s
                 getFairLock: 317972.082 ops/s
                 incFairLock: 16734.563 ops/s

Iteration   8: 334420.180 ops/s
                 getFairLock: 317671.793 ops/s
                 incFairLock: 16748.387 ops/s

Iteration   9: 335755.303 ops/s
                 getFairLock: 318967.507 ops/s
                 incFairLock: 16787.796 ops/s

Iteration  10: 339032.689 ops/s
                 getFairLock: 322081.038 ops/s
                 incFairLock: 16951.652 ops/s



Result "incFairLock":
  336006.929 ±(99.9%) 3072.591 ops/s [Average]
  (min, avg, max) = (331915.210, 336006.929, 339032.689), stdev = 2032.329
  CI (99.9%): [332934.338, 339079.521] (assumes normal distribution)

Secondary result "getFairLock":
  319203.972 ±(99.9%) 2922.966 ops/s [Average]
  (min, avg, max) = (315317.743, 319203.972, 322081.038), stdev = 1933.361
  CI (99.9%): [316281.006, 322126.937] (assumes normal distribution)

Secondary result "incFairLock":
  16802.958 ±(99.9%) 150.184 ops/s [Average]
  (min, avg, max) = (16597.468, 16802.958, 16951.652), stdev = 99.338
  CI (99.9%): [16652.774, 16953.142] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 38823497.763 ops/s
# Warmup Iteration   2: 46354449.281 ops/s
# Warmup Iteration   3: 34430404.795 ops/s
# Warmup Iteration   4: 44624715.202 ops/s
# Warmup Iteration   5: 44868531.789 ops/s
Iteration   1: 44053260.135 ops/s
                 getNonFairLock: 42453410.759 ops/s
                 incNonFairLock: 1599849.375 ops/s

Iteration   2: 44844001.243 ops/s
                 getNonFairLock: 41611506.647 ops/s
                 incNonFairLock: 3232494.596 ops/s

Iteration   3: 44105269.639 ops/s
                 getNonFairLock: 42118661.132 ops/s
                 incNonFairLock: 1986608.507 ops/s

Iteration   4: 44304178.309 ops/s
                 getNonFairLock: 41870584.894 ops/s
                 incNonFairLock: 2433593.416 ops/s

Iteration   5: 44486485.653 ops/s
                 getNonFairLock: 42708992.841 ops/s
                 incNonFairLock: 1777492.812 ops/s

Iteration   6: 44921131.026 ops/s
                 getNonFairLock: 41675240.656 ops/s
                 incNonFairLock: 3245890.370 ops/s

Iteration   7: 44651064.023 ops/s
                 getNonFairLock: 42352636.803 ops/s
                 incNonFairLock: 2298427.220 ops/s

Iteration   8: 44046242.712 ops/s
                 getNonFairLock: 41502494.671 ops/s
                 incNonFairLock: 2543748.042 ops/s

Iteration   9: 44460862.829 ops/s
                 getNonFairLock: 42923852.011 ops/s
                 incNonFairLock: 1537010.817 ops/s

Iteration  10: 44742657.998 ops/s
                 getNonFairLock: 42327881.423 ops/s
                 incNonFairLock: 2414776.575 ops/s



Result "incNonFairLock":
  44461515.357 ±(99.9%) 494779.026 ops/s [Average]
  (min, avg, max) = (44046242.712, 44461515.357, 44921131.026), stdev = 327265.691
  CI (99.9%): [43966736.330, 44956294.383] (assumes normal distribution)

Secondary result "getNonFairLock":
  42154526.184 ±(99.9%) 728479.977 ops/s [Average]
  (min, avg, max) = (41502494.671, 42154526.184, 42923852.011), stdev = 481844.400
  CI (99.9%): [41426046.206, 42883006.161] (assumes normal distribution)

Secondary result "incNonFairLock":
  2306989.173 ±(99.9%) 915169.034 ops/s [Average]
  (min, avg, max) = (1537010.817, 2306989.173, 3245890.370), stdev = 605327.653
  CI (99.9%): [1391820.139, 3222158.207] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 314331.417 ops/s
# Warmup Iteration   2: 322610.357 ops/s
# Warmup Iteration   3: 328406.752 ops/s
# Warmup Iteration   4: 323624.285 ops/s
# Warmup Iteration   5: 330656.678 ops/s
Iteration   1: 332545.940 ops/s
                 getFairRWLock: 315918.580 ops/s
                 incFairRWLock: 16627.359 ops/s

Iteration   2: 329669.360 ops/s
                 getFairRWLock: 313251.724 ops/s
                 incFairRWLock: 16417.635 ops/s

Iteration   3: 328374.290 ops/s
                 getFairRWLock: 311955.259 ops/s
                 incFairRWLock: 16419.032 ops/s

Iteration   4: 329314.512 ops/s
                 getFairRWLock: 312874.507 ops/s
                 incFairRWLock: 16440.005 ops/s

Iteration   5: 324438.040 ops/s
                 getFairRWLock: 308214.243 ops/s
                 incFairRWLock: 16223.797 ops/s

Iteration   6: 335174.217 ops/s
                 getFairRWLock: 318415.420 ops/s
                 incFairRWLock: 16758.797 ops/s

Iteration   7: 325240.661 ops/s
                 getFairRWLock: 308975.101 ops/s
                 incFairRWLock: 16265.561 ops/s

Iteration   8: 328126.728 ops/s
                 getFairRWLock: 311720.300 ops/s
                 incFairRWLock: 16406.428 ops/s

Iteration   9: 331709.071 ops/s
                 getFairRWLock: 315123.661 ops/s
                 incFairRWLock: 16585.410 ops/s

Iteration  10: 330118.744 ops/s
                 getFairRWLock: 313612.743 ops/s
                 incFairRWLock: 16506.001 ops/s



Result "incFairRWLock":
  329471.156 ±(99.9%) 4878.473 ops/s [Average]
  (min, avg, max) = (324438.040, 329471.156, 335174.217), stdev = 3226.808
  CI (99.9%): [324592.683, 334349.629] (assumes normal distribution)

Secondary result "getFairRWLock":
  313006.154 ±(99.9%) 4636.401 ops/s [Average]
  (min, avg, max) = (308214.243, 313006.154, 318415.420), stdev = 3066.692
  CI (99.9%): [308369.753, 317642.555] (assumes normal distribution)

Secondary result "incFairRWLock":
  16465.002 ±(99.9%) 244.416 ops/s [Average]
  (min, avg, max) = (16223.797, 16465.002, 16758.797), stdev = 161.666
  CI (99.9%): [16220.586, 16709.419] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 7241110.456 ops/s
# Warmup Iteration   2: 8051256.464 ops/s
# Warmup Iteration   3: 8458763.220 ops/s
# Warmup Iteration   4: 7711026.105 ops/s
# Warmup Iteration   5: 7645860.288 ops/s
Iteration   1: 8014283.925 ops/s
                 getNonFairRWLock: 8012030.649 ops/s
                 incNonFairRWLock: 2253.276 ops/s

Iteration   2: 8120385.065 ops/s
                 getNonFairRWLock: 8115537.241 ops/s
                 incNonFairRWLock: 4847.824 ops/s

Iteration   3: 8012619.283 ops/s
                 getNonFairRWLock: 8009203.009 ops/s
                 incNonFairRWLock: 3416.274 ops/s

Iteration   4: 7818818.156 ops/s
                 getNonFairRWLock: 7816719.917 ops/s
                 incNonFairRWLock: 2098.239 ops/s

Iteration   5: 7801689.890 ops/s
                 getNonFairRWLock: 7800114.425 ops/s
                 incNonFairRWLock: 1575.465 ops/s

Iteration   6: 7925008.345 ops/s
                 getNonFairRWLock: 7923115.944 ops/s
                 incNonFairRWLock: 1892.401 ops/s

Iteration   7: 7686259.854 ops/s
                 getNonFairRWLock: 7684115.684 ops/s
                 incNonFairRWLock: 2144.170 ops/s

Iteration   8: 7816198.199 ops/s
                 getNonFairRWLock: 7814078.948 ops/s
                 incNonFairRWLock: 2119.251 ops/s

Iteration   9: 7605278.006 ops/s
                 getNonFairRWLock: 7603368.907 ops/s
                 incNonFairRWLock: 1909.100 ops/s

Iteration  10: 7891187.232 ops/s
                 getNonFairRWLock: 7888494.200 ops/s
                 incNonFairRWLock: 2693.032 ops/s



Result "incNonFairRWLock":
  7869172.796 ±(99.9%) 237092.042 ops/s [Average]
  (min, avg, max) = (7605278.006, 7869172.796, 8120385.065), stdev = 156821.706
  CI (99.9%): [7632080.754, 8106264.837] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  7866677.892 ±(99.9%) 236044.961 ops/s [Average]
  (min, avg, max) = (7603368.907, 7866677.892, 8115537.241), stdev = 156129.127
  CI (99.9%): [7630632.931, 8102722.853] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  2494.903 ±(99.9%) 1465.437 ops/s [Average]
  (min, avg, max) = (1575.465, 2494.903, 4847.824), stdev = 969.296
  CI (99.9%): [1029.466, 3960.340] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 332032.145 ops/s
# Warmup Iteration   2: 330871.139 ops/s
# Warmup Iteration   3: 338425.884 ops/s
# Warmup Iteration   4: 335450.352 ops/s
# Warmup Iteration   5: 338366.277 ops/s
Iteration   1: 342712.959 ops/s
                 getFairSemaphore: 325577.655 ops/s
                 incFairSemaphore: 17135.303 ops/s

Iteration   2: 342812.656 ops/s
                 getFairSemaphore: 325674.475 ops/s
                 incFairSemaphore: 17138.182 ops/s

Iteration   3: 340267.782 ops/s
                 getFairSemaphore: 323254.653 ops/s
                 incFairSemaphore: 17013.128 ops/s

Iteration   4: 339198.431 ops/s
                 getFairSemaphore: 322238.443 ops/s
                 incFairSemaphore: 16959.988 ops/s

Iteration   5: 339976.469 ops/s
                 getFairSemaphore: 322977.684 ops/s
                 incFairSemaphore: 16998.785 ops/s

Iteration   6: 342216.994 ops/s
                 getFairSemaphore: 325106.008 ops/s
                 incFairSemaphore: 17110.986 ops/s

Iteration   7: 339850.621 ops/s
                 getFairSemaphore: 322858.128 ops/s
                 incFairSemaphore: 16992.492 ops/s

Iteration   8: 337188.793 ops/s
                 getFairSemaphore: 320329.390 ops/s
                 incFairSemaphore: 16859.403 ops/s

Iteration   9: 335854.212 ops/s
                 getFairSemaphore: 319061.474 ops/s
                 incFairSemaphore: 16792.738 ops/s

Iteration  10: 342064.201 ops/s
                 getFairSemaphore: 324961.103 ops/s
                 incFairSemaphore: 17103.098 ops/s



Result "incFairSemaphore":
  340214.312 ±(99.9%) 3556.898 ops/s [Average]
  (min, avg, max) = (335854.212, 340214.312, 342812.656), stdev = 2352.667
  CI (99.9%): [336657.414, 343771.209] (assumes normal distribution)

Secondary result "getFairSemaphore":
  323203.901 ±(99.9%) 3379.569 ops/s [Average]
  (min, avg, max) = (319061.474, 323203.901, 325674.475), stdev = 2235.376
  CI (99.9%): [319824.332, 326583.471] (assumes normal distribution)

Secondary result "incFairSemaphore":
  17010.410 ±(99.9%) 177.332 ops/s [Average]
  (min, avg, max) = (16792.738, 17010.410, 17138.182), stdev = 117.294
  CI (99.9%): [16833.079, 17187.742] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:36
# Fork: 1 of 1
# Warmup Iteration   1: 35519425.589 ops/s
# Warmup Iteration   2: 36283002.056 ops/s
# Warmup Iteration   3: 35877840.169 ops/s
# Warmup Iteration   4: 37850918.769 ops/s
# Warmup Iteration   5: 36950006.985 ops/s
Iteration   1: 36039545.340 ops/s
                 getNonFairSemaphore: 34224144.222 ops/s
                 incNonFairSemaphore: 1815401.118 ops/s

Iteration   2: 36599476.437 ops/s
                 getNonFairSemaphore: 34300676.275 ops/s
                 incNonFairSemaphore: 2298800.161 ops/s

Iteration   3: 36331102.578 ops/s
                 getNonFairSemaphore: 35216076.587 ops/s
                 incNonFairSemaphore: 1115025.992 ops/s

Iteration   4: 35556271.643 ops/s
                 getNonFairSemaphore: 33384727.827 ops/s
                 incNonFairSemaphore: 2171543.815 ops/s

Iteration   5: 36971617.770 ops/s
                 getNonFairSemaphore: 34696866.507 ops/s
                 incNonFairSemaphore: 2274751.263 ops/s

Iteration   6: 36434468.349 ops/s
                 getNonFairSemaphore: 34312250.895 ops/s
                 incNonFairSemaphore: 2122217.454 ops/s

Iteration   7: 35389921.618 ops/s
                 getNonFairSemaphore: 33817938.335 ops/s
                 incNonFairSemaphore: 1571983.284 ops/s

Iteration   8: 36142616.443 ops/s
                 getNonFairSemaphore: 34723132.998 ops/s
                 incNonFairSemaphore: 1419483.445 ops/s

Iteration   9: 36638785.891 ops/s
                 getNonFairSemaphore: 34882945.676 ops/s
                 incNonFairSemaphore: 1755840.215 ops/s

Iteration  10: 36767664.916 ops/s
                 getNonFairSemaphore: 34640106.732 ops/s
                 incNonFairSemaphore: 2127558.185 ops/s



Result "incNonFairSemaphore":
  36287147.099 ±(99.9%) 775107.811 ops/s [Average]
  (min, avg, max) = (35389921.618, 36287147.099, 36971617.770), stdev = 512685.825
  CI (99.9%): [35512039.288, 37062254.910] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  34419886.606 ±(99.9%) 806878.429 ops/s [Average]
  (min, avg, max) = (33384727.827, 34419886.606, 35216076.587), stdev = 533700.122
  CI (99.9%): [33613008.177, 35226765.034] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  1867260.493 ±(99.9%) 606059.122 ops/s [Average]
  (min, avg, max) = (1115025.992, 1867260.493, 2298800.161), stdev = 400870.584
  CI (99.9%): [1261201.371, 2473319.615] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 10291774.263 ops/s
# Warmup Iteration   2: 11830406.441 ops/s
# Warmup Iteration   3: 11929475.981 ops/s
# Warmup Iteration   4: 11807909.023 ops/s
# Warmup Iteration   5: 10814018.051 ops/s
Iteration   1: 11197074.105 ops/s
                 getStamped: 5888987.425 ops/s
                 incStamped: 5308086.681 ops/s

Iteration   2: 9716896.744 ops/s
                 getStamped: 6353074.851 ops/s
                 incStamped: 3363821.893 ops/s

Iteration   3: 10085170.250 ops/s
                 getStamped: 6357577.698 ops/s
                 incStamped: 3727592.552 ops/s

Iteration   4: 11139932.629 ops/s
                 getStamped: 5814087.933 ops/s
                 incStamped: 5325844.696 ops/s

Iteration   5: 9782764.109 ops/s
                 getStamped: 6200936.227 ops/s
                 incStamped: 3581827.882 ops/s

Iteration   6: 12163929.433 ops/s
                 getStamped: 5852049.153 ops/s
                 incStamped: 6311880.280 ops/s

Iteration   7: 10722952.677 ops/s
                 getStamped: 6040726.152 ops/s
                 incStamped: 4682226.525 ops/s

Iteration   8: 10847970.712 ops/s
                 getStamped: 6207178.794 ops/s
                 incStamped: 4640791.918 ops/s

Iteration   9: 10405788.334 ops/s
                 getStamped: 6300348.474 ops/s
                 incStamped: 4105439.860 ops/s

Iteration  10: 11009867.935 ops/s
                 getStamped: 6188827.522 ops/s
                 incStamped: 4821040.413 ops/s



Result "getStamped":
  10707234.693 ±(99.9%) 1123940.418 ops/s [Average]
  (min, avg, max) = (9716896.744, 10707234.693, 12163929.433), stdev = 743416.996
  CI (99.9%): [9583294.275, 11831175.111] (assumes normal distribution)

Secondary result "getStamped":
  6120379.423 ±(99.9%) 313590.543 ops/s [Average]
  (min, avg, max) = (5814087.933, 6120379.423, 6357577.698), stdev = 207420.728
  CI (99.9%): [5806788.880, 6433969.966] (assumes normal distribution)

Secondary result "incStamped":
  4586855.270 ±(99.9%) 1387913.081 ops/s [Average]
  (min, avg, max) = (3363821.893, 4586855.270, 6311880.280), stdev = 918018.569
  CI (99.9%): [3198942.189, 5974768.351] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 311650144.240 ops/s
# Warmup Iteration   2: 374492065.840 ops/s
# Warmup Iteration   3: 307598851.652 ops/s
# Warmup Iteration   4: 396614760.154 ops/s
# Warmup Iteration   5: 383109973.857 ops/s
Iteration   1: 386222373.462 ops/s
                 getOptimisticStamped: 385202570.806 ops/s
                 incOptimisticStamped: 1019802.656 ops/s

Iteration   2: 398842292.191 ops/s
                 getOptimisticStamped: 398154802.029 ops/s
                 incOptimisticStamped: 687490.163 ops/s

Iteration   3: 377050111.382 ops/s
                 getOptimisticStamped: 376153773.290 ops/s
                 incOptimisticStamped: 896338.092 ops/s

Iteration   4: 383126278.012 ops/s
                 getOptimisticStamped: 382261968.118 ops/s
                 incOptimisticStamped: 864309.894 ops/s

Iteration   5: 382513515.377 ops/s
                 getOptimisticStamped: 381828651.008 ops/s
                 incOptimisticStamped: 684864.369 ops/s

Iteration   6: 384788092.387 ops/s
                 getOptimisticStamped: 383953665.378 ops/s
                 incOptimisticStamped: 834427.009 ops/s

Iteration   7: 387699735.646 ops/s
                 getOptimisticStamped: 386930751.218 ops/s
                 incOptimisticStamped: 768984.428 ops/s

Iteration   8: 379757475.043 ops/s
                 getOptimisticStamped: 378863035.268 ops/s
                 incOptimisticStamped: 894439.775 ops/s

Iteration   9: 392843531.753 ops/s
                 getOptimisticStamped: 392203525.808 ops/s
                 incOptimisticStamped: 640005.945 ops/s

Iteration  10: 391764480.455 ops/s
                 getOptimisticStamped: 390863014.987 ops/s
                 incOptimisticStamped: 901465.469 ops/s



Result "incOptimisticStamped":
  386460788.571 ±(99.9%) 9910774.235 ops/s [Average]
  (min, avg, max) = (377050111.382, 386460788.571, 398842292.191), stdev = 6555363.520
  CI (99.9%): [376550014.336, 396371562.806] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  385641575.791 ±(99.9%) 9997257.185 ops/s [Average]
  (min, avg, max) = (376153773.290, 385641575.791, 398154802.029), stdev = 6612566.637
  CI (99.9%): [375644318.606, 395638832.976] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  819212.780 ±(99.9%) 182339.407 ops/s [Average]
  (min, avg, max) = (640005.945, 819212.780, 1019802.656), stdev = 120606.228
  CI (99.9%): [636873.372, 1001552.187] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 31676204.173 ops/s
# Warmup Iteration   2: 27112322.461 ops/s
# Warmup Iteration   3: 30469962.274 ops/s
# Warmup Iteration   4: 27071476.342 ops/s
# Warmup Iteration   5: 27339750.709 ops/s
Iteration   1: 26408929.426 ops/s
                 getSynchronized: 24812102.864 ops/s
                 incSynchronized: 1596826.562 ops/s

Iteration   2: 26423799.119 ops/s
                 getSynchronized: 24279609.797 ops/s
                 incSynchronized: 2144189.322 ops/s

Iteration   3: 26458348.864 ops/s
                 getSynchronized: 24503498.206 ops/s
                 incSynchronized: 1954850.659 ops/s

Iteration   4: 27844292.847 ops/s
                 getSynchronized: 26347122.234 ops/s
                 incSynchronized: 1497170.613 ops/s

Iteration   5: 27266772.070 ops/s
                 getSynchronized: 25574535.241 ops/s
                 incSynchronized: 1692236.829 ops/s

Iteration   6: 26362828.276 ops/s
                 getSynchronized: 24750341.546 ops/s
                 incSynchronized: 1612486.730 ops/s

Iteration   7: 26464122.722 ops/s
                 getSynchronized: 24826342.026 ops/s
                 incSynchronized: 1637780.696 ops/s

Iteration   8: 26348022.164 ops/s
                 getSynchronized: 24799858.326 ops/s
                 incSynchronized: 1548163.838 ops/s

Iteration   9: 26404385.119 ops/s
                 getSynchronized: 24437182.993 ops/s
                 incSynchronized: 1967202.126 ops/s

Iteration  10: 26345050.980 ops/s
                 getSynchronized: 24382524.658 ops/s
                 incSynchronized: 1962526.321 ops/s



Result "incSynchronized":
  26632655.159 ±(99.9%) 766152.893 ops/s [Average]
  (min, avg, max) = (26345050.980, 26632655.159, 27844292.847), stdev = 506762.702
  CI (99.9%): [25866502.265, 27398808.052] (assumes normal distribution)

Secondary result "getSynchronized":
  24871311.789 ±(99.9%) 957587.315 ops/s [Average]
  (min, avg, max) = (24279609.797, 24871311.789, 26347122.234), stdev = 633384.719
  CI (99.9%): [23913724.474, 25828899.104] (assumes normal distribution)

Secondary result "incSynchronized":
  1761343.370 ±(99.9%) 338575.330 ops/s [Average]
  (min, avg, max) = (1497170.613, 1761343.370, 2144189.322), stdev = 223946.617
  CI (99.9%): [1422768.040, 2099918.699] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 31360166.270 ops/s
# Warmup Iteration   2: 32768912.804 ops/s
# Warmup Iteration   3: 32301600.205 ops/s
# Warmup Iteration   4: 32546513.445 ops/s
# Warmup Iteration   5: 34547342.330 ops/s
Iteration   1: 33210519.270 ops/s
                 getSynchronizedMethod: 30918785.923 ops/s
                 incSynchronizedMethod: 2291733.347 ops/s

Iteration   2: 34096989.685 ops/s
                 getSynchronizedMethod: 31811260.973 ops/s
                 incSynchronizedMethod: 2285728.712 ops/s

Iteration   3: 34884686.793 ops/s
                 getSynchronizedMethod: 32684573.813 ops/s
                 incSynchronizedMethod: 2200112.980 ops/s

Iteration   4: 33590014.945 ops/s
                 getSynchronizedMethod: 31714423.388 ops/s
                 incSynchronizedMethod: 1875591.556 ops/s

Iteration   5: 34221309.695 ops/s
                 getSynchronizedMethod: 32542940.507 ops/s
                 incSynchronizedMethod: 1678369.188 ops/s

Iteration   6: 33359280.675 ops/s
                 getSynchronizedMethod: 31931905.369 ops/s
                 incSynchronizedMethod: 1427375.306 ops/s

Iteration   7: 33158196.466 ops/s
                 getSynchronizedMethod: 31118577.701 ops/s
                 incSynchronizedMethod: 2039618.765 ops/s

Iteration   8: 33926020.246 ops/s
                 getSynchronizedMethod: 31253353.311 ops/s
                 incSynchronizedMethod: 2672666.935 ops/s

Iteration   9: 34096272.607 ops/s
                 getSynchronizedMethod: 31965699.494 ops/s
                 incSynchronizedMethod: 2130573.113 ops/s

Iteration  10: 34800690.162 ops/s
                 getSynchronizedMethod: 32978120.729 ops/s
                 incSynchronizedMethod: 1822569.434 ops/s



Result "incSynchronizedMethod":
  33934398.054 ±(99.9%) 924363.030 ops/s [Average]
  (min, avg, max) = (33158196.466, 33934398.054, 34884686.793), stdev = 611408.912
  CI (99.9%): [33010035.024, 34858761.085] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  31891964.121 ±(99.9%) 1036456.151 ops/s [Average]
  (min, avg, max) = (30918785.923, 31891964.121, 32978120.729), stdev = 685551.570
  CI (99.9%): [30855507.970, 32928420.272] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  2042433.934 ±(99.9%) 537647.186 ops/s [Average]
  (min, avg, max) = (1427375.306, 2042433.934, 2672666.935), stdev = 355620.324
  CI (99.9%): [1504786.748, 2580081.119] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 439561508.775 ops/s
# Warmup Iteration   2: 580555922.005 ops/s
# Warmup Iteration   3: 458766895.232 ops/s
# Warmup Iteration   4: 590809157.729 ops/s
# Warmup Iteration   5: 587190972.847 ops/s
Iteration   1: 575088332.178 ops/s
                 getVolatile: 566467558.190 ops/s
                 incVolatile: 8620773.988 ops/s

Iteration   2: 596860683.046 ops/s
                 getVolatile: 590011559.835 ops/s
                 incVolatile: 6849123.212 ops/s

Iteration   3: 596103512.771 ops/s
                 getVolatile: 589410570.614 ops/s
                 incVolatile: 6692942.157 ops/s

Iteration   4: 605790133.773 ops/s
                 getVolatile: 599543434.409 ops/s
                 incVolatile: 6246699.363 ops/s

Iteration   5: 591659026.632 ops/s
                 getVolatile: 584125713.292 ops/s
                 incVolatile: 7533313.339 ops/s

Iteration   6: 584050741.113 ops/s
                 getVolatile: 577068903.034 ops/s
                 incVolatile: 6981838.079 ops/s

Iteration   7: 589590251.974 ops/s
                 getVolatile: 582803923.458 ops/s
                 incVolatile: 6786328.516 ops/s

Iteration   8: 573917704.068 ops/s
                 getVolatile: 566411756.979 ops/s
                 incVolatile: 7505947.089 ops/s

Iteration   9: 580419034.205 ops/s
                 getVolatile: 573161923.381 ops/s
                 incVolatile: 7257110.824 ops/s

Iteration  10: 592476646.736 ops/s
                 getVolatile: 585604821.391 ops/s
                 incVolatile: 6871825.345 ops/s



Result "incVolatile":
  588595606.650 ±(99.9%) 15378128.728 ops/s [Average]
  (min, avg, max) = (573917704.068, 588595606.650, 605790133.773), stdev = 10171680.000
  CI (99.9%): [573217477.922, 603973735.377] (assumes normal distribution)

Secondary result "getVolatile":
  581461016.458 ±(99.9%) 16164275.571 ops/s [Average]
  (min, avg, max) = (566411756.979, 581461016.458, 599543434.409), stdev = 10691667.461
  CI (99.9%): [565296740.887, 597625292.029] (assumes normal distribution)

Secondary result "incVolatile":
  7134590.191 ±(99.9%) 982280.599 ops/s [Average]
  (min, avg, max) = (6246699.363, 7134590.191, 8620773.988), stdev = 649717.798
  CI (99.9%): [6152309.592, 8116870.791] (assumes normal distribution)


# Run complete. Total time: 00:03:28

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  527943670.129 ± 13066013.036  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10  522572062.178 ± 13993056.902  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10    5371607.951 ±   954580.824  ops/s
CounterBenchmark.Atomic                                    thrpt   10  559787797.764 ± 14656897.656  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10  551894670.107 ± 15421132.288  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10    7893127.657 ±   894591.734  ops/s
CounterBenchmark.LockFair                                  thrpt   10     336006.929 ±     3072.591  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     319203.972 ±     2922.966  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10      16802.958 ±      150.184  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   44461515.357 ±   494779.026  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   42154526.184 ±   728479.977  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10    2306989.173 ±   915169.034  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     329471.156 ±     4878.473  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     313006.154 ±     4636.401  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10      16465.002 ±      244.416  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10    7869172.796 ±   237092.042  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    7866677.892 ±   236044.961  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10       2494.903 ±     1465.437  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     340214.312 ±     3556.898  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     323203.901 ±     3379.569  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10      17010.410 ±      177.332  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   36287147.099 ±   775107.811  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   34419886.606 ±   806878.429  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10    1867260.493 ±   606059.122  ops/s
CounterBenchmark.Stamped                                   thrpt   10   10707234.693 ±  1123940.418  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10    6120379.423 ±   313590.543  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10    4586855.270 ±  1387913.081  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  386460788.571 ±  9910774.235  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  385641575.791 ±  9997257.185  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10     819212.780 ±   182339.407  ops/s
CounterBenchmark.Synchronized                              thrpt   10   26632655.159 ±   766152.893  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   24871311.789 ±   957587.315  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10    1761343.370 ±   338575.330  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   33934398.054 ±   924363.030  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   31891964.121 ±  1036456.151  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10    2042433.934 ±   537647.186  ops/s
CounterBenchmark.Volatile                                  thrpt   10  588595606.650 ± 15378128.728  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  581461016.458 ± 16164275.571  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10    7134590.191 ±   982280.599  ops/s

Benchmark result is saved to ./counters/results/results-19-1.csv
Running benchmarks with thread group distribution: 4,16
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 190514469.141 ops/s
# Warmup Iteration   2: 187238099.765 ops/s
# Warmup Iteration   3: 191112618.881 ops/s
# Warmup Iteration   4: 191050124.808 ops/s
# Warmup Iteration   5: 189321147.130 ops/s
Iteration   1: 199692899.179 ops/s
                 getAdder: 17390413.950 ops/s
                 incAdder: 182302485.228 ops/s

Iteration   2: 197154118.499 ops/s
                 getAdder: 17135645.096 ops/s
                 incAdder: 180018473.403 ops/s

Iteration   3: 198312851.989 ops/s
                 getAdder: 18258731.829 ops/s
                 incAdder: 180054120.160 ops/s

Iteration   4: 197095164.580 ops/s
                 getAdder: 17255145.203 ops/s
                 incAdder: 179840019.377 ops/s

Iteration   5: 194020665.114 ops/s
                 getAdder: 19028885.659 ops/s
                 incAdder: 174991779.455 ops/s

Iteration   6: 196009587.905 ops/s
                 getAdder: 17703236.268 ops/s
                 incAdder: 178306351.637 ops/s

Iteration   7: 194693215.899 ops/s
                 getAdder: 16981146.340 ops/s
                 incAdder: 177712069.559 ops/s

Iteration   8: 190803534.473 ops/s
                 getAdder: 18459578.640 ops/s
                 incAdder: 172343955.833 ops/s

Iteration   9: 198316152.336 ops/s
                 getAdder: 16887474.329 ops/s
                 incAdder: 181428678.008 ops/s

Iteration  10: 193268867.190 ops/s
                 getAdder: 16100997.538 ops/s
                 incAdder: 177167869.652 ops/s



Result "incAdder":
  195936705.716 ±(99.9%) 4122889.890 ops/s [Average]
  (min, avg, max) = (190803534.473, 195936705.716, 199692899.179), stdev = 2727036.389
  CI (99.9%): [191813815.826, 200059595.607] (assumes normal distribution)

Secondary result "getAdder":
  17520125.485 ±(99.9%) 1302259.638 ops/s [Average]
  (min, avg, max) = (16100997.538, 17520125.485, 19028885.659), stdev = 861364.120
  CI (99.9%): [16217865.847, 18822385.123] (assumes normal distribution)

Secondary result "incAdder":
  178416580.231 ±(99.9%) 4566836.868 ops/s [Average]
  (min, avg, max) = (172343955.833, 178416580.231, 182302485.228), stdev = 3020679.828
  CI (99.9%): [173849743.363, 182983417.100] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 52623810.294 ops/s
# Warmup Iteration   2: 58486328.508 ops/s
# Warmup Iteration   3: 54125063.122 ops/s
# Warmup Iteration   4: 56967869.067 ops/s
# Warmup Iteration   5: 57103637.311 ops/s
Iteration   1: 57800803.712 ops/s
                 getAtomic: 15502102.208 ops/s
                 incAtomic: 42298701.504 ops/s

Iteration   2: 54367820.713 ops/s
                 getAtomic: 12200581.286 ops/s
                 incAtomic: 42167239.428 ops/s

Iteration   3: 59109512.579 ops/s
                 getAtomic: 16477830.961 ops/s
                 incAtomic: 42631681.618 ops/s

Iteration   4: 56310883.858 ops/s
                 getAtomic: 14403885.060 ops/s
                 incAtomic: 41906998.797 ops/s

Iteration   5: 57834165.705 ops/s
                 getAtomic: 15414875.897 ops/s
                 incAtomic: 42419289.807 ops/s

Iteration   6: 59526942.098 ops/s
                 getAtomic: 17359978.023 ops/s
                 incAtomic: 42166964.075 ops/s

Iteration   7: 57135565.243 ops/s
                 getAtomic: 15569910.467 ops/s
                 incAtomic: 41565654.776 ops/s

Iteration   8: 57122502.153 ops/s
                 getAtomic: 14623877.723 ops/s
                 incAtomic: 42498624.429 ops/s

Iteration   9: 58048913.059 ops/s
                 getAtomic: 16094275.686 ops/s
                 incAtomic: 41954637.373 ops/s

Iteration  10: 58127974.672 ops/s
                 getAtomic: 16244348.909 ops/s
                 incAtomic: 41883625.763 ops/s



Result "incAtomic":
  57538508.379 ±(99.9%) 2201405.047 ops/s [Average]
  (min, avg, max) = (54367820.713, 57538508.379, 59526942.098), stdev = 1456093.136
  CI (99.9%): [55337103.332, 59739913.426] (assumes normal distribution)

Secondary result "getAtomic":
  15389166.622 ±(99.9%) 2142088.950 ops/s [Average]
  (min, avg, max) = (12200581.286, 15389166.622, 17359978.023), stdev = 1416859.211
  CI (99.9%): [13247077.672, 17531255.572] (assumes normal distribution)

Secondary result "incAtomic":
  42149341.757 ±(99.9%) 493358.025 ops/s [Average]
  (min, avg, max) = (41565654.776, 42149341.757, 42631681.618), stdev = 326325.787
  CI (99.9%): [41655983.732, 42642699.782] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 327166.861 ops/s
# Warmup Iteration   2: 324218.694 ops/s
# Warmup Iteration   3: 336898.930 ops/s
# Warmup Iteration   4: 338735.613 ops/s
# Warmup Iteration   5: 338301.213 ops/s
Iteration   1: 338156.573 ops/s
                 getFairLock: 67632.665 ops/s
                 incFairLock: 270523.908 ops/s

Iteration   2: 337937.405 ops/s
                 getFairLock: 67586.327 ops/s
                 incFairLock: 270351.078 ops/s

Iteration   3: 338582.239 ops/s
                 getFairLock: 67716.138 ops/s
                 incFairLock: 270866.102 ops/s

Iteration   4: 335947.357 ops/s
                 getFairLock: 67189.432 ops/s
                 incFairLock: 268757.925 ops/s

Iteration   5: 340184.539 ops/s
                 getFairLock: 68037.144 ops/s
                 incFairLock: 272147.396 ops/s

Iteration   6: 339725.345 ops/s
                 getFairLock: 67945.116 ops/s
                 incFairLock: 271780.229 ops/s

Iteration   7: 340731.105 ops/s
                 getFairLock: 68146.294 ops/s
                 incFairLock: 272584.811 ops/s

Iteration   8: 340273.898 ops/s
                 getFairLock: 68052.967 ops/s
                 incFairLock: 272220.932 ops/s

Iteration   9: 337507.320 ops/s
                 getFairLock: 67501.488 ops/s
                 incFairLock: 270005.832 ops/s

Iteration  10: 341183.766 ops/s
                 getFairLock: 68236.864 ops/s
                 incFairLock: 272946.902 ops/s



Result "incFairLock":
  339022.955 ±(99.9%) 2513.409 ops/s [Average]
  (min, avg, max) = (335947.357, 339022.955, 341183.766), stdev = 1662.464
  CI (99.9%): [336509.546, 341536.364] (assumes normal distribution)

Secondary result "getFairLock":
  67804.443 ±(99.9%) 502.553 ops/s [Average]
  (min, avg, max) = (67189.432, 67804.443, 68236.864), stdev = 332.408
  CI (99.9%): [67301.891, 68306.996] (assumes normal distribution)

Secondary result "incFairLock":
  271218.511 ±(99.9%) 2010.858 ops/s [Average]
  (min, avg, max) = (268757.925, 271218.511, 272946.902), stdev = 1330.058
  CI (99.9%): [269207.654, 273229.369] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 41323445.356 ops/s
# Warmup Iteration   2: 49051839.478 ops/s
# Warmup Iteration   3: 42358503.905 ops/s
# Warmup Iteration   4: 48970030.701 ops/s
# Warmup Iteration   5: 50018172.851 ops/s
Iteration   1: 50242097.247 ops/s
                 getNonFairLock: 7530214.060 ops/s
                 incNonFairLock: 42711883.187 ops/s

Iteration   2: 49566017.785 ops/s
                 getNonFairLock: 9171722.969 ops/s
                 incNonFairLock: 40394294.815 ops/s

Iteration   3: 48793381.894 ops/s
                 getNonFairLock: 10257058.396 ops/s
                 incNonFairLock: 38536323.498 ops/s

Iteration   4: 49152810.885 ops/s
                 getNonFairLock: 9940666.858 ops/s
                 incNonFairLock: 39212144.028 ops/s

Iteration   5: 49964234.027 ops/s
                 getNonFairLock: 10491777.287 ops/s
                 incNonFairLock: 39472456.740 ops/s

Iteration   6: 49364266.218 ops/s
                 getNonFairLock: 9757176.763 ops/s
                 incNonFairLock: 39607089.455 ops/s

Iteration   7: 49453318.515 ops/s
                 getNonFairLock: 9326416.177 ops/s
                 incNonFairLock: 40126902.337 ops/s

Iteration   8: 50062306.323 ops/s
                 getNonFairLock: 10808957.431 ops/s
                 incNonFairLock: 39253348.893 ops/s

Iteration   9: 48940010.481 ops/s
                 getNonFairLock: 10076496.100 ops/s
                 incNonFairLock: 38863514.381 ops/s

Iteration  10: 49903239.793 ops/s
                 getNonFairLock: 7487117.475 ops/s
                 incNonFairLock: 42416122.318 ops/s



Result "incNonFairLock":
  49544168.317 ±(99.9%) 744742.598 ops/s [Average]
  (min, avg, max) = (48793381.894, 49544168.317, 50242097.247), stdev = 492601.117
  CI (99.9%): [48799425.719, 50288910.914] (assumes normal distribution)

Secondary result "getNonFairLock":
  9484760.352 ±(99.9%) 1740652.841 ops/s [Average]
  (min, avg, max) = (7487117.475, 9484760.352, 10808957.431), stdev = 1151334.080
  CI (99.9%): [7744107.511, 11225413.193] (assumes normal distribution)

Secondary result "incNonFairLock":
  40059407.965 ±(99.9%) 2160132.668 ops/s [Average]
  (min, avg, max) = (38536323.498, 40059407.965, 42711883.187), stdev = 1428794.013
  CI (99.9%): [37899275.297, 42219540.633] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 320784.878 ops/s
# Warmup Iteration   2: 316337.129 ops/s
# Warmup Iteration   3: 333111.033 ops/s
# Warmup Iteration   4: 331451.959 ops/s
# Warmup Iteration   5: 336304.963 ops/s
Iteration   1: 333240.320 ops/s
                 getFairRWLock: 66645.211 ops/s
                 incFairRWLock: 266595.109 ops/s

Iteration   2: 335949.473 ops/s
                 getFairRWLock: 67189.732 ops/s
                 incFairRWLock: 268759.741 ops/s

Iteration   3: 337038.774 ops/s
                 getFairRWLock: 67407.718 ops/s
                 incFairRWLock: 269631.057 ops/s

Iteration   4: 332112.095 ops/s
                 getFairRWLock: 66420.459 ops/s
                 incFairRWLock: 265691.636 ops/s

Iteration   5: 330298.912 ops/s
                 getFairRWLock: 66059.226 ops/s
                 incFairRWLock: 264239.687 ops/s

Iteration   6: 334139.684 ops/s
                 getFairRWLock: 66829.377 ops/s
                 incFairRWLock: 267310.308 ops/s

Iteration   7: 332269.541 ops/s
                 getFairRWLock: 66453.495 ops/s
                 incFairRWLock: 265816.045 ops/s

Iteration   8: 337579.388 ops/s
                 getFairRWLock: 67514.005 ops/s
                 incFairRWLock: 270065.382 ops/s

Iteration   9: 332509.141 ops/s
                 getFairRWLock: 66501.117 ops/s
                 incFairRWLock: 266008.024 ops/s

Iteration  10: 332245.910 ops/s
                 getFairRWLock: 66436.683 ops/s
                 incFairRWLock: 265809.227 ops/s



Result "incFairRWLock":
  333738.324 ±(99.9%) 3610.027 ops/s [Average]
  (min, avg, max) = (330298.912, 333738.324, 337579.388), stdev = 2387.809
  CI (99.9%): [330128.297, 337348.351] (assumes normal distribution)

Secondary result "getFairRWLock":
  66745.702 ±(99.9%) 723.404 ops/s [Average]
  (min, avg, max) = (66059.226, 66745.702, 67514.005), stdev = 478.487
  CI (99.9%): [66022.298, 67469.106] (assumes normal distribution)

Secondary result "incFairRWLock":
  266992.622 ±(99.9%) 2886.651 ops/s [Average]
  (min, avg, max) = (264239.687, 266992.622, 270065.382), stdev = 1909.341
  CI (99.9%): [264105.970, 269879.273] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 28348586.611 ops/s
# Warmup Iteration   2: 25331399.514 ops/s
# Warmup Iteration   3: 18791428.319 ops/s
# Warmup Iteration   4: 17645302.095 ops/s
# Warmup Iteration   5: 16343387.313 ops/s
Iteration   1: 17021254.401 ops/s
                 getNonFairRWLock: 6976030.985 ops/s
                 incNonFairRWLock: 10045223.416 ops/s

Iteration   2: 16432383.431 ops/s
                 getNonFairRWLock: 7185427.890 ops/s
                 incNonFairRWLock: 9246955.541 ops/s

Iteration   3: 17765807.984 ops/s
                 getNonFairRWLock: 7286669.259 ops/s
                 incNonFairRWLock: 10479138.725 ops/s

Iteration   4: 16781106.397 ops/s
                 getNonFairRWLock: 7179506.967 ops/s
                 incNonFairRWLock: 9601599.430 ops/s

Iteration   5: 15201647.845 ops/s
                 getNonFairRWLock: 7385516.797 ops/s
                 incNonFairRWLock: 7816131.048 ops/s

Iteration   6: 13902430.510 ops/s
                 getNonFairRWLock: 7692077.372 ops/s
                 incNonFairRWLock: 6210353.139 ops/s

Iteration   7: 21275149.775 ops/s
                 getNonFairRWLock: 7244929.583 ops/s
                 incNonFairRWLock: 14030220.192 ops/s

Iteration   8: 13737900.960 ops/s
                 getNonFairRWLock: 7762446.826 ops/s
                 incNonFairRWLock: 5975454.133 ops/s

Iteration   9: 15733861.261 ops/s
                 getNonFairRWLock: 7643980.138 ops/s
                 incNonFairRWLock: 8089881.123 ops/s

Iteration  10: 15613727.045 ops/s
                 getNonFairRWLock: 7487456.754 ops/s
                 incNonFairRWLock: 8126270.291 ops/s



Result "incNonFairRWLock":
  16346526.961 ±(99.9%) 3264383.145 ops/s [Average]
  (min, avg, max) = (13737900.960, 16346526.961, 21275149.775), stdev = 2159187.333
  CI (99.9%): [13082143.816, 19610910.106] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  7384404.257 ±(99.9%) 388052.591 ops/s [Average]
  (min, avg, max) = (6976030.985, 7384404.257, 7762446.826), stdev = 256672.762
  CI (99.9%): [6996351.666, 7772456.848] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  8962122.704 ±(99.9%) 3524616.585 ops/s [Average]
  (min, avg, max) = (5975454.133, 8962122.704, 14030220.192), stdev = 2331315.640
  CI (99.9%): [5437506.119, 12486739.289] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 325284.078 ops/s
# Warmup Iteration   2: 320088.475 ops/s
# Warmup Iteration   3: 325072.636 ops/s
# Warmup Iteration   4: 334744.010 ops/s
# Warmup Iteration   5: 331342.240 ops/s
Iteration   1: 329749.382 ops/s
                 getFairSemaphore: 65947.735 ops/s
                 incFairSemaphore: 263801.647 ops/s

Iteration   2: 330881.939 ops/s
                 getFairSemaphore: 66176.416 ops/s
                 incFairSemaphore: 264705.523 ops/s

Iteration   3: 330627.938 ops/s
                 getFairSemaphore: 66125.873 ops/s
                 incFairSemaphore: 264502.064 ops/s

Iteration   4: 323388.041 ops/s
                 getFairSemaphore: 64686.765 ops/s
                 incFairSemaphore: 258701.276 ops/s

Iteration   5: 330770.647 ops/s
                 getFairSemaphore: 66154.271 ops/s
                 incFairSemaphore: 264616.375 ops/s

Iteration   6: 331587.236 ops/s
                 getFairSemaphore: 66317.345 ops/s
                 incFairSemaphore: 265269.891 ops/s

Iteration   7: 328331.289 ops/s
                 getFairSemaphore: 65666.281 ops/s
                 incFairSemaphore: 262665.007 ops/s

Iteration   8: 326946.525 ops/s
                 getFairSemaphore: 65389.660 ops/s
                 incFairSemaphore: 261556.865 ops/s

Iteration   9: 329910.080 ops/s
                 getFairSemaphore: 65981.985 ops/s
                 incFairSemaphore: 263928.095 ops/s

Iteration  10: 332757.114 ops/s
                 getFairSemaphore: 66551.422 ops/s
                 incFairSemaphore: 266205.691 ops/s



Result "incFairSemaphore":
  329495.019 ±(99.9%) 4070.306 ops/s [Average]
  (min, avg, max) = (323388.041, 329495.019, 332757.114), stdev = 2692.256
  CI (99.9%): [325424.713, 333565.325] (assumes normal distribution)

Secondary result "getFairSemaphore":
  65899.775 ±(99.9%) 810.505 ops/s [Average]
  (min, avg, max) = (64686.765, 65899.775, 66551.422), stdev = 536.099
  CI (99.9%): [65089.271, 66710.280] (assumes normal distribution)

Secondary result "incFairSemaphore":
  263595.244 ±(99.9%) 3259.808 ops/s [Average]
  (min, avg, max) = (258701.276, 263595.244, 266205.691), stdev = 2156.161
  CI (99.9%): [260335.436, 266855.052] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 35262542.644 ops/s
# Warmup Iteration   2: 36560658.541 ops/s
# Warmup Iteration   3: 37301695.967 ops/s
# Warmup Iteration   4: 36969901.634 ops/s
# Warmup Iteration   5: 38131544.865 ops/s
Iteration   1: 37379773.944 ops/s
                 getNonFairSemaphore: 6799710.979 ops/s
                 incNonFairSemaphore: 30580062.965 ops/s

Iteration   2: 36325846.180 ops/s
                 getNonFairSemaphore: 6686110.089 ops/s
                 incNonFairSemaphore: 29639736.091 ops/s

Iteration   3: 37955807.746 ops/s
                 getNonFairSemaphore: 7102901.092 ops/s
                 incNonFairSemaphore: 30852906.654 ops/s

Iteration   4: 36244007.773 ops/s
                 getNonFairSemaphore: 6871685.891 ops/s
                 incNonFairSemaphore: 29372321.882 ops/s

Iteration   5: 37319898.165 ops/s
                 getNonFairSemaphore: 7176696.587 ops/s
                 incNonFairSemaphore: 30143201.578 ops/s

Iteration   6: 36607363.769 ops/s
                 getNonFairSemaphore: 7911116.281 ops/s
                 incNonFairSemaphore: 28696247.488 ops/s

Iteration   7: 37072470.716 ops/s
                 getNonFairSemaphore: 7905582.458 ops/s
                 incNonFairSemaphore: 29166888.258 ops/s

Iteration   8: 36853212.636 ops/s
                 getNonFairSemaphore: 8272457.940 ops/s
                 incNonFairSemaphore: 28580754.696 ops/s

Iteration   9: 37167014.401 ops/s
                 getNonFairSemaphore: 6311491.200 ops/s
                 incNonFairSemaphore: 30855523.201 ops/s

Iteration  10: 37065303.786 ops/s
                 getNonFairSemaphore: 7168553.947 ops/s
                 incNonFairSemaphore: 29896749.838 ops/s



Result "incNonFairSemaphore":
  36999069.912 ±(99.9%) 780597.863 ops/s [Average]
  (min, avg, max) = (36244007.773, 36999069.912, 37955807.746), stdev = 516317.155
  CI (99.9%): [36218472.048, 37779667.775] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  7220630.646 ±(99.9%) 940375.117 ops/s [Average]
  (min, avg, max) = (6311491.200, 7220630.646, 8272457.940), stdev = 621999.915
  CI (99.9%): [6280255.530, 8161005.763] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  29778439.265 ±(99.9%) 1261693.145 ops/s [Average]
  (min, avg, max) = (28580754.696, 29778439.265, 30855523.201), stdev = 834531.896
  CI (99.9%): [28516746.121, 31040132.410] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:18
# Fork: 1 of 1
# Warmup Iteration   1: 50399611.159 ops/s
# Warmup Iteration   2: 46725928.699 ops/s
# Warmup Iteration   3: 52662753.611 ops/s
# Warmup Iteration   4: 52805000.640 ops/s
# Warmup Iteration   5: 53130200.671 ops/s
Iteration   1: 52930572.061 ops/s
                 getStamped: 5715.905 ops/s
                 incStamped: 52924856.156 ops/s

Iteration   2: 52374228.958 ops/s
                 getStamped: 6762.165 ops/s
                 incStamped: 52367466.793 ops/s

Iteration   3: 53106403.284 ops/s
                 getStamped: 5900.653 ops/s
                 incStamped: 53100502.631 ops/s

Iteration   4: 52437905.102 ops/s
                 getStamped: 6789.439 ops/s
                 incStamped: 52431115.663 ops/s

Iteration   5: 53129249.649 ops/s
                 getStamped: 6491.403 ops/s
                 incStamped: 53122758.246 ops/s

Iteration   6: 52464287.647 ops/s
                 getStamped: 7512.978 ops/s
                 incStamped: 52456774.669 ops/s

Iteration   7: 52298773.718 ops/s
                 getStamped: 6989.513 ops/s
                 incStamped: 52291784.205 ops/s

Iteration   8: 53297954.323 ops/s
                 getStamped: 5985.560 ops/s
                 incStamped: 53291968.763 ops/s

Iteration   9: 52465167.291 ops/s
                 getStamped: 7465.930 ops/s
                 incStamped: 52457701.361 ops/s

Iteration  10: 52557661.971 ops/s
                 getStamped: 6955.094 ops/s
                 incStamped: 52550706.877 ops/s



Result "incStamped":
  52706220.400 ±(99.9%) 558117.862 ops/s [Average]
  (min, avg, max) = (52298773.718, 52706220.400, 53297954.323), stdev = 369160.409
  CI (99.9%): [52148102.538, 53264338.263] (assumes normal distribution)

Secondary result "getStamped":
  6656.864 ±(99.9%) 949.662 ops/s [Average]
  (min, avg, max) = (5715.905, 6656.864, 7512.978), stdev = 628.142
  CI (99.9%): [5707.202, 7606.526] (assumes normal distribution)

Secondary result "incStamped":
  52699563.536 ±(99.9%) 558861.479 ops/s [Average]
  (min, avg, max) = (52291784.205, 52699563.536, 53291968.763), stdev = 369652.266
  CI (99.9%): [52140702.057, 53258425.016] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 91011302.840 ops/s
# Warmup Iteration   2: 101553301.747 ops/s
# Warmup Iteration   3: 123083437.655 ops/s
# Warmup Iteration   4: 112879091.598 ops/s
# Warmup Iteration   5: 114440203.782 ops/s
Iteration   1: 125565312.806 ops/s
                 getOptimisticStamped: 81513592.689 ops/s
                 incOptimisticStamped: 44051720.117 ops/s

Iteration   2: 110998066.981 ops/s
                 getOptimisticStamped: 64801521.653 ops/s
                 incOptimisticStamped: 46196545.328 ops/s

Iteration   3: 105965551.367 ops/s
                 getOptimisticStamped: 58641574.336 ops/s
                 incOptimisticStamped: 47323977.032 ops/s

Iteration   4: 112723639.873 ops/s
                 getOptimisticStamped: 66996226.416 ops/s
                 incOptimisticStamped: 45727413.458 ops/s

Iteration   5: 134834252.717 ops/s
                 getOptimisticStamped: 92051121.900 ops/s
                 incOptimisticStamped: 42783130.817 ops/s

Iteration   6: 148616612.725 ops/s
                 getOptimisticStamped: 106541234.840 ops/s
                 incOptimisticStamped: 42075377.884 ops/s

Iteration   7: 120337889.996 ops/s
                 getOptimisticStamped: 75438871.985 ops/s
                 incOptimisticStamped: 44899018.011 ops/s

Iteration   8: 131710095.032 ops/s
                 getOptimisticStamped: 88240145.413 ops/s
                 incOptimisticStamped: 43469949.618 ops/s

Iteration   9: 115677178.995 ops/s
                 getOptimisticStamped: 70166627.785 ops/s
                 incOptimisticStamped: 45510551.211 ops/s

Iteration  10: 122083849.904 ops/s
                 getOptimisticStamped: 76891195.781 ops/s
                 incOptimisticStamped: 45192654.122 ops/s



Result "incOptimisticStamped":
  122851245.040 ±(99.9%) 19386507.012 ops/s [Average]
  (min, avg, max) = (105965551.367, 122851245.040, 148616612.725), stdev = 12822974.052
  CI (99.9%): [103464738.028, 142237752.051] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  78128211.280 ±(99.9%) 21782522.471 ops/s [Average]
  (min, avg, max) = (58641574.336, 78128211.280, 106541234.840), stdev = 14407789.926
  CI (99.9%): [56345688.809, 99910733.751] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  44723033.760 ±(99.9%) 2448752.812 ops/s [Average]
  (min, avg, max) = (42075377.884, 44723033.760, 47323977.032), stdev = 1619698.368
  CI (99.9%): [42274280.947, 47171786.572] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 34553906.797 ops/s
# Warmup Iteration   2: 34284560.164 ops/s
# Warmup Iteration   3: 34449130.876 ops/s
# Warmup Iteration   4: 32920328.941 ops/s
# Warmup Iteration   5: 34241153.752 ops/s
Iteration   1: 33876686.063 ops/s
                 getSynchronized: 4638192.276 ops/s
                 incSynchronized: 29238493.787 ops/s

Iteration   2: 32849876.797 ops/s
                 getSynchronized: 4349086.825 ops/s
                 incSynchronized: 28500789.972 ops/s

Iteration   3: 33153875.696 ops/s
                 getSynchronized: 4273868.003 ops/s
                 incSynchronized: 28880007.693 ops/s

Iteration   4: 33035905.971 ops/s
                 getSynchronized: 4297078.783 ops/s
                 incSynchronized: 28738827.189 ops/s

Iteration   5: 32737735.115 ops/s
                 getSynchronized: 4297709.819 ops/s
                 incSynchronized: 28440025.297 ops/s

Iteration   6: 33337594.050 ops/s
                 getSynchronized: 3543711.956 ops/s
                 incSynchronized: 29793882.094 ops/s

Iteration   7: 32042021.502 ops/s
                 getSynchronized: 4164731.720 ops/s
                 incSynchronized: 27877289.782 ops/s

Iteration   8: 33599017.485 ops/s
                 getSynchronized: 4823744.690 ops/s
                 incSynchronized: 28775272.795 ops/s

Iteration   9: 32660702.785 ops/s
                 getSynchronized: 5125168.524 ops/s
                 incSynchronized: 27535534.261 ops/s

Iteration  10: 33368130.016 ops/s
                 getSynchronized: 4733608.977 ops/s
                 incSynchronized: 28634521.039 ops/s



Result "incSynchronized":
  33066154.548 ±(99.9%) 793986.270 ops/s [Average]
  (min, avg, max) = (32042021.502, 33066154.548, 33876686.063), stdev = 525172.757
  CI (99.9%): [32272168.278, 33860140.819] (assumes normal distribution)

Secondary result "getSynchronized":
  4424690.157 ±(99.9%) 656203.603 ops/s [Average]
  (min, avg, max) = (3543711.956, 4424690.157, 5125168.524), stdev = 434038.054
  CI (99.9%): [3768486.554, 5080893.760] (assumes normal distribution)

Secondary result "incSynchronized":
  28641464.391 ±(99.9%) 960985.533 ops/s [Average]
  (min, avg, max) = (27535534.261, 28641464.391, 29793882.094), stdev = 635632.429
  CI (99.9%): [27680478.858, 29602449.923] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 36689783.625 ops/s
# Warmup Iteration   2: 35256300.833 ops/s
# Warmup Iteration   3: 35157333.544 ops/s
# Warmup Iteration   4: 33321382.669 ops/s
# Warmup Iteration   5: 34315144.196 ops/s
Iteration   1: 35031069.514 ops/s
                 getSynchronizedMethod: 5354856.382 ops/s
                 incSynchronizedMethod: 29676213.132 ops/s

Iteration   2: 33948093.233 ops/s
                 getSynchronizedMethod: 5156611.980 ops/s
                 incSynchronizedMethod: 28791481.253 ops/s

Iteration   3: 35971308.751 ops/s
                 getSynchronizedMethod: 5473257.029 ops/s
                 incSynchronizedMethod: 30498051.721 ops/s

Iteration   4: 36206105.562 ops/s
                 getSynchronizedMethod: 5916434.599 ops/s
                 incSynchronizedMethod: 30289670.963 ops/s

Iteration   5: 34895068.414 ops/s
                 getSynchronizedMethod: 5728227.320 ops/s
                 incSynchronizedMethod: 29166841.095 ops/s

Iteration   6: 34810404.432 ops/s
                 getSynchronizedMethod: 5639465.740 ops/s
                 incSynchronizedMethod: 29170938.691 ops/s

Iteration   7: 35075277.457 ops/s
                 getSynchronizedMethod: 5058828.219 ops/s
                 incSynchronizedMethod: 30016449.238 ops/s

Iteration   8: 34840123.969 ops/s
                 getSynchronizedMethod: 5446050.444 ops/s
                 incSynchronizedMethod: 29394073.525 ops/s

Iteration   9: 35200002.721 ops/s
                 getSynchronizedMethod: 5540052.450 ops/s
                 incSynchronizedMethod: 29659950.271 ops/s

Iteration  10: 36221596.143 ops/s
                 getSynchronizedMethod: 4900443.985 ops/s
                 incSynchronizedMethod: 31321152.158 ops/s



Result "incSynchronizedMethod":
  35219905.020 ±(99.9%) 1084669.634 ops/s [Average]
  (min, avg, max) = (33948093.233, 35219905.020, 36221596.143), stdev = 717441.804
  CI (99.9%): [34135235.385, 36304574.654] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  5421422.815 ±(99.9%) 473158.560 ops/s [Average]
  (min, avg, max) = (4900443.985, 5421422.815, 5916434.599), stdev = 312965.091
  CI (99.9%): [4948264.255, 5894581.374] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  29798482.205 ±(99.9%) 1138220.593 ops/s [Average]
  (min, avg, max) = (28791481.253, 29798482.205, 31321152.158), stdev = 752862.448
  CI (99.9%): [28660261.612, 30936702.798] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 76516580.192 ops/s
# Warmup Iteration   2: 77991171.699 ops/s
# Warmup Iteration   3: 78436747.055 ops/s
# Warmup Iteration   4: 80463860.351 ops/s
# Warmup Iteration   5: 81246096.023 ops/s
Iteration   1: 78513698.041 ops/s
                 getVolatile: 26995259.656 ops/s
                 incVolatile: 51518438.385 ops/s

Iteration   2: 86158511.471 ops/s
                 getVolatile: 33997721.953 ops/s
                 incVolatile: 52160789.519 ops/s

Iteration   3: 87573891.197 ops/s
                 getVolatile: 35181157.332 ops/s
                 incVolatile: 52392733.866 ops/s

Iteration   4: 87121361.527 ops/s
                 getVolatile: 34203587.170 ops/s
                 incVolatile: 52917774.357 ops/s

Iteration   5: 84086971.691 ops/s
                 getVolatile: 31142161.273 ops/s
                 incVolatile: 52944810.419 ops/s

Iteration   6: 81212223.045 ops/s
                 getVolatile: 28508193.441 ops/s
                 incVolatile: 52704029.604 ops/s

Iteration   7: 85446330.519 ops/s
                 getVolatile: 32631392.463 ops/s
                 incVolatile: 52814938.056 ops/s

Iteration   8: 83083990.990 ops/s
                 getVolatile: 30228547.524 ops/s
                 incVolatile: 52855443.466 ops/s

Iteration   9: 80602556.165 ops/s
                 getVolatile: 28349986.414 ops/s
                 incVolatile: 52252569.751 ops/s

Iteration  10: 81933221.552 ops/s
                 getVolatile: 29208438.523 ops/s
                 incVolatile: 52724783.028 ops/s



Result "incVolatile":
  83573275.620 ±(99.9%) 4562864.131 ops/s [Average]
  (min, avg, max) = (78513698.041, 83573275.620, 87573891.197), stdev = 3018052.108
  CI (99.9%): [79010411.489, 88136139.751] (assumes normal distribution)

Secondary result "getVolatile":
  31044644.575 ±(99.9%) 4290040.044 ops/s [Average]
  (min, avg, max) = (26995259.656, 31044644.575, 35181157.332), stdev = 2837595.866
  CI (99.9%): [26754604.531, 35334684.619] (assumes normal distribution)

Secondary result "incVolatile":
  52528631.045 ±(99.9%) 682317.092 ops/s [Average]
  (min, avg, max) = (51518438.385, 52528631.045, 52944810.419), stdev = 451310.510
  CI (99.9%): [51846313.953, 53210948.137] (assumes normal distribution)


# Run complete. Total time: 00:03:25

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  195936705.716 ±  4122889.890  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   17520125.485 ±  1302259.638  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10  178416580.231 ±  4566836.868  ops/s
CounterBenchmark.Atomic                                    thrpt   10   57538508.379 ±  2201405.047  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   15389166.622 ±  2142088.950  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   42149341.757 ±   493358.025  ops/s
CounterBenchmark.LockFair                                  thrpt   10     339022.955 ±     2513.409  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10      67804.443 ±      502.553  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     271218.511 ±     2010.858  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   49544168.317 ±   744742.598  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10    9484760.352 ±  1740652.841  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   40059407.965 ±  2160132.668  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     333738.324 ±     3610.027  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10      66745.702 ±      723.404  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     266992.622 ±     2886.651  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10   16346526.961 ±  3264383.145  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    7384404.257 ±   388052.591  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10    8962122.704 ±  3524616.585  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     329495.019 ±     4070.306  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10      65899.775 ±      810.505  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     263595.244 ±     3259.808  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   36999069.912 ±   780597.863  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10    7220630.646 ±   940375.117  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   29778439.265 ±  1261693.145  ops/s
CounterBenchmark.Stamped                                   thrpt   10   52706220.400 ±   558117.862  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10       6656.864 ±      949.662  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   52699563.536 ±   558861.479  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  122851245.040 ± 19386507.012  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10   78128211.280 ± 21782522.471  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   44723033.760 ±  2448752.812  ops/s
CounterBenchmark.Synchronized                              thrpt   10   33066154.548 ±   793986.270  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10    4424690.157 ±   656203.603  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   28641464.391 ±   960985.533  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   35219905.020 ±  1084669.634  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10    5421422.815 ±   473158.560  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   29798482.205 ±  1138220.593  ops/s
CounterBenchmark.Volatile                                  thrpt   10   83573275.620 ±  4562864.131  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10   31044644.575 ±  4290040.044  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   52528631.045 ±   682317.092  ops/s

Benchmark result is saved to ./counters/results/results-4-16.csv
Running benchmarks with thread group distribution: 16,4
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 157140167.870 ops/s
# Warmup Iteration   2: 183397682.453 ops/s
# Warmup Iteration   3: 169323368.642 ops/s
# Warmup Iteration   4: 195331196.792 ops/s
# Warmup Iteration   5: 185423243.247 ops/s
Iteration   1: 187175720.940 ops/s
                 getAdder: 163456189.535 ops/s
                 incAdder: 23719531.405 ops/s

Iteration   2: 181738675.718 ops/s
                 getAdder: 156016931.320 ops/s
                 incAdder: 25721744.397 ops/s

Iteration   3: 193098538.184 ops/s
                 getAdder: 173253638.540 ops/s
                 incAdder: 19844899.644 ops/s

Iteration   4: 191310141.512 ops/s
                 getAdder: 164635579.607 ops/s
                 incAdder: 26674561.905 ops/s

Iteration   5: 194552639.082 ops/s
                 getAdder: 171407265.273 ops/s
                 incAdder: 23145373.809 ops/s

Iteration   6: 192229343.763 ops/s
                 getAdder: 167598871.951 ops/s
                 incAdder: 24630471.812 ops/s

Iteration   7: 190462153.017 ops/s
                 getAdder: 164886595.634 ops/s
                 incAdder: 25575557.383 ops/s

Iteration   8: 177858907.830 ops/s
                 getAdder: 156947377.563 ops/s
                 incAdder: 20911530.266 ops/s

Iteration   9: 197331017.312 ops/s
                 getAdder: 176155374.510 ops/s
                 incAdder: 21175642.802 ops/s

Iteration  10: 186168789.154 ops/s
                 getAdder: 162450991.217 ops/s
                 incAdder: 23717797.937 ops/s



Result "incAdder":
  189192592.651 ±(99.9%) 9053804.835 ops/s [Average]
  (min, avg, max) = (177858907.830, 189192592.651, 197331017.312), stdev = 5988531.322
  CI (99.9%): [180138787.816, 198246397.487] (assumes normal distribution)

Secondary result "getAdder":
  165680881.515 ±(99.9%) 9956126.294 ops/s [Average]
  (min, avg, max) = (156016931.320, 165680881.515, 176155374.510), stdev = 6585361.099
  CI (99.9%): [155724755.221, 175637007.809] (assumes normal distribution)

Secondary result "incAdder":
  23511711.136 ±(99.9%) 3428450.503 ops/s [Average]
  (min, avg, max) = (19844899.644, 23511711.136, 26674561.905), stdev = 2267707.731
  CI (99.9%): [20083260.633, 26940161.639] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 258899537.186 ops/s
# Warmup Iteration   2: 316755601.063 ops/s
# Warmup Iteration   3: 273712230.374 ops/s
# Warmup Iteration   4: 321426623.696 ops/s
# Warmup Iteration   5: 312138407.458 ops/s
Iteration   1: 336173654.006 ops/s
                 getAtomic: 309955431.732 ops/s
                 incAtomic: 26218222.274 ops/s

Iteration   2: 320130146.019 ops/s
                 getAtomic: 292271427.013 ops/s
                 incAtomic: 27858719.006 ops/s

Iteration   3: 273869218.427 ops/s
                 getAtomic: 241522065.628 ops/s
                 incAtomic: 32347152.799 ops/s

Iteration   4: 329179007.130 ops/s
                 getAtomic: 300274921.708 ops/s
                 incAtomic: 28904085.422 ops/s

Iteration   5: 342044034.068 ops/s
                 getAtomic: 316499637.245 ops/s
                 incAtomic: 25544396.823 ops/s

Iteration   6: 339950879.343 ops/s
                 getAtomic: 313796691.685 ops/s
                 incAtomic: 26154187.658 ops/s

Iteration   7: 327340242.928 ops/s
                 getAtomic: 298295195.332 ops/s
                 incAtomic: 29045047.596 ops/s

Iteration   8: 369137041.105 ops/s
                 getAtomic: 345555802.189 ops/s
                 incAtomic: 23581238.915 ops/s

Iteration   9: 347078004.525 ops/s
                 getAtomic: 321994891.816 ops/s
                 incAtomic: 25083112.709 ops/s

Iteration  10: 336693810.574 ops/s
                 getAtomic: 308918741.763 ops/s
                 incAtomic: 27775068.811 ops/s



Result "incAtomic":
  332159603.812 ±(99.9%) 36893841.849 ops/s [Average]
  (min, avg, max) = (273869218.427, 332159603.812, 369137041.105), stdev = 24402992.060
  CI (99.9%): [295265761.964, 369053445.661] (assumes normal distribution)

Secondary result "getAtomic":
  304908480.611 ±(99.9%) 40447630.156 ops/s [Average]
  (min, avg, max) = (241522065.628, 304908480.611, 345555802.189), stdev = 26753602.989
  CI (99.9%): [264460850.455, 345356110.767] (assumes normal distribution)

Secondary result "incAtomic":
  27251123.201 ±(99.9%) 3768373.043 ops/s [Average]
  (min, avg, max) = (23581238.915, 27251123.201, 32347152.799), stdev = 2492545.445
  CI (99.9%): [23482750.158, 31019496.245] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 329310.371 ops/s
# Warmup Iteration   2: 324676.764 ops/s
# Warmup Iteration   3: 339916.836 ops/s
# Warmup Iteration   4: 338336.970 ops/s
# Warmup Iteration   5: 333443.915 ops/s
Iteration   1: 332032.588 ops/s
                 getFairLock: 265625.539 ops/s
                 incFairLock: 66407.049 ops/s

Iteration   2: 331521.573 ops/s
                 getFairLock: 265214.108 ops/s
                 incFairLock: 66307.465 ops/s

Iteration   3: 340328.484 ops/s
                 getFairLock: 272262.619 ops/s
                 incFairLock: 68065.866 ops/s

Iteration   4: 337783.595 ops/s
                 getFairLock: 270226.514 ops/s
                 incFairLock: 67557.081 ops/s

Iteration   5: 335448.233 ops/s
                 getFairLock: 268358.076 ops/s
                 incFairLock: 67090.157 ops/s

Iteration   6: 337092.364 ops/s
                 getFairLock: 269673.631 ops/s
                 incFairLock: 67418.732 ops/s

Iteration   7: 334464.082 ops/s
                 getFairLock: 267571.554 ops/s
                 incFairLock: 66892.528 ops/s

Iteration   8: 336126.122 ops/s
                 getFairLock: 268897.788 ops/s
                 incFairLock: 67228.334 ops/s

Iteration   9: 336452.922 ops/s
                 getFairLock: 269162.126 ops/s
                 incFairLock: 67290.796 ops/s

Iteration  10: 336203.534 ops/s
                 getFairLock: 268962.736 ops/s
                 incFairLock: 67240.798 ops/s



Result "incFairLock":
  335745.350 ±(99.9%) 3941.939 ops/s [Average]
  (min, avg, max) = (331521.573, 335745.350, 340328.484), stdev = 2607.349
  CI (99.9%): [331803.410, 339687.289] (assumes normal distribution)

Secondary result "getFairLock":
  268595.469 ±(99.9%) 3154.314 ops/s [Average]
  (min, avg, max) = (265214.108, 268595.469, 272262.619), stdev = 2086.383
  CI (99.9%): [265441.155, 271749.783] (assumes normal distribution)

Secondary result "incFairLock":
  67149.881 ±(99.9%) 787.628 ops/s [Average]
  (min, avg, max) = (66307.465, 67149.881, 68065.866), stdev = 520.967
  CI (99.9%): [66362.253, 67937.508] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 38722129.304 ops/s
# Warmup Iteration   2: 44091999.119 ops/s
# Warmup Iteration   3: 35511221.597 ops/s
# Warmup Iteration   4: 46076155.442 ops/s
# Warmup Iteration   5: 45622976.973 ops/s
Iteration   1: 45161689.523 ops/s
                 getNonFairLock: 38260944.294 ops/s
                 incNonFairLock: 6900745.230 ops/s

Iteration   2: 45265292.761 ops/s
                 getNonFairLock: 36198218.409 ops/s
                 incNonFairLock: 9067074.352 ops/s

Iteration   3: 45399857.936 ops/s
                 getNonFairLock: 38516916.400 ops/s
                 incNonFairLock: 6882941.537 ops/s

Iteration   4: 46489931.435 ops/s
                 getNonFairLock: 36891210.954 ops/s
                 incNonFairLock: 9598720.481 ops/s

Iteration   5: 45860829.091 ops/s
                 getNonFairLock: 36296487.316 ops/s
                 incNonFairLock: 9564341.775 ops/s

Iteration   6: 45661415.601 ops/s
                 getNonFairLock: 37555136.783 ops/s
                 incNonFairLock: 8106278.818 ops/s

Iteration   7: 45457840.199 ops/s
                 getNonFairLock: 34863709.789 ops/s
                 incNonFairLock: 10594130.410 ops/s

Iteration   8: 46308517.611 ops/s
                 getNonFairLock: 37172677.081 ops/s
                 incNonFairLock: 9135840.531 ops/s

Iteration   9: 45676609.714 ops/s
                 getNonFairLock: 37007572.174 ops/s
                 incNonFairLock: 8669037.540 ops/s

Iteration  10: 45083194.029 ops/s
                 getNonFairLock: 34332581.034 ops/s
                 incNonFairLock: 10750612.995 ops/s



Result "incNonFairLock":
  45636517.790 ±(99.9%) 710878.830 ops/s [Average]
  (min, avg, max) = (45083194.029, 45636517.790, 46489931.435), stdev = 470202.331
  CI (99.9%): [44925638.960, 46347396.620] (assumes normal distribution)

Secondary result "getNonFairLock":
  36709545.423 ±(99.9%) 2029239.904 ops/s [Average]
  (min, avg, max) = (34332581.034, 36709545.423, 38516916.400), stdev = 1342216.554
  CI (99.9%): [34680305.519, 38738785.328] (assumes normal distribution)

Secondary result "incNonFairLock":
  8926972.367 ±(99.9%) 2018928.532 ops/s [Average]
  (min, avg, max) = (6882941.537, 8926972.367, 10750612.995), stdev = 1335396.220
  CI (99.9%): [6908043.835, 10945900.898] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 314918.963 ops/s
# Warmup Iteration   2: 311785.369 ops/s
# Warmup Iteration   3: 335389.083 ops/s
# Warmup Iteration   4: 335735.485 ops/s
# Warmup Iteration   5: 332670.075 ops/s
Iteration   1: 338472.244 ops/s
                 getFairRWLock: 270777.564 ops/s
                 incFairRWLock: 67694.680 ops/s

Iteration   2: 332748.260 ops/s
                 getFairRWLock: 266198.070 ops/s
                 incFairRWLock: 66550.191 ops/s

Iteration   3: 334091.729 ops/s
                 getFairRWLock: 267273.279 ops/s
                 incFairRWLock: 66818.451 ops/s

Iteration   4: 335435.504 ops/s
                 getFairRWLock: 268405.028 ops/s
                 incFairRWLock: 67030.476 ops/s

Iteration   5: 329058.604 ops/s
                 getFairRWLock: 263246.261 ops/s
                 incFairRWLock: 65812.342 ops/s

Iteration   6: 331984.717 ops/s
                 getFairRWLock: 265587.575 ops/s
                 incFairRWLock: 66397.142 ops/s

Iteration   7: 330300.989 ops/s
                 getFairRWLock: 264239.626 ops/s
                 incFairRWLock: 66061.363 ops/s

Iteration   8: 332829.877 ops/s
                 getFairRWLock: 266263.651 ops/s
                 incFairRWLock: 66566.226 ops/s

Iteration   9: 335752.114 ops/s
                 getFairRWLock: 268601.464 ops/s
                 incFairRWLock: 67150.651 ops/s

Iteration  10: 334522.271 ops/s
                 getFairRWLock: 267622.016 ops/s
                 incFairRWLock: 66900.256 ops/s



Result "incFairRWLock":
  333519.631 ±(99.9%) 4161.886 ops/s [Average]
  (min, avg, max) = (329058.604, 333519.631, 338472.244), stdev = 2752.830
  CI (99.9%): [329357.745, 337681.517] (assumes normal distribution)

Secondary result "getFairRWLock":
  266821.453 ±(99.9%) 3336.836 ops/s [Average]
  (min, avg, max) = (263246.261, 266821.453, 270777.564), stdev = 2207.111
  CI (99.9%): [263484.617, 270158.290] (assumes normal distribution)

Secondary result "incFairRWLock":
  66698.178 ±(99.9%) 825.566 ops/s [Average]
  (min, avg, max) = (65812.342, 66698.178, 67694.680), stdev = 546.061
  CI (99.9%): [65872.611, 67523.744] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 8964578.671 ops/s
# Warmup Iteration   2: 8552345.724 ops/s
# Warmup Iteration   3: 8182267.979 ops/s
# Warmup Iteration   4: 8484189.696 ops/s
# Warmup Iteration   5: 8053870.277 ops/s
Iteration   1: 8411796.270 ops/s
                 getNonFairRWLock: 8293327.712 ops/s
                 incNonFairRWLock: 118468.558 ops/s

Iteration   2: 8014019.395 ops/s
                 getNonFairRWLock: 7984107.717 ops/s
                 incNonFairRWLock: 29911.678 ops/s

Iteration   3: 7813418.053 ops/s
                 getNonFairRWLock: 7797085.641 ops/s
                 incNonFairRWLock: 16332.412 ops/s

Iteration   4: 7725583.489 ops/s
                 getNonFairRWLock: 7703505.900 ops/s
                 incNonFairRWLock: 22077.589 ops/s

Iteration   5: 8179461.776 ops/s
                 getNonFairRWLock: 7784324.108 ops/s
                 incNonFairRWLock: 395137.669 ops/s

Iteration   6: 7998411.435 ops/s
                 getNonFairRWLock: 7982511.444 ops/s
                 incNonFairRWLock: 15899.991 ops/s

Iteration   7: 8116672.529 ops/s
                 getNonFairRWLock: 7975559.504 ops/s
                 incNonFairRWLock: 141113.024 ops/s

Iteration   8: 8539982.592 ops/s
                 getNonFairRWLock: 7879659.989 ops/s
                 incNonFairRWLock: 660322.603 ops/s

Iteration   9: 8230568.063 ops/s
                 getNonFairRWLock: 8000446.195 ops/s
                 incNonFairRWLock: 230121.869 ops/s

Iteration  10: 7935534.267 ops/s
                 getNonFairRWLock: 7919281.533 ops/s
                 incNonFairRWLock: 16252.735 ops/s



Result "incNonFairRWLock":
  8096544.787 ±(99.9%) 384262.060 ops/s [Average]
  (min, avg, max) = (7725583.489, 8096544.787, 8539982.592), stdev = 254165.561
  CI (99.9%): [7712282.727, 8480806.847] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  7931980.974 ±(99.9%) 245610.249 ops/s [Average]
  (min, avg, max) = (7703505.900, 7931980.974, 8293327.712), stdev = 162455.973
  CI (99.9%): [7686370.725, 8177591.223] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  164563.813 ±(99.9%) 322850.995 ops/s [Average]
  (min, avg, max) = (15899.991, 164563.813, 660322.603), stdev = 213545.943
  CI (99.9%): [≈ 0, 487414.807] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 327766.663 ops/s
# Warmup Iteration   2: 326370.863 ops/s
# Warmup Iteration   3: 336218.951 ops/s
# Warmup Iteration   4: 334187.551 ops/s
# Warmup Iteration   5: 331796.074 ops/s
Iteration   1: 334563.598 ops/s
                 getFairSemaphore: 267650.168 ops/s
                 incFairSemaphore: 66913.430 ops/s

Iteration   2: 333187.164 ops/s
                 getFairSemaphore: 266549.577 ops/s
                 incFairSemaphore: 66637.587 ops/s

Iteration   3: 339409.742 ops/s
                 getFairSemaphore: 271527.907 ops/s
                 incFairSemaphore: 67881.835 ops/s

Iteration   4: 334670.198 ops/s
                 getFairSemaphore: 267736.682 ops/s
                 incFairSemaphore: 66933.516 ops/s

Iteration   5: 334125.514 ops/s
                 getFairSemaphore: 267300.474 ops/s
                 incFairSemaphore: 66825.041 ops/s

Iteration   6: 333782.802 ops/s
                 getFairSemaphore: 267026.177 ops/s
                 incFairSemaphore: 66756.626 ops/s

Iteration   7: 337755.892 ops/s
                 getFairSemaphore: 270204.754 ops/s
                 incFairSemaphore: 67551.139 ops/s

Iteration   8: 336798.527 ops/s
                 getFairSemaphore: 269441.031 ops/s
                 incFairSemaphore: 67357.496 ops/s

Iteration   9: 334313.227 ops/s
                 getFairSemaphore: 267450.228 ops/s
                 incFairSemaphore: 66862.999 ops/s

Iteration  10: 329264.696 ops/s
                 getFairSemaphore: 263411.685 ops/s
                 incFairSemaphore: 65853.011 ops/s



Result "incFairSemaphore":
  334787.136 ±(99.9%) 4186.738 ops/s [Average]
  (min, avg, max) = (329264.696, 334787.136, 339409.742), stdev = 2769.268
  CI (99.9%): [330600.398, 338973.874] (assumes normal distribution)

Secondary result "getFairSemaphore":
  267829.868 ±(99.9%) 3349.756 ops/s [Average]
  (min, avg, max) = (263411.685, 267829.868, 271527.907), stdev = 2215.656
  CI (99.9%): [264480.112, 271179.624] (assumes normal distribution)

Secondary result "incFairSemaphore":
  66957.268 ±(99.9%) 836.983 ops/s [Average]
  (min, avg, max) = (65853.011, 66957.268, 67881.835), stdev = 553.613
  CI (99.9%): [66120.285, 67794.251] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:35
# Fork: 1 of 1
# Warmup Iteration   1: 35244672.987 ops/s
# Warmup Iteration   2: 33333583.337 ops/s
# Warmup Iteration   3: 36138970.581 ops/s
# Warmup Iteration   4: 37437318.531 ops/s
# Warmup Iteration   5: 37567753.028 ops/s
Iteration   1: 35844356.659 ops/s
                 getNonFairSemaphore: 28365523.787 ops/s
                 incNonFairSemaphore: 7478832.872 ops/s

Iteration   2: 36642127.577 ops/s
                 getNonFairSemaphore: 29053737.496 ops/s
                 incNonFairSemaphore: 7588390.081 ops/s

Iteration   3: 35763122.391 ops/s
                 getNonFairSemaphore: 28413076.099 ops/s
                 incNonFairSemaphore: 7350046.292 ops/s

Iteration   4: 35399610.849 ops/s
                 getNonFairSemaphore: 28844875.814 ops/s
                 incNonFairSemaphore: 6554735.035 ops/s

Iteration   5: 35420878.169 ops/s
                 getNonFairSemaphore: 27665101.316 ops/s
                 incNonFairSemaphore: 7755776.853 ops/s

Iteration   6: 35823831.006 ops/s
                 getNonFairSemaphore: 29947194.887 ops/s
                 incNonFairSemaphore: 5876636.119 ops/s

Iteration   7: 36256979.659 ops/s
                 getNonFairSemaphore: 30048491.891 ops/s
                 incNonFairSemaphore: 6208487.768 ops/s

Iteration   8: 35787896.772 ops/s
                 getNonFairSemaphore: 28369803.674 ops/s
                 incNonFairSemaphore: 7418093.099 ops/s

Iteration   9: 36249477.634 ops/s
                 getNonFairSemaphore: 29441292.582 ops/s
                 incNonFairSemaphore: 6808185.052 ops/s

Iteration  10: 35459540.868 ops/s
                 getNonFairSemaphore: 27733764.217 ops/s
                 incNonFairSemaphore: 7725776.651 ops/s



Result "incNonFairSemaphore":
  35864782.158 ±(99.9%) 617639.150 ops/s [Average]
  (min, avg, max) = (35399610.849, 35864782.158, 36642127.577), stdev = 408530.056
  CI (99.9%): [35247143.008, 36482421.309] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  28788286.176 ±(99.9%) 1264857.471 ops/s [Average]
  (min, avg, max) = (27665101.316, 28788286.176, 30048491.891), stdev = 836624.902
  CI (99.9%): [27523428.706, 30053143.647] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  7076495.982 ±(99.9%) 1012398.172 ops/s [Average]
  (min, avg, max) = (5876636.119, 7076495.982, 7755776.853), stdev = 669638.707
  CI (99.9%): [6064097.810, 8088894.154] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 38881309.071 ops/s
# Warmup Iteration   2: 39284841.467 ops/s
# Warmup Iteration   3: 42768035.368 ops/s
# Warmup Iteration   4: 44491624.058 ops/s
# Warmup Iteration   5: 42937166.418 ops/s
Iteration   1: 41905398.590 ops/s
                 getStamped: 132631.539 ops/s
                 incStamped: 41772767.052 ops/s

Iteration   2: 42383773.205 ops/s
                 getStamped: 124112.225 ops/s
                 incStamped: 42259660.980 ops/s

Iteration   3: 44197957.760 ops/s
                 getStamped: 111878.396 ops/s
                 incStamped: 44086079.364 ops/s

Iteration   4: 44430600.757 ops/s
                 getStamped: 111103.950 ops/s
                 incStamped: 44319496.807 ops/s

Iteration   5: 42568667.136 ops/s
                 getStamped: 120435.688 ops/s
                 incStamped: 42448231.447 ops/s

Iteration   6: 42963186.393 ops/s
                 getStamped: 118509.245 ops/s
                 incStamped: 42844677.148 ops/s

Iteration   7: 43671115.418 ops/s
                 getStamped: 116444.928 ops/s
                 incStamped: 43554670.490 ops/s

Iteration   8: 43847084.995 ops/s
                 getStamped: 112691.696 ops/s
                 incStamped: 43734393.299 ops/s

Iteration   9: 43532442.432 ops/s
                 getStamped: 115516.272 ops/s
                 incStamped: 43416926.161 ops/s

Iteration  10: 42713054.369 ops/s
                 getStamped: 117904.358 ops/s
                 incStamped: 42595150.011 ops/s



Result "incStamped":
  43221328.106 ±(99.9%) 1263999.977 ops/s [Average]
  (min, avg, max) = (41905398.590, 43221328.106, 44430600.757), stdev = 836057.723
  CI (99.9%): [41957328.129, 44485328.082] (assumes normal distribution)

Secondary result "getStamped":
  118122.830 ±(99.9%) 9814.610 ops/s [Average]
  (min, avg, max) = (111103.950, 118122.830, 132631.539), stdev = 6491.757
  CI (99.9%): [108308.219, 127937.440] (assumes normal distribution)

Secondary result "incStamped":
  43103205.276 ±(99.9%) 1273078.716 ops/s [Average]
  (min, avg, max) = (41772767.052, 43103205.276, 44319496.807), stdev = 842062.747
  CI (99.9%): [41830126.560, 44376283.992] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 365844058.157 ops/s
# Warmup Iteration   2: 343482677.532 ops/s
# Warmup Iteration   3: 367861676.578 ops/s
# Warmup Iteration   4: 356866626.546 ops/s
# Warmup Iteration   5: 372292758.712 ops/s
Iteration   1: 379237707.187 ops/s
                 getOptimisticStamped: 373138289.572 ops/s
                 incOptimisticStamped: 6099417.615 ops/s

Iteration   2: 378641264.001 ops/s
                 getOptimisticStamped: 372711820.842 ops/s
                 incOptimisticStamped: 5929443.159 ops/s

Iteration   3: 385453031.650 ops/s
                 getOptimisticStamped: 381049609.610 ops/s
                 incOptimisticStamped: 4403422.040 ops/s

Iteration   4: 373967811.862 ops/s
                 getOptimisticStamped: 367742885.962 ops/s
                 incOptimisticStamped: 6224925.899 ops/s

Iteration   5: 379109315.120 ops/s
                 getOptimisticStamped: 373401080.878 ops/s
                 incOptimisticStamped: 5708234.242 ops/s

Iteration   6: 384252460.867 ops/s
                 getOptimisticStamped: 378655245.459 ops/s
                 incOptimisticStamped: 5597215.408 ops/s

Iteration   7: 383558687.386 ops/s
                 getOptimisticStamped: 378617942.813 ops/s
                 incOptimisticStamped: 4940744.573 ops/s

Iteration   8: 366288157.717 ops/s
                 getOptimisticStamped: 357777385.164 ops/s
                 incOptimisticStamped: 8510772.554 ops/s

Iteration   9: 378643881.474 ops/s
                 getOptimisticStamped: 371406711.345 ops/s
                 incOptimisticStamped: 7237170.129 ops/s

Iteration  10: 384610305.790 ops/s
                 getOptimisticStamped: 379434430.897 ops/s
                 incOptimisticStamped: 5175874.893 ops/s



Result "incOptimisticStamped":
  379376262.305 ±(99.9%) 8834405.631 ops/s [Average]
  (min, avg, max) = (366288157.717, 379376262.305, 385453031.650), stdev = 5843412.333
  CI (99.9%): [370541856.674, 388210667.936] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  373393540.254 ±(99.9%) 10454545.388 ops/s [Average]
  (min, avg, max) = (357777385.164, 373393540.254, 381049609.610), stdev = 6915034.470
  CI (99.9%): [362938994.866, 383848085.643] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  5982722.051 ±(99.9%) 1781360.686 ops/s [Average]
  (min, avg, max) = (4403422.040, 5982722.051, 8510772.554), stdev = 1178259.799
  CI (99.9%): [4201361.365, 7764082.737] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 31423972.370 ops/s
# Warmup Iteration   2: 29101793.283 ops/s
# Warmup Iteration   3: 30418901.399 ops/s
# Warmup Iteration   4: 27902998.182 ops/s
# Warmup Iteration   5: 26939341.838 ops/s
Iteration   1: 28518256.994 ops/s
                 getSynchronized: 20851508.634 ops/s
                 incSynchronized: 7666748.360 ops/s

Iteration   2: 28262928.218 ops/s
                 getSynchronized: 21903166.249 ops/s
                 incSynchronized: 6359761.970 ops/s

Iteration   3: 27954653.382 ops/s
                 getSynchronized: 20385363.596 ops/s
                 incSynchronized: 7569289.786 ops/s

Iteration   4: 29127751.101 ops/s
                 getSynchronized: 21084044.383 ops/s
                 incSynchronized: 8043706.719 ops/s

Iteration   5: 28030416.411 ops/s
                 getSynchronized: 21705121.451 ops/s
                 incSynchronized: 6325294.960 ops/s

Iteration   6: 27674661.980 ops/s
                 getSynchronized: 20860556.445 ops/s
                 incSynchronized: 6814105.535 ops/s

Iteration   7: 28334124.478 ops/s
                 getSynchronized: 20691861.728 ops/s
                 incSynchronized: 7642262.750 ops/s

Iteration   8: 27749584.301 ops/s
                 getSynchronized: 20351302.126 ops/s
                 incSynchronized: 7398282.175 ops/s

Iteration   9: 28850838.437 ops/s
                 getSynchronized: 20654666.502 ops/s
                 incSynchronized: 8196171.935 ops/s

Iteration  10: 28157772.534 ops/s
                 getSynchronized: 20539173.167 ops/s
                 incSynchronized: 7618599.367 ops/s



Result "incSynchronized":
  28266098.784 ±(99.9%) 700738.602 ops/s [Average]
  (min, avg, max) = (27674661.980, 28266098.784, 29127751.101), stdev = 463495.198
  CI (99.9%): [27565360.182, 28966837.386] (assumes normal distribution)

Secondary result "getSynchronized":
  20902676.428 ±(99.9%) 795526.398 ops/s [Average]
  (min, avg, max) = (20351302.126, 20902676.428, 21903166.249), stdev = 526191.456
  CI (99.9%): [20107150.030, 21698202.826] (assumes normal distribution)

Secondary result "incSynchronized":
  7363422.356 ±(99.9%) 985162.030 ops/s [Average]
  (min, avg, max) = (6325294.960, 7363422.356, 8196171.935), stdev = 651623.686
  CI (99.9%): [6378260.325, 8348584.386] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 31746727.232 ops/s
# Warmup Iteration   2: 28723376.149 ops/s
# Warmup Iteration   3: 30288198.806 ops/s
# Warmup Iteration   4: 30263675.716 ops/s
# Warmup Iteration   5: 29212930.647 ops/s
Iteration   1: 30634043.339 ops/s
                 getSynchronizedMethod: 24263262.990 ops/s
                 incSynchronizedMethod: 6370780.349 ops/s

Iteration   2: 29756036.936 ops/s
                 getSynchronizedMethod: 23524636.981 ops/s
                 incSynchronizedMethod: 6231399.956 ops/s

Iteration   3: 27416410.144 ops/s
                 getSynchronizedMethod: 21222816.821 ops/s
                 incSynchronizedMethod: 6193593.323 ops/s

Iteration   4: 29515650.169 ops/s
                 getSynchronizedMethod: 22135263.909 ops/s
                 incSynchronizedMethod: 7380386.260 ops/s

Iteration   5: 29293142.148 ops/s
                 getSynchronizedMethod: 22643151.948 ops/s
                 incSynchronizedMethod: 6649990.200 ops/s

Iteration   6: 29585932.279 ops/s
                 getSynchronizedMethod: 22241381.914 ops/s
                 incSynchronizedMethod: 7344550.366 ops/s

Iteration   7: 30608087.303 ops/s
                 getSynchronizedMethod: 22772714.723 ops/s
                 incSynchronizedMethod: 7835372.580 ops/s

Iteration   8: 29898805.566 ops/s
                 getSynchronizedMethod: 22353235.456 ops/s
                 incSynchronizedMethod: 7545570.111 ops/s

Iteration   9: 30669520.364 ops/s
                 getSynchronizedMethod: 22722839.014 ops/s
                 incSynchronizedMethod: 7946681.350 ops/s

Iteration  10: 29710794.667 ops/s
                 getSynchronizedMethod: 23221316.955 ops/s
                 incSynchronizedMethod: 6489477.712 ops/s



Result "incSynchronizedMethod":
  29708842.292 ±(99.9%) 1434834.976 ops/s [Average]
  (min, avg, max) = (27416410.144, 29708842.292, 30669520.364), stdev = 949054.497
  CI (99.9%): [28274007.315, 31143677.268] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  22710062.071 ±(99.9%) 1258387.515 ops/s [Average]
  (min, avg, max) = (21222816.821, 22710062.071, 24263262.990), stdev = 832345.427
  CI (99.9%): [21451674.556, 23968449.586] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  6998780.221 ±(99.9%) 1029740.015 ops/s [Average]
  (min, avg, max) = (6193593.323, 6998780.221, 7946681.350), stdev = 681109.262
  CI (99.9%): [5969040.206, 8028520.236] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 318578235.176 ops/s
# Warmup Iteration   2: 304382510.045 ops/s
# Warmup Iteration   3: 367592204.174 ops/s
# Warmup Iteration   4: 355686950.504 ops/s
# Warmup Iteration   5: 373393350.151 ops/s
Iteration   1: 329018171.931 ops/s
                 getVolatile: 304028047.729 ops/s
                 incVolatile: 24990124.201 ops/s

Iteration   2: 365331446.502 ops/s
                 getVolatile: 340732553.267 ops/s
                 incVolatile: 24598893.234 ops/s

Iteration   3: 357996898.632 ops/s
                 getVolatile: 334307530.629 ops/s
                 incVolatile: 23689368.003 ops/s

Iteration   4: 353335148.329 ops/s
                 getVolatile: 328970592.883 ops/s
                 incVolatile: 24364555.446 ops/s

Iteration   5: 331918812.499 ops/s
                 getVolatile: 306228210.969 ops/s
                 incVolatile: 25690601.530 ops/s

Iteration   6: 337721217.346 ops/s
                 getVolatile: 309953063.203 ops/s
                 incVolatile: 27768154.142 ops/s

Iteration   7: 355266073.629 ops/s
                 getVolatile: 330023739.258 ops/s
                 incVolatile: 25242334.371 ops/s

Iteration   8: 341292036.948 ops/s
                 getVolatile: 316862110.918 ops/s
                 incVolatile: 24429926.030 ops/s

Iteration   9: 362521117.279 ops/s
                 getVolatile: 338297436.046 ops/s
                 incVolatile: 24223681.233 ops/s

Iteration  10: 388794222.294 ops/s
                 getVolatile: 366862702.107 ops/s
                 incVolatile: 21931520.187 ops/s



Result "incVolatile":
  352319514.539 ±(99.9%) 27323288.596 ops/s [Average]
  (min, avg, max) = (329018171.931, 352319514.539, 388794222.294), stdev = 18072663.655
  CI (99.9%): [324996225.943, 379642803.135] (assumes normal distribution)

Secondary result "getVolatile":
  327626598.701 ±(99.9%) 29038781.591 ops/s [Average]
  (min, avg, max) = (304028047.729, 327626598.701, 366862702.107), stdev = 19207356.055
  CI (99.9%): [298587817.110, 356665380.293] (assumes normal distribution)

Secondary result "incVolatile":
  24692915.838 ±(99.9%) 2247033.473 ops/s [Average]
  (min, avg, max) = (21931520.187, 24692915.838, 27768154.142), stdev = 1486273.515
  CI (99.9%): [22445882.364, 26939949.311] (assumes normal distribution)


# Run complete. Total time: 00:03:27

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  189192592.651 ±  9053804.835  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10  165680881.515 ±  9956126.294  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   23511711.136 ±  3428450.503  ops/s
CounterBenchmark.Atomic                                    thrpt   10  332159603.812 ± 36893841.849  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10  304908480.611 ± 40447630.156  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   27251123.201 ±  3768373.043  ops/s
CounterBenchmark.LockFair                                  thrpt   10     335745.350 ±     3941.939  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     268595.469 ±     3154.314  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10      67149.881 ±      787.628  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   45636517.790 ±   710878.830  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   36709545.423 ±  2029239.904  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10    8926972.367 ±  2018928.532  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     333519.631 ±     4161.886  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     266821.453 ±     3336.836  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10      66698.178 ±      825.566  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10    8096544.787 ±   384262.060  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    7931980.974 ±   245610.249  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10     164563.813 ±   322850.995  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     334787.136 ±     4186.738  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     267829.868 ±     3349.756  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10      66957.268 ±      836.983  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   35864782.158 ±   617639.150  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   28788286.176 ±  1264857.471  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10    7076495.982 ±  1012398.172  ops/s
CounterBenchmark.Stamped                                   thrpt   10   43221328.106 ±  1263999.977  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10     118122.830 ±     9814.610  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   43103205.276 ±  1273078.716  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  379376262.305 ±  8834405.631  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  373393540.254 ± 10454545.388  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10    5982722.051 ±  1781360.686  ops/s
CounterBenchmark.Synchronized                              thrpt   10   28266098.784 ±   700738.602  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   20902676.428 ±   795526.398  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10    7363422.356 ±   985162.030  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   29708842.292 ±  1434834.976  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   22710062.071 ±  1258387.515  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10    6998780.221 ±  1029740.015  ops/s
CounterBenchmark.Volatile                                  thrpt   10  352319514.539 ± 27323288.596  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  327626598.701 ± 29038781.591  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   24692915.838 ±  2247033.473  ops/s

Benchmark result is saved to ./counters/results/results-16-4.csv
Running benchmarks with thread group distribution: 5,5
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 139045691.745 ops/s
# Warmup Iteration   2: 121910165.265 ops/s
# Warmup Iteration   3: 131347303.140 ops/s
# Warmup Iteration   4: 128554143.528 ops/s
# Warmup Iteration   5: 135350865.038 ops/s
Iteration   1: 141075960.904 ops/s
                 getAdder: 61885332.756 ops/s
                 incAdder: 79190628.148 ops/s

Iteration   2: 151010698.324 ops/s
                 getAdder: 61248886.506 ops/s
                 incAdder: 89761811.818 ops/s

Iteration   3: 153248732.225 ops/s
                 getAdder: 70838840.639 ops/s
                 incAdder: 82409891.586 ops/s

Iteration   4: 139246230.921 ops/s
                 getAdder: 61755087.029 ops/s
                 incAdder: 77491143.891 ops/s

Iteration   5: 127870936.140 ops/s
                 getAdder: 54039076.264 ops/s
                 incAdder: 73831859.875 ops/s

Iteration   6: 141685509.804 ops/s
                 getAdder: 56423307.636 ops/s
                 incAdder: 85262202.168 ops/s

Iteration   7: 131522786.817 ops/s
                 getAdder: 61428904.053 ops/s
                 incAdder: 70093882.765 ops/s

Iteration   8: 151748503.068 ops/s
                 getAdder: 65667926.082 ops/s
                 incAdder: 86080576.986 ops/s

Iteration   9: 146459918.542 ops/s
                 getAdder: 68718116.091 ops/s
                 incAdder: 77741802.451 ops/s

Iteration  10: 148837050.358 ops/s
                 getAdder: 60576220.217 ops/s
                 incAdder: 88260830.141 ops/s



Result "getAdder":
  143270632.710 ±(99.9%) 13056059.324 ops/s [Average]
  (min, avg, max) = (127870936.140, 143270632.710, 153248732.225), stdev = 8635774.863
  CI (99.9%): [130214573.386, 156326692.034] (assumes normal distribution)

Secondary result "getAdder":
  62258169.727 ±(99.9%) 7700943.315 ops/s [Average]
  (min, avg, max) = (54039076.264, 62258169.727, 70838840.639), stdev = 5093697.191
  CI (99.9%): [54557226.412, 69959113.043] (assumes normal distribution)

Secondary result "incAdder":
  81012462.983 ±(99.9%) 9719637.571 ops/s [Average]
  (min, avg, max) = (70093882.765, 81012462.983, 89761811.818), stdev = 6428938.451
  CI (99.9%): [71292825.412, 90732100.554] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:13
# Fork: 1 of 1
# Warmup Iteration   1: 86576057.161 ops/s
# Warmup Iteration   2: 119719040.315 ops/s
# Warmup Iteration   3: 98121675.320 ops/s
# Warmup Iteration   4: 97461621.764 ops/s
# Warmup Iteration   5: 95193417.692 ops/s
Iteration   1: 117595539.815 ops/s
                 getAtomic: 81028615.726 ops/s
                 incAtomic: 36566924.089 ops/s

Iteration   2: 112603792.042 ops/s
                 getAtomic: 74453366.217 ops/s
                 incAtomic: 38150425.825 ops/s

Iteration   3: 111149356.959 ops/s
                 getAtomic: 73945979.866 ops/s
                 incAtomic: 37203377.093 ops/s

Iteration   4: 109659788.671 ops/s
                 getAtomic: 67848827.023 ops/s
                 incAtomic: 41810961.647 ops/s

Iteration   5: 134330898.124 ops/s
                 getAtomic: 95991493.241 ops/s
                 incAtomic: 38339404.883 ops/s

Iteration   6: 102995516.292 ops/s
                 getAtomic: 65626364.910 ops/s
                 incAtomic: 37369151.382 ops/s

Iteration   7: 100757861.611 ops/s
                 getAtomic: 62687859.173 ops/s
                 incAtomic: 38070002.437 ops/s

Iteration   8: 113205462.915 ops/s
                 getAtomic: 75024262.122 ops/s
                 incAtomic: 38181200.792 ops/s

Iteration   9: 99410246.858 ops/s
                 getAtomic: 61364464.419 ops/s
                 incAtomic: 38045782.438 ops/s

Iteration  10: 113684057.867 ops/s
                 getAtomic: 75872856.649 ops/s
                 incAtomic: 37811201.218 ops/s



Result "getAtomic":
  111539252.115 ±(99.9%) 15157817.122 ops/s [Average]
  (min, avg, max) = (99410246.858, 111539252.115, 134330898.124), stdev = 10025957.513
  CI (99.9%): [96381434.994, 126697069.237] (assumes normal distribution)

Secondary result "getAtomic":
  73384408.935 ±(99.9%) 15365003.464 ops/s [Average]
  (min, avg, max) = (61364464.419, 73384408.935, 95991493.241), stdev = 10162998.450
  CI (99.9%): [58019405.471, 88749412.399] (assumes normal distribution)

Secondary result "incAtomic":
  38154843.181 ±(99.9%) 2113192.679 ops/s [Average]
  (min, avg, max) = (36566924.089, 38154843.181, 41810961.647), stdev = 1397746.116
  CI (99.9%): [36041650.502, 40268035.860] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 338401.895 ops/s
# Warmup Iteration   2: 332728.204 ops/s
# Warmup Iteration   3: 336267.064 ops/s
# Warmup Iteration   4: 340730.330 ops/s
# Warmup Iteration   5: 341691.810 ops/s
Iteration   1: 345750.438 ops/s
                 getFairLock: 172874.790 ops/s
                 incFairLock: 172875.648 ops/s

Iteration   2: 345238.720 ops/s
                 getFairLock: 172619.993 ops/s
                 incFairLock: 172618.727 ops/s

Iteration   3: 342523.854 ops/s
                 getFairLock: 171259.992 ops/s
                 incFairLock: 171263.862 ops/s

Iteration   4: 332113.150 ops/s
                 getFairLock: 166054.192 ops/s
                 incFairLock: 166058.958 ops/s

Iteration   5: 344032.741 ops/s
                 getFairLock: 172017.034 ops/s
                 incFairLock: 172015.707 ops/s

Iteration   6: 344274.757 ops/s
                 getFairLock: 172138.472 ops/s
                 incFairLock: 172136.286 ops/s

Iteration   7: 346495.389 ops/s
                 getFairLock: 173247.648 ops/s
                 incFairLock: 173247.741 ops/s

Iteration   8: 343791.703 ops/s
                 getFairLock: 171899.936 ops/s
                 incFairLock: 171891.766 ops/s

Iteration   9: 337908.477 ops/s
                 getFairLock: 168958.891 ops/s
                 incFairLock: 168949.586 ops/s

Iteration  10: 344868.065 ops/s
                 getFairLock: 172433.883 ops/s
                 incFairLock: 172434.182 ops/s



Result "getFairLock":
  342699.729 ±(99.9%) 6673.798 ops/s [Average]
  (min, avg, max) = (332113.150, 342699.729, 346495.389), stdev = 4414.304
  CI (99.9%): [336025.931, 349373.528] (assumes normal distribution)

Secondary result "getFairLock":
  171350.483 ±(99.9%) 3337.287 ops/s [Average]
  (min, avg, max) = (166054.192, 171350.483, 173247.648), stdev = 2207.409
  CI (99.9%): [168013.197, 174687.770] (assumes normal distribution)

Secondary result "incFairLock":
  171349.246 ±(99.9%) 3336.515 ops/s [Average]
  (min, avg, max) = (166058.958, 171349.246, 173247.741), stdev = 2206.898
  CI (99.9%): [168012.731, 174685.761] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:38
# Fork: 1 of 1
# Warmup Iteration   1: 39638639.105 ops/s
# Warmup Iteration   2: 43695294.987 ops/s
# Warmup Iteration   3: 43851049.462 ops/s
# Warmup Iteration   4: 47210471.373 ops/s
# Warmup Iteration   5: 48093865.276 ops/s
Iteration   1: 47821120.476 ops/s
                 getNonFairLock: 25128626.590 ops/s
                 incNonFairLock: 22692493.886 ops/s

Iteration   2: 48086679.872 ops/s
                 getNonFairLock: 24569158.384 ops/s
                 incNonFairLock: 23517521.488 ops/s

Iteration   3: 48189700.946 ops/s
                 getNonFairLock: 22969719.612 ops/s
                 incNonFairLock: 25219981.334 ops/s

Iteration   4: 48591169.422 ops/s
                 getNonFairLock: 24487936.811 ops/s
                 incNonFairLock: 24103232.612 ops/s

Iteration   5: 48697599.050 ops/s
                 getNonFairLock: 25955789.512 ops/s
                 incNonFairLock: 22741809.539 ops/s

Iteration   6: 47778313.902 ops/s
                 getNonFairLock: 24734167.049 ops/s
                 incNonFairLock: 23044146.852 ops/s

Iteration   7: 47510448.701 ops/s
                 getNonFairLock: 26772553.479 ops/s
                 incNonFairLock: 20737895.222 ops/s

Iteration   8: 47965090.829 ops/s
                 getNonFairLock: 24007545.802 ops/s
                 incNonFairLock: 23957545.027 ops/s

Iteration   9: 48077511.638 ops/s
                 getNonFairLock: 24977711.726 ops/s
                 incNonFairLock: 23099799.912 ops/s

Iteration  10: 48750205.088 ops/s
                 getNonFairLock: 24683615.029 ops/s
                 incNonFairLock: 24066590.059 ops/s



Result "getNonFairLock":
  48146783.992 ±(99.9%) 628428.410 ops/s [Average]
  (min, avg, max) = (47510448.701, 48146783.992, 48750205.088), stdev = 415666.483
  CI (99.9%): [47518355.583, 48775212.402] (assumes normal distribution)

Secondary result "getNonFairLock":
  24828682.399 ±(99.9%) 1553663.978 ops/s [Average]
  (min, avg, max) = (22969719.612, 24828682.399, 26772553.479), stdev = 1027652.524
  CI (99.9%): [23275018.422, 26382346.377] (assumes normal distribution)

Secondary result "incNonFairLock":
  23318101.593 ±(99.9%) 1799197.553 ops/s [Average]
  (min, avg, max) = (20737895.222, 23318101.593, 25219981.334), stdev = 1190057.782
  CI (99.9%): [21518904.040, 25117299.146] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 329848.849 ops/s
# Warmup Iteration   2: 333271.080 ops/s
# Warmup Iteration   3: 331089.209 ops/s
# Warmup Iteration   4: 338658.902 ops/s
# Warmup Iteration   5: 318305.120 ops/s
Iteration   1: 334027.449 ops/s
                 getFairRWLock: 167008.638 ops/s
                 incFairRWLock: 167018.812 ops/s

Iteration   2: 336892.299 ops/s
                 getFairRWLock: 168445.331 ops/s
                 incFairRWLock: 168446.968 ops/s

Iteration   3: 329879.733 ops/s
                 getFairRWLock: 164937.226 ops/s
                 incFairRWLock: 164942.507 ops/s

Iteration   4: 332717.319 ops/s
                 getFairRWLock: 166358.580 ops/s
                 incFairRWLock: 166358.739 ops/s

Iteration   5: 333951.407 ops/s
                 getFairRWLock: 166972.262 ops/s
                 incFairRWLock: 166979.146 ops/s

Iteration   6: 334027.745 ops/s
                 getFairRWLock: 167013.330 ops/s
                 incFairRWLock: 167014.415 ops/s

Iteration   7: 332780.543 ops/s
                 getFairRWLock: 166389.364 ops/s
                 incFairRWLock: 166391.179 ops/s

Iteration   8: 333216.649 ops/s
                 getFairRWLock: 166609.064 ops/s
                 incFairRWLock: 166607.585 ops/s

Iteration   9: 329894.738 ops/s
                 getFairRWLock: 164944.022 ops/s
                 incFairRWLock: 164950.716 ops/s

Iteration  10: 333890.452 ops/s
                 getFairRWLock: 166941.780 ops/s
                 incFairRWLock: 166948.672 ops/s



Result "getFairRWLock":
  333127.834 ±(99.9%) 3120.857 ops/s [Average]
  (min, avg, max) = (329879.733, 333127.834, 336892.299), stdev = 2064.254
  CI (99.9%): [330006.976, 336248.691] (assumes normal distribution)

Secondary result "getFairRWLock":
  166561.960 ±(99.9%) 1560.936 ops/s [Average]
  (min, avg, max) = (164937.226, 166561.960, 168445.331), stdev = 1032.462
  CI (99.9%): [165001.024, 168122.896] (assumes normal distribution)

Secondary result "incFairRWLock":
  166565.874 ±(99.9%) 1559.926 ops/s [Average]
  (min, avg, max) = (164942.507, 166565.874, 168446.968), stdev = 1031.795
  CI (99.9%): [165005.948, 168125.800] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 16689518.679 ops/s
# Warmup Iteration   2: 10676359.129 ops/s
# Warmup Iteration   3: 11754873.877 ops/s
# Warmup Iteration   4: 10822280.251 ops/s
# Warmup Iteration   5: 9749488.005 ops/s
Iteration   1: 12356644.152 ops/s
                 getNonFairRWLock: 8095062.540 ops/s
                 incNonFairRWLock: 4261581.612 ops/s

Iteration   2: 9271727.468 ops/s
                 getNonFairRWLock: 7892974.594 ops/s
                 incNonFairRWLock: 1378752.875 ops/s

Iteration   3: 9060233.421 ops/s
                 getNonFairRWLock: 8210311.931 ops/s
                 incNonFairRWLock: 849921.491 ops/s

Iteration   4: 8526182.620 ops/s
                 getNonFairRWLock: 7744912.256 ops/s
                 incNonFairRWLock: 781270.364 ops/s

Iteration   5: 8501422.208 ops/s
                 getNonFairRWLock: 7933628.505 ops/s
                 incNonFairRWLock: 567793.704 ops/s

Iteration   6: 9151889.794 ops/s
                 getNonFairRWLock: 7950593.185 ops/s
                 incNonFairRWLock: 1201296.609 ops/s

Iteration   7: 8595477.068 ops/s
                 getNonFairRWLock: 7987846.194 ops/s
                 incNonFairRWLock: 607630.874 ops/s

Iteration   8: 12539244.685 ops/s
                 getNonFairRWLock: 8523262.719 ops/s
                 incNonFairRWLock: 4015981.966 ops/s

Iteration   9: 9630431.955 ops/s
                 getNonFairRWLock: 7961624.090 ops/s
                 incNonFairRWLock: 1668807.865 ops/s

Iteration  10: 8799250.172 ops/s
                 getNonFairRWLock: 7773051.332 ops/s
                 incNonFairRWLock: 1026198.841 ops/s



Result "getNonFairRWLock":
  9643250.355 ±(99.9%) 2300066.939 ops/s [Average]
  (min, avg, max) = (8501422.208, 9643250.355, 12539244.685), stdev = 1521351.869
  CI (99.9%): [7343183.415, 11943317.294] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  8007326.735 ±(99.9%) 342921.612 ops/s [Average]
  (min, avg, max) = (7744912.256, 8007326.735, 8523262.719), stdev = 226821.414
  CI (99.9%): [7664405.123, 8350248.347] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  1635923.620 ±(99.9%) 2061477.159 ops/s [Average]
  (min, avg, max) = (567793.704, 1635923.620, 4261581.612), stdev = 1363539.502
  CI (99.9%): [≈ 0, 3697400.779] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:49
# Fork: 1 of 1
# Warmup Iteration   1: 337306.837 ops/s
# Warmup Iteration   2: 330426.368 ops/s
# Warmup Iteration   3: 345783.400 ops/s
# Warmup Iteration   4: 344721.069 ops/s
# Warmup Iteration   5: 337044.322 ops/s
Iteration   1: 346047.350 ops/s
                 getFairSemaphore: 173023.181 ops/s
                 incFairSemaphore: 173024.170 ops/s

Iteration   2: 349042.282 ops/s
                 getFairSemaphore: 174521.761 ops/s
                 incFairSemaphore: 174520.521 ops/s

Iteration   3: 346836.586 ops/s
                 getFairSemaphore: 173418.256 ops/s
                 incFairSemaphore: 173418.330 ops/s

Iteration   4: 345080.071 ops/s
                 getFairSemaphore: 172539.731 ops/s
                 incFairSemaphore: 172540.340 ops/s

Iteration   5: 344298.036 ops/s
                 getFairSemaphore: 172150.446 ops/s
                 incFairSemaphore: 172147.590 ops/s

Iteration   6: 344729.552 ops/s
                 getFairSemaphore: 172326.630 ops/s
                 incFairSemaphore: 172402.922 ops/s

Iteration   7: 343618.131 ops/s
                 getFairSemaphore: 171808.148 ops/s
                 incFairSemaphore: 171809.982 ops/s

Iteration   8: 338451.468 ops/s
                 getFairSemaphore: 169231.101 ops/s
                 incFairSemaphore: 169220.367 ops/s

Iteration   9: 338765.222 ops/s
                 getFairSemaphore: 169382.592 ops/s
                 incFairSemaphore: 169382.630 ops/s

Iteration  10: 337754.511 ops/s
                 getFairSemaphore: 168877.173 ops/s
                 incFairSemaphore: 168877.338 ops/s



Result "getFairSemaphore":
  343462.321 ±(99.9%) 5831.497 ops/s [Average]
  (min, avg, max) = (337754.511, 343462.321, 349042.282), stdev = 3857.175
  CI (99.9%): [337630.823, 349293.818] (assumes normal distribution)

Secondary result "getFairSemaphore":
  171727.902 ±(99.9%) 2912.669 ops/s [Average]
  (min, avg, max) = (168877.173, 171727.902, 174521.761), stdev = 1926.550
  CI (99.9%): [168815.233, 174640.571] (assumes normal distribution)

Secondary result "incFairSemaphore":
  171734.419 ±(99.9%) 2918.945 ops/s [Average]
  (min, avg, max) = (168877.338, 171734.419, 174520.521), stdev = 1930.702
  CI (99.9%): [168815.474, 174653.364] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 34819619.917 ops/s
# Warmup Iteration   2: 34600410.311 ops/s
# Warmup Iteration   3: 35903425.201 ops/s
# Warmup Iteration   4: 35746547.996 ops/s
# Warmup Iteration   5: 35784150.701 ops/s
Iteration   1: 36466558.653 ops/s
                 getNonFairSemaphore: 18156293.317 ops/s
                 incNonFairSemaphore: 18310265.335 ops/s

Iteration   2: 36406911.929 ops/s
                 getNonFairSemaphore: 18681464.766 ops/s
                 incNonFairSemaphore: 17725447.163 ops/s

Iteration   3: 36752100.205 ops/s
                 getNonFairSemaphore: 17985157.261 ops/s
                 incNonFairSemaphore: 18766942.944 ops/s

Iteration   4: 35327484.235 ops/s
                 getNonFairSemaphore: 18020288.711 ops/s
                 incNonFairSemaphore: 17307195.525 ops/s

Iteration   5: 36235876.508 ops/s
                 getNonFairSemaphore: 19342594.196 ops/s
                 incNonFairSemaphore: 16893282.312 ops/s

Iteration   6: 35880279.993 ops/s
                 getNonFairSemaphore: 16936951.689 ops/s
                 incNonFairSemaphore: 18943328.304 ops/s

Iteration   7: 36110370.379 ops/s
                 getNonFairSemaphore: 17367514.826 ops/s
                 incNonFairSemaphore: 18742855.553 ops/s

Iteration   8: 35857822.932 ops/s
                 getNonFairSemaphore: 18343544.916 ops/s
                 incNonFairSemaphore: 17514278.015 ops/s

Iteration   9: 36408909.063 ops/s
                 getNonFairSemaphore: 19274019.510 ops/s
                 incNonFairSemaphore: 17134889.552 ops/s

Iteration  10: 35083277.041 ops/s
                 getNonFairSemaphore: 17109920.109 ops/s
                 incNonFairSemaphore: 17973356.932 ops/s



Result "getNonFairSemaphore":
  36052959.094 ±(99.9%) 794119.984 ops/s [Average]
  (min, avg, max) = (35083277.041, 36052959.094, 36752100.205), stdev = 525261.201
  CI (99.9%): [35258839.110, 36847079.078] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  18121774.930 ±(99.9%) 1255562.055 ops/s [Average]
  (min, avg, max) = (16936951.689, 18121774.930, 19342594.196), stdev = 830476.560
  CI (99.9%): [16866212.875, 19377336.985] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  17931184.164 ±(99.9%) 1109158.629 ops/s [Average]
  (min, avg, max) = (16893282.312, 17931184.164, 18943328.304), stdev = 733639.758
  CI (99.9%): [16822025.535, 19040342.793] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:18
# Fork: 1 of 1
# Warmup Iteration   1: 50223669.659 ops/s
# Warmup Iteration   2: 50457547.417 ops/s
# Warmup Iteration   3: 52155304.991 ops/s
# Warmup Iteration   4: 52520389.848 ops/s
# Warmup Iteration   5: 51574071.579 ops/s
Iteration   1: 51778150.994 ops/s
                 getStamped: 22473.256 ops/s
                 incStamped: 51755677.739 ops/s

Iteration   2: 50790345.759 ops/s
                 getStamped: 26494.331 ops/s
                 incStamped: 50763851.428 ops/s

Iteration   3: 51257863.232 ops/s
                 getStamped: 25145.092 ops/s
                 incStamped: 51232718.141 ops/s

Iteration   4: 51354119.838 ops/s
                 getStamped: 25540.036 ops/s
                 incStamped: 51328579.802 ops/s

Iteration   5: 51267308.409 ops/s
                 getStamped: 25950.792 ops/s
                 incStamped: 51241357.617 ops/s

Iteration   6: 51167852.993 ops/s
                 getStamped: 25522.031 ops/s
                 incStamped: 51142330.962 ops/s

Iteration   7: 51928592.153 ops/s
                 getStamped: 23481.469 ops/s
                 incStamped: 51905110.684 ops/s

Iteration   8: 51264587.243 ops/s
                 getStamped: 26742.818 ops/s
                 incStamped: 51237844.424 ops/s

Iteration   9: 52205153.014 ops/s
                 getStamped: 21703.687 ops/s
                 incStamped: 52183449.327 ops/s

Iteration  10: 52101099.260 ops/s
                 getStamped: 21198.314 ops/s
                 incStamped: 52079900.946 ops/s



Result "getStamped":
  51511507.290 ±(99.9%) 698606.539 ops/s [Average]
  (min, avg, max) = (50790345.759, 51511507.290, 52205153.014), stdev = 462084.971
  CI (99.9%): [50812900.751, 52210113.829] (assumes normal distribution)

Secondary result "getStamped":
  24425.183 ±(99.9%) 3084.600 ops/s [Average]
  (min, avg, max) = (21198.314, 24425.183, 26742.818), stdev = 2040.272
  CI (99.9%): [21340.583, 27509.782] (assumes normal distribution)

Secondary result "incStamped":
  51487082.107 ±(99.9%) 701470.819 ops/s [Average]
  (min, avg, max) = (50763851.428, 51487082.107, 52183449.327), stdev = 463979.515
  CI (99.9%): [50785611.288, 52188552.926] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 179491350.609 ops/s
# Warmup Iteration   2: 176852610.208 ops/s
# Warmup Iteration   3: 198925802.096 ops/s
# Warmup Iteration   4: 195884090.093 ops/s
# Warmup Iteration   5: 225555586.709 ops/s
Iteration   1: 204813727.381 ops/s
                 getOptimisticStamped: 171673326.813 ops/s
                 incOptimisticStamped: 33140400.568 ops/s

Iteration   2: 218336550.375 ops/s
                 getOptimisticStamped: 187072268.379 ops/s
                 incOptimisticStamped: 31264281.996 ops/s

Iteration   3: 195249496.174 ops/s
                 getOptimisticStamped: 161802520.526 ops/s
                 incOptimisticStamped: 33446975.648 ops/s

Iteration   4: 203830798.358 ops/s
                 getOptimisticStamped: 170343443.437 ops/s
                 incOptimisticStamped: 33487354.921 ops/s

Iteration   5: 199135159.643 ops/s
                 getOptimisticStamped: 166568371.642 ops/s
                 incOptimisticStamped: 32566788.001 ops/s

Iteration   6: 210788332.527 ops/s
                 getOptimisticStamped: 178832403.776 ops/s
                 incOptimisticStamped: 31955928.751 ops/s

Iteration   7: 202293167.399 ops/s
                 getOptimisticStamped: 169625834.333 ops/s
                 incOptimisticStamped: 32667333.066 ops/s

Iteration   8: 209737105.915 ops/s
                 getOptimisticStamped: 177002890.103 ops/s
                 incOptimisticStamped: 32734215.812 ops/s

Iteration   9: 206892141.571 ops/s
                 getOptimisticStamped: 174530187.380 ops/s
                 incOptimisticStamped: 32361954.191 ops/s

Iteration  10: 214460753.502 ops/s
                 getOptimisticStamped: 182767661.640 ops/s
                 incOptimisticStamped: 31693091.862 ops/s



Result "getOptimisticStamped":
  206553723.284 ±(99.9%) 10582417.839 ops/s [Average]
  (min, avg, max) = (195249496.174, 206553723.284, 218336550.375), stdev = 6999614.179
  CI (99.9%): [195971305.445, 217136141.124] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  174021890.803 ±(99.9%) 11517563.823 ops/s [Average]
  (min, avg, max) = (161802520.526, 174021890.803, 187072268.379), stdev = 7618155.346
  CI (99.9%): [162504326.980, 185539454.625] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  32531832.482 ±(99.9%) 1110080.405 ops/s [Average]
  (min, avg, max) = (31264281.996, 32531832.482, 33487354.921), stdev = 734249.456
  CI (99.9%): [31421752.077, 33641912.887] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 32240718.174 ops/s
# Warmup Iteration   2: 30218552.815 ops/s
# Warmup Iteration   3: 31139080.168 ops/s
# Warmup Iteration   4: 29191035.752 ops/s
# Warmup Iteration   5: 28364360.228 ops/s
Iteration   1: 29172317.218 ops/s
                 getSynchronized: 11085763.108 ops/s
                 incSynchronized: 18086554.110 ops/s

Iteration   2: 29724816.784 ops/s
                 getSynchronized: 10844208.539 ops/s
                 incSynchronized: 18880608.245 ops/s

Iteration   3: 29558047.475 ops/s
                 getSynchronized: 11721351.012 ops/s
                 incSynchronized: 17836696.463 ops/s

Iteration   4: 29740459.920 ops/s
                 getSynchronized: 11711339.838 ops/s
                 incSynchronized: 18029120.082 ops/s

Iteration   5: 30415056.704 ops/s
                 getSynchronized: 11542617.914 ops/s
                 incSynchronized: 18872438.790 ops/s

Iteration   6: 29189695.766 ops/s
                 getSynchronized: 11333422.754 ops/s
                 incSynchronized: 17856273.011 ops/s

Iteration   7: 29230710.321 ops/s
                 getSynchronized: 11788289.141 ops/s
                 incSynchronized: 17442421.180 ops/s

Iteration   8: 29090480.189 ops/s
                 getSynchronized: 10832571.780 ops/s
                 incSynchronized: 18257908.409 ops/s

Iteration   9: 28943341.300 ops/s
                 getSynchronized: 11406830.527 ops/s
                 incSynchronized: 17536510.773 ops/s

Iteration  10: 29757931.284 ops/s
                 getSynchronized: 11501264.154 ops/s
                 incSynchronized: 18256667.130 ops/s



Result "getSynchronized":
  29482285.696 ±(99.9%) 669746.807 ops/s [Average]
  (min, avg, max) = (28943341.300, 29482285.696, 30415056.704), stdev = 442996.045
  CI (99.9%): [28812538.889, 30152032.503] (assumes normal distribution)

Secondary result "getSynchronized":
  11376765.877 ±(99.9%) 531010.552 ops/s [Average]
  (min, avg, max) = (10832571.780, 11376765.877, 11788289.141), stdev = 351230.602
  CI (99.9%): [10845755.325, 11907776.428] (assumes normal distribution)

Secondary result "incSynchronized":
  18105519.819 ±(99.9%) 737055.592 ops/s [Average]
  (min, avg, max) = (17442421.180, 18105519.819, 18880608.245), stdev = 487516.638
  CI (99.9%): [17368464.228, 18842575.411] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 36584405.989 ops/s
# Warmup Iteration   2: 35259982.048 ops/s
# Warmup Iteration   3: 36217415.082 ops/s
# Warmup Iteration   4: 37197043.617 ops/s
# Warmup Iteration   5: 35706582.736 ops/s
Iteration   1: 34831835.744 ops/s
                 getSynchronizedMethod: 15979596.555 ops/s
                 incSynchronizedMethod: 18852239.189 ops/s

Iteration   2: 35263087.419 ops/s
                 getSynchronizedMethod: 15998727.528 ops/s
                 incSynchronizedMethod: 19264359.891 ops/s

Iteration   3: 35484963.255 ops/s
                 getSynchronizedMethod: 15256697.559 ops/s
                 incSynchronizedMethod: 20228265.695 ops/s

Iteration   4: 34606170.216 ops/s
                 getSynchronizedMethod: 16568762.894 ops/s
                 incSynchronizedMethod: 18037407.322 ops/s

Iteration   5: 37106719.390 ops/s
                 getSynchronizedMethod: 17142545.938 ops/s
                 incSynchronizedMethod: 19964173.452 ops/s

Iteration   6: 35862715.098 ops/s
                 getSynchronizedMethod: 16998120.495 ops/s
                 incSynchronizedMethod: 18864594.603 ops/s

Iteration   7: 37430743.489 ops/s
                 getSynchronizedMethod: 15862906.408 ops/s
                 incSynchronizedMethod: 21567837.081 ops/s

Iteration   8: 36692172.841 ops/s
                 getSynchronizedMethod: 14874778.085 ops/s
                 incSynchronizedMethod: 21817394.756 ops/s

Iteration   9: 35106018.723 ops/s
                 getSynchronizedMethod: 14432514.036 ops/s
                 incSynchronizedMethod: 20673504.686 ops/s

Iteration  10: 36840888.949 ops/s
                 getSynchronizedMethod: 16054201.316 ops/s
                 incSynchronizedMethod: 20786687.633 ops/s



Result "getSynchronizedMethod":
  35922531.512 ±(99.9%) 1539470.383 ops/s [Average]
  (min, avg, max) = (34606170.216, 35922531.512, 37430743.489), stdev = 1018264.341
  CI (99.9%): [34383061.129, 37462001.896] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  15916885.081 ±(99.9%) 1319340.503 ops/s [Average]
  (min, avg, max) = (14432514.036, 15916885.081, 17142545.938), stdev = 872662.055
  CI (99.9%): [14597544.578, 17236225.585] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  20005646.431 ±(99.9%) 1877926.495 ops/s [Average]
  (min, avg, max) = (18037407.322, 20005646.431, 21817394.756), stdev = 1242132.103
  CI (99.9%): [18127719.936, 21883572.926] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 110250604.790 ops/s
# Warmup Iteration   2: 136472599.443 ops/s
# Warmup Iteration   3: 134463013.720 ops/s
# Warmup Iteration   4: 123962801.422 ops/s
# Warmup Iteration   5: 141600140.514 ops/s
Iteration   1: 142117623.036 ops/s
                 getVolatile: 99450960.091 ops/s
                 incVolatile: 42666662.945 ops/s

Iteration   2: 140789208.241 ops/s
                 getVolatile: 100756368.641 ops/s
                 incVolatile: 40032839.600 ops/s

Iteration   3: 121975171.287 ops/s
                 getVolatile: 81981082.004 ops/s
                 incVolatile: 39994089.283 ops/s

Iteration   4: 129708058.095 ops/s
                 getVolatile: 86638195.292 ops/s
                 incVolatile: 43069862.803 ops/s

Iteration   5: 147529827.571 ops/s
                 getVolatile: 106581596.368 ops/s
                 incVolatile: 40948231.202 ops/s

Iteration   6: 133608209.312 ops/s
                 getVolatile: 90257118.848 ops/s
                 incVolatile: 43351090.465 ops/s

Iteration   7: 155037068.961 ops/s
                 getVolatile: 115433465.955 ops/s
                 incVolatile: 39603603.006 ops/s

Iteration   8: 128015353.841 ops/s
                 getVolatile: 88085996.783 ops/s
                 incVolatile: 39929357.058 ops/s

Iteration   9: 155858164.242 ops/s
                 getVolatile: 115630455.850 ops/s
                 incVolatile: 40227708.392 ops/s

Iteration  10: 131197980.247 ops/s
                 getVolatile: 90286834.943 ops/s
                 incVolatile: 40911145.304 ops/s



Result "getVolatile":
  138583666.483 ±(99.9%) 17545370.867 ops/s [Average]
  (min, avg, max) = (121975171.287, 138583666.483, 155858164.242), stdev = 11605176.488
  CI (99.9%): [121038295.617, 156129037.350] (assumes normal distribution)

Secondary result "getVolatile":
  97510207.478 ±(99.9%) 18164219.553 ops/s [Average]
  (min, avg, max) = (81981082.004, 97510207.478, 115630455.850), stdev = 12014506.577
  CI (99.9%): [79345987.925, 115674427.031] (assumes normal distribution)

Secondary result "incVolatile":
  41073459.006 ±(99.9%) 2149120.952 ops/s [Average]
  (min, avg, max) = (39603603.006, 41073459.006, 43351090.465), stdev = 1421510.444
  CI (99.9%): [38924338.054, 43222579.958] (assumes normal distribution)


# Run complete. Total time: 00:03:23

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  143270632.710 ± 13056059.324  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   62258169.727 ±  7700943.315  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   81012462.983 ±  9719637.571  ops/s
CounterBenchmark.Atomic                                    thrpt   10  111539252.115 ± 15157817.122  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   73384408.935 ± 15365003.464  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   38154843.181 ±  2113192.679  ops/s
CounterBenchmark.LockFair                                  thrpt   10     342699.729 ±     6673.798  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     171350.483 ±     3337.287  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     171349.246 ±     3336.515  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   48146783.992 ±   628428.410  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   24828682.399 ±  1553663.978  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   23318101.593 ±  1799197.553  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     333127.834 ±     3120.857  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     166561.960 ±     1560.936  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     166565.874 ±     1559.926  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10    9643250.355 ±  2300066.939  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    8007326.735 ±   342921.612  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10    1635923.620 ±  2061477.159  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     343462.321 ±     5831.497  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     171727.902 ±     2912.669  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     171734.419 ±     2918.945  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   36052959.094 ±   794119.984  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   18121774.930 ±  1255562.055  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   17931184.164 ±  1109158.629  ops/s
CounterBenchmark.Stamped                                   thrpt   10   51511507.290 ±   698606.539  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10      24425.183 ±     3084.600  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   51487082.107 ±   701470.819  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  206553723.284 ± 10582417.839  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  174021890.803 ± 11517563.823  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   32531832.482 ±  1110080.405  ops/s
CounterBenchmark.Synchronized                              thrpt   10   29482285.696 ±   669746.807  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   11376765.877 ±   531010.552  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   18105519.819 ±   737055.592  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   35922531.512 ±  1539470.383  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   15916885.081 ±  1319340.503  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   20005646.431 ±  1877926.495  ops/s
CounterBenchmark.Volatile                                  thrpt   10  138583666.483 ± 17545370.867  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10   97510207.478 ± 18164219.553  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   41073459.006 ±  2149120.952  ops/s

Benchmark result is saved to ./counters/results/results-5-5.csv
Running benchmarks with thread group distribution: 10,10
# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Adder

# Run progress: 0.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 138227552.759 ops/s
# Warmup Iteration   2: 141540165.121 ops/s
# Warmup Iteration   3: 147152632.643 ops/s
# Warmup Iteration   4: 145288349.078 ops/s
# Warmup Iteration   5: 142068709.709 ops/s
Iteration   1: 138667491.515 ops/s
                 getAdder: 65210724.050 ops/s
                 incAdder: 73456767.465 ops/s

Iteration   2: 135351324.463 ops/s
                 getAdder: 56586899.427 ops/s
                 incAdder: 78764425.036 ops/s

Iteration   3: 144689522.805 ops/s
                 getAdder: 65579066.291 ops/s
                 incAdder: 79110456.514 ops/s

Iteration   4: 149402510.568 ops/s
                 getAdder: 65477122.930 ops/s
                 incAdder: 83925387.638 ops/s

Iteration   5: 142825229.536 ops/s
                 getAdder: 62552340.589 ops/s
                 incAdder: 80272888.948 ops/s

Iteration   6: 151024540.910 ops/s
                 getAdder: 68867612.619 ops/s
                 incAdder: 82156928.291 ops/s

Iteration   7: 147144761.060 ops/s
                 getAdder: 67237393.520 ops/s
                 incAdder: 79907367.540 ops/s

Iteration   8: 141541314.784 ops/s
                 getAdder: 65706958.142 ops/s
                 incAdder: 75834356.642 ops/s

Iteration   9: 132889896.423 ops/s
                 getAdder: 55812160.286 ops/s
                 incAdder: 77077736.137 ops/s

Iteration  10: 139744430.784 ops/s
                 getAdder: 61741798.035 ops/s
                 incAdder: 78002632.749 ops/s



Result "incAdder":
  142328102.285 ±(99.9%) 8917944.411 ops/s [Average]
  (min, avg, max) = (132889896.423, 142328102.285, 151024540.910), stdev = 5898668.064
  CI (99.9%): [133410157.873, 151246046.696] (assumes normal distribution)

Secondary result "getAdder":
  63477207.589 ±(99.9%) 6564667.202 ops/s [Average]
  (min, avg, max) = (55812160.286, 63477207.589, 68867612.619), stdev = 4342120.896
  CI (99.9%): [56912540.386, 70041874.791] (assumes normal distribution)

Secondary result "incAdder":
  78850894.696 ±(99.9%) 4562179.239 ops/s [Average]
  (min, avg, max) = (73456767.465, 78850894.696, 83925387.638), stdev = 3017599.094
  CI (99.9%): [74288715.457, 83413073.935] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Atomic

# Run progress: 7.69% complete, ETA 00:03:19
# Fork: 1 of 1
# Warmup Iteration   1: 118290804.508 ops/s
# Warmup Iteration   2: 117441564.368 ops/s
# Warmup Iteration   3: 119161558.956 ops/s
# Warmup Iteration   4: 111377127.567 ops/s
# Warmup Iteration   5: 119309311.125 ops/s
Iteration   1: 111543967.178 ops/s
                 getAtomic: 72829620.727 ops/s
                 incAtomic: 38714346.451 ops/s

Iteration   2: 121314809.338 ops/s
                 getAtomic: 82511330.864 ops/s
                 incAtomic: 38803478.475 ops/s

Iteration   3: 104032154.501 ops/s
                 getAtomic: 64051501.971 ops/s
                 incAtomic: 39980652.530 ops/s

Iteration   4: 120475143.061 ops/s
                 getAtomic: 81203268.152 ops/s
                 incAtomic: 39271874.909 ops/s

Iteration   5: 124017840.806 ops/s
                 getAtomic: 84500697.431 ops/s
                 incAtomic: 39517143.375 ops/s

Iteration   6: 114411036.006 ops/s
                 getAtomic: 76439668.026 ops/s
                 incAtomic: 37971367.980 ops/s

Iteration   7: 117466900.633 ops/s
                 getAtomic: 76963991.340 ops/s
                 incAtomic: 40502909.293 ops/s

Iteration   8: 113493280.810 ops/s
                 getAtomic: 70808572.969 ops/s
                 incAtomic: 42684707.841 ops/s

Iteration   9: 119425553.043 ops/s
                 getAtomic: 80135323.082 ops/s
                 incAtomic: 39290229.962 ops/s

Iteration  10: 115632937.669 ops/s
                 getAtomic: 76946130.685 ops/s
                 incAtomic: 38686806.985 ops/s



Result "incAtomic":
  116181362.305 ±(99.9%) 8701697.248 ops/s [Average]
  (min, avg, max) = (104032154.501, 116181362.305, 124017840.806), stdev = 5755633.955
  CI (99.9%): [107479665.056, 124883059.553] (assumes normal distribution)

Secondary result "getAtomic":
  76639010.525 ±(99.9%) 9244985.294 ops/s [Average]
  (min, avg, max) = (64051501.971, 76639010.525, 84500697.431), stdev = 6114985.359
  CI (99.9%): [67394025.231, 85883995.819] (assumes normal distribution)

Secondary result "incAtomic":
  39542351.780 ±(99.9%) 1987772.147 ops/s [Average]
  (min, avg, max) = (37971367.980, 39542351.780, 42684707.841), stdev = 1314788.200
  CI (99.9%): [37554579.634, 41530123.927] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockFair

# Run progress: 15.38% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 328508.208 ops/s
# Warmup Iteration   2: 323462.512 ops/s
# Warmup Iteration   3: 340269.426 ops/s
# Warmup Iteration   4: 341186.230 ops/s
# Warmup Iteration   5: 337966.378 ops/s
Iteration   1: 340201.854 ops/s
                 getFairLock: 170104.555 ops/s
                 incFairLock: 170097.299 ops/s

Iteration   2: 341250.959 ops/s
                 getFairLock: 170625.543 ops/s
                 incFairLock: 170625.416 ops/s

Iteration   3: 339155.858 ops/s
                 getFairLock: 169577.915 ops/s
                 incFairLock: 169577.943 ops/s

Iteration   4: 340553.227 ops/s
                 getFairLock: 170276.387 ops/s
                 incFairLock: 170276.841 ops/s

Iteration   5: 339668.764 ops/s
                 getFairLock: 169834.685 ops/s
                 incFairLock: 169834.079 ops/s

Iteration   6: 341206.132 ops/s
                 getFairLock: 170602.581 ops/s
                 incFairLock: 170603.551 ops/s

Iteration   7: 339444.851 ops/s
                 getFairLock: 169721.507 ops/s
                 incFairLock: 169723.344 ops/s

Iteration   8: 340134.045 ops/s
                 getFairLock: 170066.963 ops/s
                 incFairLock: 170067.083 ops/s

Iteration   9: 341058.293 ops/s
                 getFairLock: 170528.684 ops/s
                 incFairLock: 170529.608 ops/s

Iteration  10: 339603.298 ops/s
                 getFairLock: 169802.252 ops/s
                 incFairLock: 169801.046 ops/s



Result "incFairLock":
  340227.728 ±(99.9%) 1157.300 ops/s [Average]
  (min, avg, max) = (339155.858, 340227.728, 341250.959), stdev = 765.482
  CI (99.9%): [339070.428, 341385.028] (assumes normal distribution)

Secondary result "getFairLock":
  170114.107 ±(99.9%) 578.485 ops/s [Average]
  (min, avg, max) = (169577.915, 170114.107, 170625.543), stdev = 382.632
  CI (99.9%): [169535.623, 170692.592] (assumes normal distribution)

Secondary result "incFairLock":
  170113.621 ±(99.9%) 578.821 ops/s [Average]
  (min, avg, max) = (169577.943, 170113.621, 170625.416), stdev = 382.854
  CI (99.9%): [169534.800, 170692.442] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.LockNonFair

# Run progress: 23.08% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 39576570.304 ops/s
# Warmup Iteration   2: 43168798.323 ops/s
# Warmup Iteration   3: 42867051.651 ops/s
# Warmup Iteration   4: 47023169.832 ops/s
# Warmup Iteration   5: 45639445.271 ops/s
Iteration   1: 47486709.766 ops/s
                 getNonFairLock: 24702370.972 ops/s
                 incNonFairLock: 22784338.793 ops/s

Iteration   2: 47383390.070 ops/s
                 getNonFairLock: 23423775.479 ops/s
                 incNonFairLock: 23959614.591 ops/s

Iteration   3: 46853307.791 ops/s
                 getNonFairLock: 25052605.514 ops/s
                 incNonFairLock: 21800702.278 ops/s

Iteration   4: 47769829.115 ops/s
                 getNonFairLock: 26258638.020 ops/s
                 incNonFairLock: 21511191.095 ops/s

Iteration   5: 46239998.842 ops/s
                 getNonFairLock: 24430720.543 ops/s
                 incNonFairLock: 21809278.298 ops/s

Iteration   6: 46987139.726 ops/s
                 getNonFairLock: 24042931.182 ops/s
                 incNonFairLock: 22944208.545 ops/s

Iteration   7: 46569801.100 ops/s
                 getNonFairLock: 24061791.869 ops/s
                 incNonFairLock: 22508009.230 ops/s

Iteration   8: 46416501.270 ops/s
                 getNonFairLock: 25463526.484 ops/s
                 incNonFairLock: 20952974.786 ops/s

Iteration   9: 47777686.117 ops/s
                 getNonFairLock: 24479460.975 ops/s
                 incNonFairLock: 23298225.142 ops/s

Iteration  10: 46055084.840 ops/s
                 getNonFairLock: 24454071.731 ops/s
                 incNonFairLock: 21601013.109 ops/s



Result "incNonFairLock":
  46953944.864 ±(99.9%) 953228.186 ops/s [Average]
  (min, avg, max) = (46055084.840, 46953944.864, 47777686.117), stdev = 630501.425
  CI (99.9%): [46000716.677, 47907173.050] (assumes normal distribution)

Secondary result "getNonFairLock":
  24636989.277 ±(99.9%) 1208055.623 ops/s [Average]
  (min, avg, max) = (23423775.479, 24636989.277, 26258638.020), stdev = 799053.997
  CI (99.9%): [23428933.654, 25845044.900] (assumes normal distribution)

Secondary result "incNonFairLock":
  22316955.587 ±(99.9%) 1412518.603 ops/s [Average]
  (min, avg, max) = (20952974.786, 22316955.587, 23959614.591), stdev = 934293.598
  CI (99.9%): [20904436.983, 23729474.190] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockFair

# Run progress: 30.77% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 310523.833 ops/s
# Warmup Iteration   2: 309040.144 ops/s
# Warmup Iteration   3: 328746.300 ops/s
# Warmup Iteration   4: 330161.711 ops/s
# Warmup Iteration   5: 328538.914 ops/s
Iteration   1: 331364.955 ops/s
                 getFairRWLock: 165682.414 ops/s
                 incFairRWLock: 165682.541 ops/s

Iteration   2: 332180.634 ops/s
                 getFairRWLock: 166089.445 ops/s
                 incFairRWLock: 166091.189 ops/s

Iteration   3: 326250.954 ops/s
                 getFairRWLock: 163125.444 ops/s
                 incFairRWLock: 163125.510 ops/s

Iteration   4: 329545.144 ops/s
                 getFairRWLock: 164771.068 ops/s
                 incFairRWLock: 164774.076 ops/s

Iteration   5: 331439.141 ops/s
                 getFairRWLock: 165719.227 ops/s
                 incFairRWLock: 165719.914 ops/s

Iteration   6: 328508.619 ops/s
                 getFairRWLock: 164257.132 ops/s
                 incFairRWLock: 164251.487 ops/s

Iteration   7: 326914.781 ops/s
                 getFairRWLock: 163457.932 ops/s
                 incFairRWLock: 163456.849 ops/s

Iteration   8: 327951.158 ops/s
                 getFairRWLock: 163976.740 ops/s
                 incFairRWLock: 163974.418 ops/s

Iteration   9: 330780.372 ops/s
                 getFairRWLock: 165389.379 ops/s
                 incFairRWLock: 165390.993 ops/s

Iteration  10: 329516.383 ops/s
                 getFairRWLock: 164755.878 ops/s
                 incFairRWLock: 164760.505 ops/s



Result "incFairRWLock":
  329445.214 ±(99.9%) 3051.188 ops/s [Average]
  (min, avg, max) = (326250.954, 329445.214, 332180.634), stdev = 2018.172
  CI (99.9%): [326394.026, 332496.402] (assumes normal distribution)

Secondary result "getFairRWLock":
  164722.466 ±(99.9%) 1524.744 ops/s [Average]
  (min, avg, max) = (163125.444, 164722.466, 166089.445), stdev = 1008.524
  CI (99.9%): [163197.722, 166247.210] (assumes normal distribution)

Secondary result "incFairRWLock":
  164722.748 ±(99.9%) 1526.447 ops/s [Average]
  (min, avg, max) = (163125.510, 164722.748, 166091.189), stdev = 1009.650
  CI (99.9%): [163196.301, 166249.195] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.RWLockNonFair

# Run progress: 38.46% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 20097647.690 ops/s
# Warmup Iteration   2: 10611292.262 ops/s
# Warmup Iteration   3: 8642775.344 ops/s
# Warmup Iteration   4: 9303243.027 ops/s
# Warmup Iteration   5: 8565518.800 ops/s
Iteration   1: 8415733.675 ops/s
                 getNonFairRWLock: 8034804.981 ops/s
                 incNonFairRWLock: 380928.694 ops/s

Iteration   2: 9044711.866 ops/s
                 getNonFairRWLock: 8270337.880 ops/s
                 incNonFairRWLock: 774373.986 ops/s

Iteration   3: 8130293.686 ops/s
                 getNonFairRWLock: 7897143.902 ops/s
                 incNonFairRWLock: 233149.784 ops/s

Iteration   4: 8447275.136 ops/s
                 getNonFairRWLock: 8290231.434 ops/s
                 incNonFairRWLock: 157043.703 ops/s

Iteration   5: 8550920.773 ops/s
                 getNonFairRWLock: 7886057.857 ops/s
                 incNonFairRWLock: 664862.917 ops/s

Iteration   6: 8360810.315 ops/s
                 getNonFairRWLock: 8084992.316 ops/s
                 incNonFairRWLock: 275817.999 ops/s

Iteration   7: 8182506.860 ops/s
                 getNonFairRWLock: 8067455.593 ops/s
                 incNonFairRWLock: 115051.267 ops/s

Iteration   8: 8924893.010 ops/s
                 getNonFairRWLock: 7866287.664 ops/s
                 incNonFairRWLock: 1058605.346 ops/s

Iteration   9: 8741948.659 ops/s
                 getNonFairRWLock: 7894016.075 ops/s
                 incNonFairRWLock: 847932.584 ops/s

Iteration  10: 8708545.231 ops/s
                 getNonFairRWLock: 7837840.946 ops/s
                 incNonFairRWLock: 870704.285 ops/s



Result "incNonFairRWLock":
  8550763.921 ±(99.9%) 457137.270 ops/s [Average]
  (min, avg, max) = (8130293.686, 8550763.921, 9044711.866), stdev = 302368.000
  CI (99.9%): [8093626.651, 9007901.192] (assumes normal distribution)

Secondary result "getNonFairRWLock":
  8012916.865 ±(99.9%) 250765.368 ops/s [Average]
  (min, avg, max) = (7837840.946, 8012916.865, 8290231.434), stdev = 165865.765
  CI (99.9%): [7762151.497, 8263682.233] (assumes normal distribution)

Secondary result "incNonFairRWLock":
  537847.056 ±(99.9%) 518876.408 ops/s [Average]
  (min, avg, max) = (115051.267, 537847.056, 1058605.346), stdev = 343204.617
  CI (99.9%): [18970.648, 1056723.465] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreFair

# Run progress: 46.15% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 331147.267 ops/s
# Warmup Iteration   2: 330569.034 ops/s
# Warmup Iteration   3: 339132.299 ops/s
# Warmup Iteration   4: 339573.372 ops/s
# Warmup Iteration   5: 331923.660 ops/s
Iteration   1: 340023.053 ops/s
                 getFairSemaphore: 170015.931 ops/s
                 incFairSemaphore: 170007.121 ops/s

Iteration   2: 340783.614 ops/s
                 getFairSemaphore: 170391.314 ops/s
                 incFairSemaphore: 170392.300 ops/s

Iteration   3: 333106.217 ops/s
                 getFairSemaphore: 166552.884 ops/s
                 incFairSemaphore: 166553.332 ops/s

Iteration   4: 337976.163 ops/s
                 getFairSemaphore: 168996.880 ops/s
                 incFairSemaphore: 168979.283 ops/s

Iteration   5: 334872.378 ops/s
                 getFairSemaphore: 167436.932 ops/s
                 incFairSemaphore: 167435.446 ops/s

Iteration   6: 330812.531 ops/s
                 getFairSemaphore: 165406.080 ops/s
                 incFairSemaphore: 165406.451 ops/s

Iteration   7: 331211.957 ops/s
                 getFairSemaphore: 165606.054 ops/s
                 incFairSemaphore: 165605.903 ops/s

Iteration   8: 335892.511 ops/s
                 getFairSemaphore: 167944.288 ops/s
                 incFairSemaphore: 167948.223 ops/s

Iteration   9: 335597.958 ops/s
                 getFairSemaphore: 167799.370 ops/s
                 incFairSemaphore: 167798.587 ops/s

Iteration  10: 338005.884 ops/s
                 getFairSemaphore: 169003.298 ops/s
                 incFairSemaphore: 169002.586 ops/s



Result "incFairSemaphore":
  335828.226 ±(99.9%) 5197.202 ops/s [Average]
  (min, avg, max) = (330812.531, 335828.226, 340783.614), stdev = 3437.627
  CI (99.9%): [330631.025, 341025.428] (assumes normal distribution)

Secondary result "getFairSemaphore":
  167915.303 ±(99.9%) 2600.363 ops/s [Average]
  (min, avg, max) = (165406.080, 167915.303, 170391.314), stdev = 1719.979
  CI (99.9%): [165314.941, 170515.666] (assumes normal distribution)

Secondary result "incFairSemaphore":
  167912.923 ±(99.9%) 2596.847 ops/s [Average]
  (min, avg, max) = (165406.451, 167912.923, 170392.300), stdev = 1717.653
  CI (99.9%): [165316.077, 170509.770] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SemaphoreNonFair

# Run progress: 53.85% complete, ETA 00:01:35
# Fork: 1 of 1
# Warmup Iteration   1: 35782503.321 ops/s
# Warmup Iteration   2: 34939517.564 ops/s
# Warmup Iteration   3: 36002599.000 ops/s
# Warmup Iteration   4: 36445171.343 ops/s
# Warmup Iteration   5: 35495346.832 ops/s
Iteration   1: 36428726.944 ops/s
                 getNonFairSemaphore: 18755791.654 ops/s
                 incNonFairSemaphore: 17672935.290 ops/s

Iteration   2: 36065478.217 ops/s
                 getNonFairSemaphore: 18217458.362 ops/s
                 incNonFairSemaphore: 17848019.855 ops/s

Iteration   3: 36407562.660 ops/s
                 getNonFairSemaphore: 19389309.349 ops/s
                 incNonFairSemaphore: 17018253.311 ops/s

Iteration   4: 34696062.449 ops/s
                 getNonFairSemaphore: 16921375.976 ops/s
                 incNonFairSemaphore: 17774686.473 ops/s

Iteration   5: 36183766.630 ops/s
                 getNonFairSemaphore: 18429510.111 ops/s
                 incNonFairSemaphore: 17754256.519 ops/s

Iteration   6: 35369134.191 ops/s
                 getNonFairSemaphore: 18273212.814 ops/s
                 incNonFairSemaphore: 17095921.377 ops/s

Iteration   7: 36181694.685 ops/s
                 getNonFairSemaphore: 17556359.652 ops/s
                 incNonFairSemaphore: 18625335.033 ops/s

Iteration   8: 36453467.417 ops/s
                 getNonFairSemaphore: 18725366.042 ops/s
                 incNonFairSemaphore: 17728101.375 ops/s

Iteration   9: 36087873.980 ops/s
                 getNonFairSemaphore: 18714107.767 ops/s
                 incNonFairSemaphore: 17373766.213 ops/s

Iteration  10: 36737077.549 ops/s
                 getNonFairSemaphore: 20055474.400 ops/s
                 incNonFairSemaphore: 16681603.149 ops/s



Result "incNonFairSemaphore":
  36061084.472 ±(99.9%) 906911.964 ops/s [Average]
  (min, avg, max) = (34696062.449, 36061084.472, 36737077.549), stdev = 599866.112
  CI (99.9%): [35154172.508, 36967996.436] (assumes normal distribution)

Secondary result "getNonFairSemaphore":
  18503796.613 ±(99.9%) 1322914.104 ops/s [Average]
  (min, avg, max) = (16921375.976, 18503796.613, 20055474.400), stdev = 875025.770
  CI (99.9%): [17180882.508, 19826710.717] (assumes normal distribution)

Secondary result "incNonFairSemaphore":
  17557287.860 ±(99.9%) 821578.717 ops/s [Average]
  (min, avg, max) = (16681603.149, 17557287.860, 18625335.033), stdev = 543423.452
  CI (99.9%): [16735709.143, 18378866.576] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Stamped

# Run progress: 61.54% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 47849042.551 ops/s
# Warmup Iteration   2: 50670616.621 ops/s
# Warmup Iteration   3: 47474753.136 ops/s
# Warmup Iteration   4: 49500118.199 ops/s
# Warmup Iteration   5: 50093307.664 ops/s
Iteration   1: 49961560.282 ops/s
                 getStamped: 33081.488 ops/s
                 incStamped: 49928478.794 ops/s

Iteration   2: 49170359.483 ops/s
                 getStamped: 37560.312 ops/s
                 incStamped: 49132799.171 ops/s

Iteration   3: 48247945.422 ops/s
                 getStamped: 41097.027 ops/s
                 incStamped: 48206848.395 ops/s

Iteration   4: 48803869.013 ops/s
                 getStamped: 40524.359 ops/s
                 incStamped: 48763344.654 ops/s

Iteration   5: 48783055.040 ops/s
                 getStamped: 41024.754 ops/s
                 incStamped: 48742030.286 ops/s

Iteration   6: 48039035.513 ops/s
                 getStamped: 43409.555 ops/s
                 incStamped: 47995625.958 ops/s

Iteration   7: 48340517.993 ops/s
                 getStamped: 41521.030 ops/s
                 incStamped: 48298996.963 ops/s

Iteration   8: 50300772.078 ops/s
                 getStamped: 33996.442 ops/s
                 incStamped: 50266775.636 ops/s

Iteration   9: 48745195.629 ops/s
                 getStamped: 41364.017 ops/s
                 incStamped: 48703831.612 ops/s

Iteration  10: 48594504.153 ops/s
                 getStamped: 42772.272 ops/s
                 incStamped: 48551731.881 ops/s



Result "incStamped":
  48898681.461 ±(99.9%) 1102010.900 ops/s [Average]
  (min, avg, max) = (48039035.513, 48898681.461, 50300772.078), stdev = 728911.978
  CI (99.9%): [47796670.561, 50000692.360] (assumes normal distribution)

Secondary result "getStamped":
  39635.126 ±(99.9%) 5393.526 ops/s [Average]
  (min, avg, max) = (33081.488, 39635.126, 43409.555), stdev = 3567.483
  CI (99.9%): [34241.600, 45028.651] (assumes normal distribution)

Secondary result "incStamped":
  48859046.335 ±(99.9%) 1107116.603 ops/s [Average]
  (min, avg, max) = (47995625.958, 48859046.335, 50266775.636), stdev = 732289.085
  CI (99.9%): [47751929.732, 49966162.939] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.StampedOptimistic

# Run progress: 69.23% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 181174446.069 ops/s
# Warmup Iteration   2: 199132949.573 ops/s
# Warmup Iteration   3: 187389232.063 ops/s
# Warmup Iteration   4: 206399386.867 ops/s
# Warmup Iteration   5: 217313912.545 ops/s
Iteration   1: 228952220.071 ops/s
                 getOptimisticStamped: 198377223.504 ops/s
                 incOptimisticStamped: 30574996.567 ops/s

Iteration   2: 209381045.322 ops/s
                 getOptimisticStamped: 176517168.693 ops/s
                 incOptimisticStamped: 32863876.629 ops/s

Iteration   3: 209769383.419 ops/s
                 getOptimisticStamped: 175585739.655 ops/s
                 incOptimisticStamped: 34183643.764 ops/s

Iteration   4: 243409024.064 ops/s
                 getOptimisticStamped: 215891360.645 ops/s
                 incOptimisticStamped: 27517663.419 ops/s

Iteration   5: 216750726.131 ops/s
                 getOptimisticStamped: 185020784.478 ops/s
                 incOptimisticStamped: 31729941.653 ops/s

Iteration   6: 196078383.474 ops/s
                 getOptimisticStamped: 161433721.814 ops/s
                 incOptimisticStamped: 34644661.659 ops/s

Iteration   7: 179080263.238 ops/s
                 getOptimisticStamped: 143044361.411 ops/s
                 incOptimisticStamped: 36035901.828 ops/s

Iteration   8: 234450319.148 ops/s
                 getOptimisticStamped: 203393653.554 ops/s
                 incOptimisticStamped: 31056665.594 ops/s

Iteration   9: 205146628.820 ops/s
                 getOptimisticStamped: 172256007.893 ops/s
                 incOptimisticStamped: 32890620.927 ops/s

Iteration  10: 207611190.079 ops/s
                 getOptimisticStamped: 175267594.912 ops/s
                 incOptimisticStamped: 32343595.167 ops/s



Result "incOptimisticStamped":
  213062918.377 ±(99.9%) 28527735.162 ops/s [Average]
  (min, avg, max) = (179080263.238, 213062918.377, 243409024.064), stdev = 18869330.484
  CI (99.9%): [184535183.215, 241590653.538] (assumes normal distribution)

Secondary result "getOptimisticStamped":
  180678761.656 ±(99.9%) 31945111.335 ops/s [Average]
  (min, avg, max) = (143044361.411, 180678761.656, 215891360.645), stdev = 21129713.232
  CI (99.9%): [148733650.320, 212623872.991] (assumes normal distribution)

Secondary result "incOptimisticStamped":
  32384156.721 ±(99.9%) 3610129.269 ops/s [Average]
  (min, avg, max) = (27517663.419, 32384156.721, 36035901.828), stdev = 2387876.986
  CI (99.9%): [28774027.452, 35994285.989] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Synchronized

# Run progress: 76.92% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 34149623.542 ops/s
# Warmup Iteration   2: 29384211.066 ops/s
# Warmup Iteration   3: 32924901.551 ops/s
# Warmup Iteration   4: 30129999.116 ops/s
# Warmup Iteration   5: 29017838.788 ops/s
Iteration   1: 29433963.180 ops/s
                 getSynchronized: 12521060.915 ops/s
                 incSynchronized: 16912902.265 ops/s

Iteration   2: 29528754.606 ops/s
                 getSynchronized: 12791680.785 ops/s
                 incSynchronized: 16737073.821 ops/s

Iteration   3: 29965487.667 ops/s
                 getSynchronized: 12372763.959 ops/s
                 incSynchronized: 17592723.708 ops/s

Iteration   4: 29776412.078 ops/s
                 getSynchronized: 13249971.231 ops/s
                 incSynchronized: 16526440.847 ops/s

Iteration   5: 30075954.176 ops/s
                 getSynchronized: 13000379.666 ops/s
                 incSynchronized: 17075574.511 ops/s

Iteration   6: 29056028.945 ops/s
                 getSynchronized: 14353089.715 ops/s
                 incSynchronized: 14702939.230 ops/s

Iteration   7: 29514608.008 ops/s
                 getSynchronized: 13044835.729 ops/s
                 incSynchronized: 16469772.280 ops/s

Iteration   8: 29949128.421 ops/s
                 getSynchronized: 12978617.731 ops/s
                 incSynchronized: 16970510.690 ops/s

Iteration   9: 28528964.484 ops/s
                 getSynchronized: 12563673.102 ops/s
                 incSynchronized: 15965291.382 ops/s

Iteration  10: 29519713.361 ops/s
                 getSynchronized: 11433915.135 ops/s
                 incSynchronized: 18085798.226 ops/s



Result "incSynchronized":
  29534901.493 ±(99.9%) 705560.548 ops/s [Average]
  (min, avg, max) = (28528964.484, 29534901.493, 30075954.176), stdev = 466684.617
  CI (99.9%): [28829340.945, 30240462.041] (assumes normal distribution)

Secondary result "getSynchronized":
  12830998.797 ±(99.9%) 1117752.241 ops/s [Average]
  (min, avg, max) = (11433915.135, 12830998.797, 14353089.715), stdev = 739323.901
  CI (99.9%): [11713246.555, 13948751.038] (assumes normal distribution)

Secondary result "incSynchronized":
  16703902.696 ±(99.9%) 1388327.238 ops/s [Average]
  (min, avg, max) = (14702939.230, 16703902.696, 18085798.226), stdev = 918292.508
  CI (99.9%): [15315575.458, 18092229.934] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.SynchronizedMethod

# Run progress: 84.62% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 33312005.839 ops/s
# Warmup Iteration   2: 31784209.004 ops/s
# Warmup Iteration   3: 32912583.243 ops/s
# Warmup Iteration   4: 32782415.675 ops/s
# Warmup Iteration   5: 32893579.799 ops/s
Iteration   1: 32252795.877 ops/s
                 getSynchronizedMethod: 13102830.533 ops/s
                 incSynchronizedMethod: 19149965.344 ops/s

Iteration   2: 32521040.426 ops/s
                 getSynchronizedMethod: 16455080.702 ops/s
                 incSynchronizedMethod: 16065959.725 ops/s

Iteration   3: 33104083.758 ops/s
                 getSynchronizedMethod: 16382882.306 ops/s
                 incSynchronizedMethod: 16721201.452 ops/s

Iteration   4: 32192845.812 ops/s
                 getSynchronizedMethod: 13097451.029 ops/s
                 incSynchronizedMethod: 19095394.783 ops/s

Iteration   5: 33485232.390 ops/s
                 getSynchronizedMethod: 15514395.903 ops/s
                 incSynchronizedMethod: 17970836.486 ops/s

Iteration   6: 32669886.270 ops/s
                 getSynchronizedMethod: 15421485.095 ops/s
                 incSynchronizedMethod: 17248401.175 ops/s

Iteration   7: 32916336.462 ops/s
                 getSynchronizedMethod: 15712031.298 ops/s
                 incSynchronizedMethod: 17204305.165 ops/s

Iteration   8: 32806125.638 ops/s
                 getSynchronizedMethod: 14091459.695 ops/s
                 incSynchronizedMethod: 18714665.943 ops/s

Iteration   9: 32728914.102 ops/s
                 getSynchronizedMethod: 14680169.817 ops/s
                 incSynchronizedMethod: 18048744.285 ops/s

Iteration  10: 31809637.903 ops/s
                 getSynchronizedMethod: 14208486.562 ops/s
                 incSynchronizedMethod: 17601151.341 ops/s



Result "incSynchronizedMethod":
  32648689.864 ±(99.9%) 729482.484 ops/s [Average]
  (min, avg, max) = (31809637.903, 32648689.864, 33485232.390), stdev = 482507.496
  CI (99.9%): [31919207.380, 33378172.348] (assumes normal distribution)

Secondary result "getSynchronizedMethod":
  14866627.294 ±(99.9%) 1856718.139 ops/s [Average]
  (min, avg, max) = (13097451.029, 14866627.294, 16455080.702), stdev = 1228104.088
  CI (99.9%): [13009909.155, 16723345.433] (assumes normal distribution)

Secondary result "incSynchronizedMethod":
  17782062.570 ±(99.9%) 1536374.487 ops/s [Average]
  (min, avg, max) = (16065959.725, 17782062.570, 19149965.344), stdev = 1016216.597
  CI (99.9%): [16245688.083, 19318437.057] (assumes normal distribution)


# JMH 1.12 (released 58 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/jdk1.8.0_92/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 20 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.chrishantha.microbenchmark.counter.CounterBenchmark.Volatile

# Run progress: 92.31% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 151461008.996 ops/s
# Warmup Iteration   2: 134076679.668 ops/s
# Warmup Iteration   3: 139653066.733 ops/s
# Warmup Iteration   4: 155994428.162 ops/s
# Warmup Iteration   5: 154983149.156 ops/s
Iteration   1: 150051998.104 ops/s
                 getVolatile: 106536131.231 ops/s
                 incVolatile: 43515866.873 ops/s

Iteration   2: 161546989.694 ops/s
                 getVolatile: 117522129.245 ops/s
                 incVolatile: 44024860.449 ops/s

Iteration   3: 165006702.020 ops/s
                 getVolatile: 121090871.251 ops/s
                 incVolatile: 43915830.768 ops/s

Iteration   4: 133032278.747 ops/s
                 getVolatile: 90894199.296 ops/s
                 incVolatile: 42138079.451 ops/s

Iteration   5: 151716819.680 ops/s
                 getVolatile: 109215320.662 ops/s
                 incVolatile: 42501499.018 ops/s

Iteration   6: 146518083.982 ops/s
                 getVolatile: 99146493.741 ops/s
                 incVolatile: 47371590.242 ops/s

Iteration   7: 154761670.558 ops/s
                 getVolatile: 111671489.993 ops/s
                 incVolatile: 43090180.565 ops/s

Iteration   8: 162813539.969 ops/s
                 getVolatile: 119360639.141 ops/s
                 incVolatile: 43452900.828 ops/s

Iteration   9: 149174577.725 ops/s
                 getVolatile: 107291862.141 ops/s
                 incVolatile: 41882715.585 ops/s

Iteration  10: 152832391.312 ops/s
                 getVolatile: 110487069.291 ops/s
                 incVolatile: 42345322.020 ops/s



Result "incVolatile":
  152745505.179 ±(99.9%) 14089933.698 ops/s [Average]
  (min, avg, max) = (133032278.747, 152745505.179, 165006702.020), stdev = 9319618.748
  CI (99.9%): [138655571.481, 166835438.877] (assumes normal distribution)

Secondary result "getVolatile":
  109321620.599 ±(99.9%) 13969747.727 ops/s [Average]
  (min, avg, max) = (90894199.296, 109321620.599, 121090871.251), stdev = 9240123.169
  CI (99.9%): [95351872.872, 123291368.326] (assumes normal distribution)

Secondary result "incVolatile":
  43423884.580 ±(99.9%) 2382518.119 ops/s [Average]
  (min, avg, max) = (41882715.585, 43423884.580, 47371590.242), stdev = 1575888.219
  CI (99.9%): [41041366.461, 45806402.698] (assumes normal distribution)


# Run complete. Total time: 00:03:26

Benchmark                                                   Mode  Cnt          Score          Error  Units
CounterBenchmark.Adder                                     thrpt   10  142328102.285 ±  8917944.411  ops/s
CounterBenchmark.Adder:getAdder                            thrpt   10   63477207.589 ±  6564667.202  ops/s
CounterBenchmark.Adder:incAdder                            thrpt   10   78850894.696 ±  4562179.239  ops/s
CounterBenchmark.Atomic                                    thrpt   10  116181362.305 ±  8701697.248  ops/s
CounterBenchmark.Atomic:getAtomic                          thrpt   10   76639010.525 ±  9244985.294  ops/s
CounterBenchmark.Atomic:incAtomic                          thrpt   10   39542351.780 ±  1987772.147  ops/s
CounterBenchmark.LockFair                                  thrpt   10     340227.728 ±     1157.300  ops/s
CounterBenchmark.LockFair:getFairLock                      thrpt   10     170114.107 ±      578.485  ops/s
CounterBenchmark.LockFair:incFairLock                      thrpt   10     170113.621 ±      578.821  ops/s
CounterBenchmark.LockNonFair                               thrpt   10   46953944.864 ±   953228.186  ops/s
CounterBenchmark.LockNonFair:getNonFairLock                thrpt   10   24636989.277 ±  1208055.623  ops/s
CounterBenchmark.LockNonFair:incNonFairLock                thrpt   10   22316955.587 ±  1412518.603  ops/s
CounterBenchmark.RWLockFair                                thrpt   10     329445.214 ±     3051.188  ops/s
CounterBenchmark.RWLockFair:getFairRWLock                  thrpt   10     164722.466 ±     1524.744  ops/s
CounterBenchmark.RWLockFair:incFairRWLock                  thrpt   10     164722.748 ±     1526.447  ops/s
CounterBenchmark.RWLockNonFair                             thrpt   10    8550763.921 ±   457137.270  ops/s
CounterBenchmark.RWLockNonFair:getNonFairRWLock            thrpt   10    8012916.865 ±   250765.368  ops/s
CounterBenchmark.RWLockNonFair:incNonFairRWLock            thrpt   10     537847.056 ±   518876.408  ops/s
CounterBenchmark.SemaphoreFair                             thrpt   10     335828.226 ±     5197.202  ops/s
CounterBenchmark.SemaphoreFair:getFairSemaphore            thrpt   10     167915.303 ±     2600.363  ops/s
CounterBenchmark.SemaphoreFair:incFairSemaphore            thrpt   10     167912.923 ±     2596.847  ops/s
CounterBenchmark.SemaphoreNonFair                          thrpt   10   36061084.472 ±   906911.964  ops/s
CounterBenchmark.SemaphoreNonFair:getNonFairSemaphore      thrpt   10   18503796.613 ±  1322914.104  ops/s
CounterBenchmark.SemaphoreNonFair:incNonFairSemaphore      thrpt   10   17557287.860 ±   821578.717  ops/s
CounterBenchmark.Stamped                                   thrpt   10   48898681.461 ±  1102010.900  ops/s
CounterBenchmark.Stamped:getStamped                        thrpt   10      39635.126 ±     5393.526  ops/s
CounterBenchmark.Stamped:incStamped                        thrpt   10   48859046.335 ±  1107116.603  ops/s
CounterBenchmark.StampedOptimistic                         thrpt   10  213062918.377 ± 28527735.162  ops/s
CounterBenchmark.StampedOptimistic:getOptimisticStamped    thrpt   10  180678761.656 ± 31945111.335  ops/s
CounterBenchmark.StampedOptimistic:incOptimisticStamped    thrpt   10   32384156.721 ±  3610129.269  ops/s
CounterBenchmark.Synchronized                              thrpt   10   29534901.493 ±   705560.548  ops/s
CounterBenchmark.Synchronized:getSynchronized              thrpt   10   12830998.797 ±  1117752.241  ops/s
CounterBenchmark.Synchronized:incSynchronized              thrpt   10   16703902.696 ±  1388327.238  ops/s
CounterBenchmark.SynchronizedMethod                        thrpt   10   32648689.864 ±   729482.484  ops/s
CounterBenchmark.SynchronizedMethod:getSynchronizedMethod  thrpt   10   14866627.294 ±  1856718.139  ops/s
CounterBenchmark.SynchronizedMethod:incSynchronizedMethod  thrpt   10   17782062.570 ±  1536374.487  ops/s
CounterBenchmark.Volatile                                  thrpt   10  152745505.179 ± 14089933.698  ops/s
CounterBenchmark.Volatile:getVolatile                      thrpt   10  109321620.599 ± 13969747.727  ops/s
CounterBenchmark.Volatile:incVolatile                      thrpt   10   43423884.580 ±  2382518.119  ops/s

Benchmark result is saved to ./counters/results/results-10-10.csv
